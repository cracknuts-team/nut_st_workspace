
nut_stm32f407vg_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e2c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08007fb4  08007fb4  00008fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800884c  0800884c  0000a014  2**0
                  CONTENTS
  4 .ARM          00000008  0800884c  0800884c  0000984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008854  08008854  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008854  08008854  00009854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008858  08008858  00009858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800885c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a014  2**0
                  CONTENTS
 10 .bss          00002590  20000014  20000014  0000a014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200025a4  200025a4  0000a014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010709  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023f0  00000000  00000000  0001a74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  0001cb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bab  00000000  00000000  0001d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022776  00000000  00000000  0001e59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013aba  00000000  00000000  00040d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce19c  00000000  00000000  000547cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122967  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e38  00000000  00000000  001229ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  001267e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f9c 	.word	0x08007f9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08007f9c 	.word	0x08007f9c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a11      	ldr	r2, [pc, #68]	@ (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d11b      	bne.n	8000502 <HAL_UART_RxCpltCallback+0x4a>
		if (flag_cmd_payload == 0) { // command phase
 80004ca:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <HAL_UART_RxCpltCallback+0x58>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d114      	bne.n	80004fc <HAL_UART_RxCpltCallback+0x44>
			payload_len = (rx_buffer[6] << 8) + rx_buffer[7]; // compute payload length
 80004d2:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <HAL_UART_RxCpltCallback+0x5c>)
 80004d4:	799b      	ldrb	r3, [r3, #6]
 80004d6:	021b      	lsls	r3, r3, #8
 80004d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <HAL_UART_RxCpltCallback+0x5c>)
 80004da:	79d2      	ldrb	r2, [r2, #7]
 80004dc:	4413      	add	r3, r2
 80004de:	461a      	mov	r2, r3
 80004e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000518 <HAL_UART_RxCpltCallback+0x60>)
 80004e2:	601a      	str	r2, [r3, #0]
			flag_cmd_payload = 1; // wait for payload
 80004e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000510 <HAL_UART_RxCpltCallback+0x58>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, rx_buffer + CMD_LEN, payload_len); // receive payload
 80004ea:	490c      	ldr	r1, [pc, #48]	@ (800051c <HAL_UART_RxCpltCallback+0x64>)
 80004ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000518 <HAL_UART_RxCpltCallback+0x60>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	461a      	mov	r2, r3
 80004f4:	480a      	ldr	r0, [pc, #40]	@ (8000520 <HAL_UART_RxCpltCallback+0x68>)
 80004f6:	f004 fd4c 	bl	8004f92 <HAL_UART_Receive_IT>
//			HAL_UART_Receive_IT(&huart1, rx_buffer + CMD_LEN, CMD_LEN); // receive payload
		} else { // payload phase
			flag_uart = 1;
		}
	}
}
 80004fa:	e002      	b.n	8000502 <HAL_UART_RxCpltCallback+0x4a>
			flag_uart = 1;
 80004fc:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <HAL_UART_RxCpltCallback+0x6c>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40011000 	.word	0x40011000
 8000510:	20000150 	.word	0x20000150
 8000514:	20000158 	.word	0x20000158
 8000518:	20000154 	.word	0x20000154
 800051c:	20000160 	.word	0x20000160
 8000520:	20000104 	.word	0x20000104
 8000524:	2000014c 	.word	0x2000014c

08000528 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a05      	ldr	r2, [pc, #20]	@ (800054c <HAL_SPI_TxCpltCallback+0x24>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d104      	bne.n	8000544 <HAL_SPI_TxCpltCallback+0x1c>
		HAL_SPI_Receive_IT(&hspi1, rx_buffer, CMD_LEN);
 800053a:	2208      	movs	r2, #8
 800053c:	4904      	ldr	r1, [pc, #16]	@ (8000550 <HAL_SPI_TxCpltCallback+0x28>)
 800053e:	4805      	ldr	r0, [pc, #20]	@ (8000554 <HAL_SPI_TxCpltCallback+0x2c>)
 8000540:	f003 fe6e 	bl	8004220 <HAL_SPI_Receive_IT>
	}
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40013000 	.word	0x40013000
 8000550:	20000158 	.word	0x20000158
 8000554:	200000ac 	.word	0x200000ac

08000558 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a11      	ldr	r2, [pc, #68]	@ (80005ac <HAL_SPI_RxCpltCallback+0x54>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d11b      	bne.n	80005a2 <HAL_SPI_RxCpltCallback+0x4a>
		if (flag_cmd_payload == 0) { // command phase
 800056a:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <HAL_SPI_RxCpltCallback+0x58>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d114      	bne.n	800059c <HAL_SPI_RxCpltCallback+0x44>
			payload_len = (rx_buffer[6] << 8) + rx_buffer[7]; // compute payload length
 8000572:	4b10      	ldr	r3, [pc, #64]	@ (80005b4 <HAL_SPI_RxCpltCallback+0x5c>)
 8000574:	799b      	ldrb	r3, [r3, #6]
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	4a0e      	ldr	r2, [pc, #56]	@ (80005b4 <HAL_SPI_RxCpltCallback+0x5c>)
 800057a:	79d2      	ldrb	r2, [r2, #7]
 800057c:	4413      	add	r3, r2
 800057e:	461a      	mov	r2, r3
 8000580:	4b0d      	ldr	r3, [pc, #52]	@ (80005b8 <HAL_SPI_RxCpltCallback+0x60>)
 8000582:	601a      	str	r2, [r3, #0]
			flag_cmd_payload = 1; // wait for payload
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <HAL_SPI_RxCpltCallback+0x58>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Receive_IT(&hspi1, rx_buffer + CMD_LEN, payload_len);
 800058a:	490c      	ldr	r1, [pc, #48]	@ (80005bc <HAL_SPI_RxCpltCallback+0x64>)
 800058c:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <HAL_SPI_RxCpltCallback+0x60>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	b29b      	uxth	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	480a      	ldr	r0, [pc, #40]	@ (80005c0 <HAL_SPI_RxCpltCallback+0x68>)
 8000596:	f003 fe43 	bl	8004220 <HAL_SPI_Receive_IT>
		} else { // payload phase
			flag_spi = 1;

		}
	}
}
 800059a:	e002      	b.n	80005a2 <HAL_SPI_RxCpltCallback+0x4a>
			flag_spi = 1;
 800059c:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <HAL_SPI_RxCpltCallback+0x6c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40013000 	.word	0x40013000
 80005b0:	20000150 	.word	0x20000150
 80005b4:	20000158 	.word	0x20000158
 80005b8:	20000154 	.word	0x20000154
 80005bc:	20000160 	.word	0x20000160
 80005c0:	200000ac 	.word	0x200000ac
 80005c4:	2000014d 	.word	0x2000014d

080005c8 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
		;
	}

}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <HAL_I2C_SlaveRxCpltCallback>:
//        HAL_I2C_Slave_Transmit_IT(&hi2c1, txBuffer, TX_BUFFER_SIZE);
//    }
//}

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
//    for (uint8_t i = 0; i < RX_BUFFER_SIZE; i++)
//    {
//        // 处理接收到的数据
//        // 例如：将数据存储到某个变量或执行某些操作
//    }
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    // 处理发�?�完�???
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fd74 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f8c6 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f9e0 	bl	80009d4 <MX_GPIO_Init>
  MX_CAN2_Init();
 8000614:	f000 f920 	bl	8000858 <MX_CAN2_Init>
  MX_I2C2_Init();
 8000618:	f000 f952 	bl	80008c0 <MX_I2C2_Init>
  MX_SPI1_Init();
 800061c:	f000 f97e 	bl	800091c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f9ae 	bl	8000980 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	flag_uart = 0;
 8000624:	4b4d      	ldr	r3, [pc, #308]	@ (800075c <main+0x158>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	flag_spi = 0;
 800062a:	4b4d      	ldr	r3, [pc, #308]	@ (8000760 <main+0x15c>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
	flag_i2c = 0;
 8000630:	4b4c      	ldr	r3, [pc, #304]	@ (8000764 <main+0x160>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	flag_can = 0;
 8000636:	4b4c      	ldr	r3, [pc, #304]	@ (8000768 <main+0x164>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
	flag_cmd_payload = 0;
 800063c:	4b4b      	ldr	r3, [pc, #300]	@ (800076c <main+0x168>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart1, rx_buffer, CMD_LEN);
 8000642:	2208      	movs	r2, #8
 8000644:	494a      	ldr	r1, [pc, #296]	@ (8000770 <main+0x16c>)
 8000646:	484b      	ldr	r0, [pc, #300]	@ (8000774 <main+0x170>)
 8000648:	f004 fca3 	bl	8004f92 <HAL_UART_Receive_IT>
	HAL_SPI_Receive_IT(&hspi1, rx_buffer, CMD_LEN);
 800064c:	2208      	movs	r2, #8
 800064e:	4948      	ldr	r1, [pc, #288]	@ (8000770 <main+0x16c>)
 8000650:	4849      	ldr	r0, [pc, #292]	@ (8000778 <main+0x174>)
 8000652:	f003 fde5 	bl	8004220 <HAL_SPI_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	mbedtls_aes_init(&aes_ctx);
 8000656:	4849      	ldr	r0, [pc, #292]	@ (800077c <main+0x178>)
 8000658:	f005 fe62 	bl	8006320 <mbedtls_aes_init>
	mbedtls_des_init(&des_ctx);
 800065c:	4848      	ldr	r0, [pc, #288]	@ (8000780 <main+0x17c>)
 800065e:	f007 f830 	bl	80076c2 <mbedtls_des_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (flag_uart || flag_spi || flag_i2c || flag_can) {
 8000662:	4b3e      	ldr	r3, [pc, #248]	@ (800075c <main+0x158>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d10b      	bne.n	8000682 <main+0x7e>
 800066a:	4b3d      	ldr	r3, [pc, #244]	@ (8000760 <main+0x15c>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d107      	bne.n	8000682 <main+0x7e>
 8000672:	4b3c      	ldr	r3, [pc, #240]	@ (8000764 <main+0x160>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d103      	bne.n	8000682 <main+0x7e>
 800067a:	4b3b      	ldr	r3, [pc, #236]	@ (8000768 <main+0x164>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0ef      	beq.n	8000662 <main+0x5e>
			SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000682:	4b40      	ldr	r3, [pc, #256]	@ (8000784 <main+0x180>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a3f      	ldr	r2, [pc, #252]	@ (8000784 <main+0x180>)
 8000688:	f023 0302 	bic.w	r3, r3, #2
 800068c:	6013      	str	r3, [r2, #0]

			LED_ON;
 800068e:	2200      	movs	r2, #0
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	483d      	ldr	r0, [pc, #244]	@ (8000788 <main+0x184>)
 8000694:	f001 f9ea 	bl	8001a6c <HAL_GPIO_WritePin>
			USER_IO_SET;
 8000698:	2201      	movs	r2, #1
 800069a:	2104      	movs	r1, #4
 800069c:	483b      	ldr	r0, [pc, #236]	@ (800078c <main+0x188>)
 800069e:	f001 f9e5 	bl	8001a6c <HAL_GPIO_WritePin>

			process_cmd();
 80006a2:	f000 fa21 	bl	8000ae8 <process_cmd>

			USER_IO_CLR;
 80006a6:	2200      	movs	r2, #0
 80006a8:	2104      	movs	r1, #4
 80006aa:	4838      	ldr	r0, [pc, #224]	@ (800078c <main+0x188>)
 80006ac:	f001 f9de 	bl	8001a6c <HAL_GPIO_WritePin>
			LED_OFF;
 80006b0:	2201      	movs	r2, #1
 80006b2:	2180      	movs	r1, #128	@ 0x80
 80006b4:	4834      	ldr	r0, [pc, #208]	@ (8000788 <main+0x184>)
 80006b6:	f001 f9d9 	bl	8001a6c <HAL_GPIO_WritePin>
			SysTick->CTRL &= SysTick_CTRL_TICKINT_Msk;
 80006ba:	4b32      	ldr	r3, [pc, #200]	@ (8000784 <main+0x180>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a31      	ldr	r2, [pc, #196]	@ (8000784 <main+0x180>)
 80006c0:	f003 0302 	and.w	r3, r3, #2
 80006c4:	6013      	str	r3, [r2, #0]

			tx_buffer[0] = (status & 0xff00) >> 8;
 80006c6:	4b32      	ldr	r3, [pc, #200]	@ (8000790 <main+0x18c>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b30      	ldr	r3, [pc, #192]	@ (8000794 <main+0x190>)
 80006d2:	701a      	strb	r2, [r3, #0]
			tx_buffer[1] = status & 0xff;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000790 <main+0x18c>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <main+0x190>)
 80006dc:	705a      	strb	r2, [r3, #1]
			tx_buffer[2] = 0;
 80006de:	4b2d      	ldr	r3, [pc, #180]	@ (8000794 <main+0x190>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	709a      	strb	r2, [r3, #2]
			tx_buffer[3] = 0;
 80006e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000794 <main+0x190>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	70da      	strb	r2, [r3, #3]
			tx_buffer[4] = (payload_len & 0xff00) >> 8;
 80006ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <main+0x194>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	0a1b      	lsrs	r3, r3, #8
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <main+0x190>)
 80006f4:	711a      	strb	r2, [r3, #4]
			tx_buffer[5] = payload_len & 0xff;
 80006f6:	4b28      	ldr	r3, [pc, #160]	@ (8000798 <main+0x194>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <main+0x190>)
 80006fe:	715a      	strb	r2, [r3, #5]

			flag_cmd_payload = 0;
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <main+0x168>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
			if (flag_uart) {
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <main+0x158>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d013      	beq.n	8000736 <main+0x132>
				HAL_UART_Transmit(&huart1, tx_buffer, 6 + payload_len, 0xffff);
 800070e:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <main+0x194>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	b29b      	uxth	r3, r3
 8000714:	3306      	adds	r3, #6
 8000716:	b29a      	uxth	r2, r3
 8000718:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800071c:	491d      	ldr	r1, [pc, #116]	@ (8000794 <main+0x190>)
 800071e:	4815      	ldr	r0, [pc, #84]	@ (8000774 <main+0x170>)
 8000720:	f004 fbac 	bl	8004e7c <HAL_UART_Transmit>
				flag_uart = 0;
 8000724:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <main+0x158>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, rx_buffer, CMD_LEN);
 800072a:	2208      	movs	r2, #8
 800072c:	4910      	ldr	r1, [pc, #64]	@ (8000770 <main+0x16c>)
 800072e:	4811      	ldr	r0, [pc, #68]	@ (8000774 <main+0x170>)
 8000730:	f004 fc2f 	bl	8004f92 <HAL_UART_Receive_IT>
 8000734:	e795      	b.n	8000662 <main+0x5e>
			} else if (flag_spi) {
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <main+0x15c>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d091      	beq.n	8000662 <main+0x5e>
//				HAL_SPI_Transmit(&hspi1, tx_buffer, 6 + payload_len, HAL_MAX_DELAY);
				HAL_SPI_Transmit_IT(&hspi1, tx_buffer, 6 + payload_len);
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <main+0x194>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	b29b      	uxth	r3, r3
 8000744:	3306      	adds	r3, #6
 8000746:	b29b      	uxth	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	4912      	ldr	r1, [pc, #72]	@ (8000794 <main+0x190>)
 800074c:	480a      	ldr	r0, [pc, #40]	@ (8000778 <main+0x174>)
 800074e:	f003 fce3 	bl	8004118 <HAL_SPI_Transmit_IT>
				flag_spi = 0;
 8000752:	4b03      	ldr	r3, [pc, #12]	@ (8000760 <main+0x15c>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
		if (flag_uart || flag_spi || flag_i2c || flag_can) {
 8000758:	e783      	b.n	8000662 <main+0x5e>
 800075a:	bf00      	nop
 800075c:	2000014c 	.word	0x2000014c
 8000760:	2000014d 	.word	0x2000014d
 8000764:	2000014e 	.word	0x2000014e
 8000768:	2000014f 	.word	0x2000014f
 800076c:	20000150 	.word	0x20000150
 8000770:	20000158 	.word	0x20000158
 8000774:	20000104 	.word	0x20000104
 8000778:	200000ac 	.word	0x200000ac
 800077c:	200001dc 	.word	0x200001dc
 8000780:	200002f4 	.word	0x200002f4
 8000784:	e000e010 	.word	0xe000e010
 8000788:	40020400 	.word	0x40020400
 800078c:	40020000 	.word	0x40020000
 8000790:	200001d8 	.word	0x200001d8
 8000794:	20000198 	.word	0x20000198
 8000798:	20000154 	.word	0x20000154

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	@ 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f007 fbca 	bl	8007f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	4b22      	ldr	r3, [pc, #136]	@ (8000850 <SystemClock_Config+0xb4>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <SystemClock_Config+0xb4>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <SystemClock_Config+0xb4>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <SystemClock_Config+0xb8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000854 <SystemClock_Config+0xb8>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <SystemClock_Config+0xb8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000804:	2300      	movs	r3, #0
 8000806:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4618      	mov	r0, r3
 800080e:	f002 ff61 	bl	80036d4 <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000818:	f000 fa5c 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000824:	2380      	movs	r3, #128	@ 0x80
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f003 f9c4 	bl	8003bc4 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000842:	f000 fa47 	bl	8000cd4 <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	@ 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <MX_CAN2_Init+0x60>)
 800085e:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <MX_CAN2_Init+0x64>)
 8000860:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_CAN2_Init+0x60>)
 8000864:	2210      	movs	r2, #16
 8000866:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000868:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <MX_CAN2_Init+0x60>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_CAN2_Init+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000874:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <MX_CAN2_Init+0x60>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_CAN2_Init+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000880:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <MX_CAN2_Init+0x60>)
 8000882:	2200      	movs	r2, #0
 8000884:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_CAN2_Init+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800088c:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <MX_CAN2_Init+0x60>)
 800088e:	2200      	movs	r2, #0
 8000890:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_CAN2_Init+0x60>)
 8000894:	2200      	movs	r2, #0
 8000896:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <MX_CAN2_Init+0x60>)
 800089a:	2200      	movs	r2, #0
 800089c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_CAN2_Init+0x60>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_CAN2_Init+0x60>)
 80008a6:	f000 fc97 	bl	80011d8 <HAL_CAN_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80008b0:	f000 fa10 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000030 	.word	0x20000030
 80008bc:	40006800 	.word	0x40006800

080008c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_I2C2_Init+0x50>)
 80008c6:	4a13      	ldr	r2, [pc, #76]	@ (8000914 <MX_I2C2_Init+0x54>)
 80008c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008ca:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <MX_I2C2_Init+0x50>)
 80008cc:	4a12      	ldr	r2, [pc, #72]	@ (8000918 <MX_I2C2_Init+0x58>)
 80008ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_I2C2_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <MX_I2C2_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_I2C2_Init+0x50>)
 80008de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <MX_I2C2_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_I2C2_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <MX_I2C2_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_I2C2_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_I2C2_Init+0x50>)
 80008fe:	f001 f8cf 	bl	8001aa0 <HAL_I2C_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000908:	f000 f9e4 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000058 	.word	0x20000058
 8000914:	40005800 	.word	0x40005800
 8000918:	000186a0 	.word	0x000186a0

0800091c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_SPI1_Init+0x5c>)
 8000922:	4a16      	ldr	r2, [pc, #88]	@ (800097c <MX_SPI1_Init+0x60>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_SPI1_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_SPI1_Init+0x5c>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_SPI1_Init+0x5c>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_SPI1_Init+0x5c>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_SPI1_Init+0x5c>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_SPI1_Init+0x5c>)
 8000946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800094a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_SPI1_Init+0x5c>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_SPI1_Init+0x5c>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <MX_SPI1_Init+0x5c>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_SPI1_Init+0x5c>)
 8000960:	220a      	movs	r2, #10
 8000962:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_SPI1_Init+0x5c>)
 8000966:	f003 fb4d 	bl	8004004 <HAL_SPI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 f9b0 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000ac 	.word	0x200000ac
 800097c:	40013000 	.word	0x40013000

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <MX_USART1_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b8:	f004 fa10 	bl	8004ddc <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f987 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000104 	.word	0x20000104
 80009d0:	40011000 	.word	0x40011000

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a39      	ldr	r2, [pc, #228]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b37      	ldr	r3, [pc, #220]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b33      	ldr	r3, [pc, #204]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a32      	ldr	r2, [pc, #200]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a24      	ldr	r2, [pc, #144]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <MX_GPIO_Init+0x104>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	481f      	ldr	r0, [pc, #124]	@ (8000adc <MX_GPIO_Init+0x108>)
 8000a60:	f001 f804 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000a6a:	481d      	ldr	r0, [pc, #116]	@ (8000ae0 <MX_GPIO_Init+0x10c>)
 8000a6c:	f000 fffe 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2180      	movs	r1, #128	@ 0x80
 8000a74:	481b      	ldr	r0, [pc, #108]	@ (8000ae4 <MX_GPIO_Init+0x110>)
 8000a76:	f000 fff9 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <MX_GPIO_Init+0x108>)
 8000a92:	f000 fe4f 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a96:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <MX_GPIO_Init+0x10c>)
 8000ab0:	f000 fe40 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ab4:	2380      	movs	r3, #128	@ 0x80
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	@ (8000ae4 <MX_GPIO_Init+0x110>)
 8000acc:	f000 fe32 	bl	8001734 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <process_cmd>:

/* USER CODE BEGIN 4 */
void process_cmd() {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	if (rx_buffer[0] == 0x01 && rx_buffer[1] == 0x00) { // Set AES encrypt Key
 8000aec:	4b70      	ldr	r3, [pc, #448]	@ (8000cb0 <process_cmd+0x1c8>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d111      	bne.n	8000b18 <process_cmd+0x30>
 8000af4:	4b6e      	ldr	r3, [pc, #440]	@ (8000cb0 <process_cmd+0x1c8>)
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d10d      	bne.n	8000b18 <process_cmd+0x30>
		mbedtls_aes_setkey_enc(&aes_ctx, rx_buffer + CMD_LEN, key_length);
 8000afc:	496d      	ldr	r1, [pc, #436]	@ (8000cb4 <process_cmd+0x1cc>)
 8000afe:	4b6e      	ldr	r3, [pc, #440]	@ (8000cb8 <process_cmd+0x1d0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	486d      	ldr	r0, [pc, #436]	@ (8000cbc <process_cmd+0x1d4>)
 8000b06:	f005 fc2b 	bl	8006360 <mbedtls_aes_setkey_enc>
		status = 0;
 8000b0a:	4b6d      	ldr	r3, [pc, #436]	@ (8000cc0 <process_cmd+0x1d8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	801a      	strh	r2, [r3, #0]
		payload_len = 0;
 8000b10:	4b6c      	ldr	r3, [pc, #432]	@ (8000cc4 <process_cmd+0x1dc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e0c8      	b.n	8000caa <process_cmd+0x1c2>
	} else if (rx_buffer[0] == 0x01 && rx_buffer[1] == 0x01) { // Set AES decrypt Key
 8000b18:	4b65      	ldr	r3, [pc, #404]	@ (8000cb0 <process_cmd+0x1c8>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d111      	bne.n	8000b44 <process_cmd+0x5c>
 8000b20:	4b63      	ldr	r3, [pc, #396]	@ (8000cb0 <process_cmd+0x1c8>)
 8000b22:	785b      	ldrb	r3, [r3, #1]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d10d      	bne.n	8000b44 <process_cmd+0x5c>
		mbedtls_aes_setkey_dec(&aes_ctx, rx_buffer + CMD_LEN, key_length);
 8000b28:	4962      	ldr	r1, [pc, #392]	@ (8000cb4 <process_cmd+0x1cc>)
 8000b2a:	4b63      	ldr	r3, [pc, #396]	@ (8000cb8 <process_cmd+0x1d0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4862      	ldr	r0, [pc, #392]	@ (8000cbc <process_cmd+0x1d4>)
 8000b32:	f005 fe09 	bl	8006748 <mbedtls_aes_setkey_dec>
		status = 0;
 8000b36:	4b62      	ldr	r3, [pc, #392]	@ (8000cc0 <process_cmd+0x1d8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	801a      	strh	r2, [r3, #0]
		payload_len = 0;
 8000b3c:	4b61      	ldr	r3, [pc, #388]	@ (8000cc4 <process_cmd+0x1dc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	e0b2      	b.n	8000caa <process_cmd+0x1c2>
	} else if (rx_buffer[0] == 0x01 && rx_buffer[1] == 0x02) { // AES Encryption
 8000b44:	4b5a      	ldr	r3, [pc, #360]	@ (8000cb0 <process_cmd+0x1c8>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d11c      	bne.n	8000b86 <process_cmd+0x9e>
 8000b4c:	4b58      	ldr	r3, [pc, #352]	@ (8000cb0 <process_cmd+0x1c8>)
 8000b4e:	785b      	ldrb	r3, [r3, #1]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d118      	bne.n	8000b86 <process_cmd+0x9e>
		NUT_IO1_SET;
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b5a:	485b      	ldr	r0, [pc, #364]	@ (8000cc8 <process_cmd+0x1e0>)
 8000b5c:	f000 ff86 	bl	8001a6c <HAL_GPIO_WritePin>
		mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_ENCRYPT,
 8000b60:	4a54      	ldr	r2, [pc, #336]	@ (8000cb4 <process_cmd+0x1cc>)
 8000b62:	4b5a      	ldr	r3, [pc, #360]	@ (8000ccc <process_cmd+0x1e4>)
 8000b64:	2101      	movs	r1, #1
 8000b66:	4855      	ldr	r0, [pc, #340]	@ (8000cbc <process_cmd+0x1d4>)
 8000b68:	f006 fd90 	bl	800768c <mbedtls_aes_crypt_ecb>
				rx_buffer + CMD_LEN, tx_buffer + STA_LEN);
		NUT_IO1_CLR;
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b72:	4855      	ldr	r0, [pc, #340]	@ (8000cc8 <process_cmd+0x1e0>)
 8000b74:	f000 ff7a 	bl	8001a6c <HAL_GPIO_WritePin>
		status = 0;
 8000b78:	4b51      	ldr	r3, [pc, #324]	@ (8000cc0 <process_cmd+0x1d8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	801a      	strh	r2, [r3, #0]
		payload_len = 16;
 8000b7e:	4b51      	ldr	r3, [pc, #324]	@ (8000cc4 <process_cmd+0x1dc>)
 8000b80:	2210      	movs	r2, #16
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	e091      	b.n	8000caa <process_cmd+0x1c2>
	} else if (rx_buffer[0] == 0x01 && rx_buffer[1] == 0x03) { // AES Decryption
 8000b86:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb0 <process_cmd+0x1c8>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d11c      	bne.n	8000bc8 <process_cmd+0xe0>
 8000b8e:	4b48      	ldr	r3, [pc, #288]	@ (8000cb0 <process_cmd+0x1c8>)
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d118      	bne.n	8000bc8 <process_cmd+0xe0>
		NUT_IO1_SET;
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9c:	484a      	ldr	r0, [pc, #296]	@ (8000cc8 <process_cmd+0x1e0>)
 8000b9e:	f000 ff65 	bl	8001a6c <HAL_GPIO_WritePin>
		mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_DECRYPT,
 8000ba2:	4a44      	ldr	r2, [pc, #272]	@ (8000cb4 <process_cmd+0x1cc>)
 8000ba4:	4b49      	ldr	r3, [pc, #292]	@ (8000ccc <process_cmd+0x1e4>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4844      	ldr	r0, [pc, #272]	@ (8000cbc <process_cmd+0x1d4>)
 8000baa:	f006 fd6f 	bl	800768c <mbedtls_aes_crypt_ecb>
				rx_buffer + CMD_LEN, tx_buffer + STA_LEN);
		NUT_IO1_CLR;
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb4:	4844      	ldr	r0, [pc, #272]	@ (8000cc8 <process_cmd+0x1e0>)
 8000bb6:	f000 ff59 	bl	8001a6c <HAL_GPIO_WritePin>
		status = 0;
 8000bba:	4b41      	ldr	r3, [pc, #260]	@ (8000cc0 <process_cmd+0x1d8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	801a      	strh	r2, [r3, #0]
		payload_len = 16;
 8000bc0:	4b40      	ldr	r3, [pc, #256]	@ (8000cc4 <process_cmd+0x1dc>)
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e070      	b.n	8000caa <process_cmd+0x1c2>
	} else if (rx_buffer[0] == 0x02 && rx_buffer[1] == 0x00) { // Set DES encryption key
 8000bc8:	4b39      	ldr	r3, [pc, #228]	@ (8000cb0 <process_cmd+0x1c8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d10f      	bne.n	8000bf0 <process_cmd+0x108>
 8000bd0:	4b37      	ldr	r3, [pc, #220]	@ (8000cb0 <process_cmd+0x1c8>)
 8000bd2:	785b      	ldrb	r3, [r3, #1]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10b      	bne.n	8000bf0 <process_cmd+0x108>
		mbedtls_des_setkey_enc(&des_ctx, rx_buffer + CMD_LEN);
 8000bd8:	4b36      	ldr	r3, [pc, #216]	@ (8000cb4 <process_cmd+0x1cc>)
 8000bda:	4619      	mov	r1, r3
 8000bdc:	483c      	ldr	r0, [pc, #240]	@ (8000cd0 <process_cmd+0x1e8>)
 8000bde:	f006 ff79 	bl	8007ad4 <mbedtls_des_setkey_enc>
		status = 0;
 8000be2:	4b37      	ldr	r3, [pc, #220]	@ (8000cc0 <process_cmd+0x1d8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	801a      	strh	r2, [r3, #0]
		payload_len = 0;
 8000be8:	4b36      	ldr	r3, [pc, #216]	@ (8000cc4 <process_cmd+0x1dc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e05c      	b.n	8000caa <process_cmd+0x1c2>
	} else if (rx_buffer[0] == 0x02 && rx_buffer[1] == 0x01) { // Set DES decryption key
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb0 <process_cmd+0x1c8>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d10f      	bne.n	8000c18 <process_cmd+0x130>
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <process_cmd+0x1c8>)
 8000bfa:	785b      	ldrb	r3, [r3, #1]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d10b      	bne.n	8000c18 <process_cmd+0x130>
		mbedtls_des_setkey_dec(&des_ctx, rx_buffer + CMD_LEN);
 8000c00:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb4 <process_cmd+0x1cc>)
 8000c02:	4619      	mov	r1, r3
 8000c04:	4832      	ldr	r0, [pc, #200]	@ (8000cd0 <process_cmd+0x1e8>)
 8000c06:	f006 ff74 	bl	8007af2 <mbedtls_des_setkey_dec>
		status = 0;
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <process_cmd+0x1d8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	801a      	strh	r2, [r3, #0]
		payload_len = 0;
 8000c10:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc4 <process_cmd+0x1dc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e048      	b.n	8000caa <process_cmd+0x1c2>
	} else if (rx_buffer[0] == 0x02 && rx_buffer[1] == 0x02) { // DES Encryption
 8000c18:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <process_cmd+0x1c8>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d11c      	bne.n	8000c5a <process_cmd+0x172>
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <process_cmd+0x1c8>)
 8000c22:	785b      	ldrb	r3, [r3, #1]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d118      	bne.n	8000c5a <process_cmd+0x172>
		NUT_IO1_SET;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c2e:	4826      	ldr	r0, [pc, #152]	@ (8000cc8 <process_cmd+0x1e0>)
 8000c30:	f000 ff1c 	bl	8001a6c <HAL_GPIO_WritePin>
		mbedtls_des_crypt_ecb(&des_ctx, rx_buffer + CMD_LEN,
 8000c34:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <process_cmd+0x1cc>)
 8000c36:	4a25      	ldr	r2, [pc, #148]	@ (8000ccc <process_cmd+0x1e4>)
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4825      	ldr	r0, [pc, #148]	@ (8000cd0 <process_cmd+0x1e8>)
 8000c3c:	f006 ffa4 	bl	8007b88 <mbedtls_des_crypt_ecb>
				tx_buffer + STA_LEN);
		NUT_IO1_CLR;
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c46:	4820      	ldr	r0, [pc, #128]	@ (8000cc8 <process_cmd+0x1e0>)
 8000c48:	f000 ff10 	bl	8001a6c <HAL_GPIO_WritePin>
		status = 0;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <process_cmd+0x1d8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	801a      	strh	r2, [r3, #0]
		payload_len = 8;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <process_cmd+0x1dc>)
 8000c54:	2208      	movs	r2, #8
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	e027      	b.n	8000caa <process_cmd+0x1c2>
	} else if (rx_buffer[0] == 0x02 && rx_buffer[1] == 0x03) {
 8000c5a:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <process_cmd+0x1c8>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d11c      	bne.n	8000c9c <process_cmd+0x1b4>
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <process_cmd+0x1c8>)
 8000c64:	785b      	ldrb	r3, [r3, #1]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d118      	bne.n	8000c9c <process_cmd+0x1b4>
		NUT_IO1_SET;
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c70:	4815      	ldr	r0, [pc, #84]	@ (8000cc8 <process_cmd+0x1e0>)
 8000c72:	f000 fefb 	bl	8001a6c <HAL_GPIO_WritePin>
		mbedtls_des_crypt_ecb(&des_ctx, rx_buffer + CMD_LEN,
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <process_cmd+0x1cc>)
 8000c78:	4a14      	ldr	r2, [pc, #80]	@ (8000ccc <process_cmd+0x1e4>)
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4814      	ldr	r0, [pc, #80]	@ (8000cd0 <process_cmd+0x1e8>)
 8000c7e:	f006 ff83 	bl	8007b88 <mbedtls_des_crypt_ecb>
				tx_buffer + STA_LEN);
		NUT_IO1_CLR;
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c88:	480f      	ldr	r0, [pc, #60]	@ (8000cc8 <process_cmd+0x1e0>)
 8000c8a:	f000 feef 	bl	8001a6c <HAL_GPIO_WritePin>
		status = 0;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <process_cmd+0x1d8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	801a      	strh	r2, [r3, #0]
		payload_len = 8;
 8000c94:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <process_cmd+0x1dc>)
 8000c96:	2208      	movs	r2, #8
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	e006      	b.n	8000caa <process_cmd+0x1c2>
	} else {
		status = 0x8000;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <process_cmd+0x1d8>)
 8000c9e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ca2:	801a      	strh	r2, [r3, #0]
		payload_len = 0;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <process_cmd+0x1dc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
	}
	return;
 8000caa:	bf00      	nop
}
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000158 	.word	0x20000158
 8000cb4:	20000160 	.word	0x20000160
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	200001dc 	.word	0x200001dc
 8000cc0:	200001d8 	.word	0x200001d8
 8000cc4:	20000154 	.word	0x20000154
 8000cc8:	40020c00 	.word	0x40020c00
 8000ccc:	2000019e 	.word	0x2000019e
 8000cd0:	200002f4 	.word	0x200002f4

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <Error_Handler+0x8>

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	4a0f      	ldr	r2, [pc, #60]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a20      	ldr	r2, [pc, #128]	@ (8000dd0 <HAL_CAN_MspInit+0xa0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d13a      	bne.n	8000dc8 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <HAL_CAN_MspInit+0xa4>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd4 <HAL_CAN_MspInit+0xa4>)
 8000d5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <HAL_CAN_MspInit+0xa4>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <HAL_CAN_MspInit+0xa4>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a17      	ldr	r2, [pc, #92]	@ (8000dd4 <HAL_CAN_MspInit+0xa4>)
 8000d78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <HAL_CAN_MspInit+0xa4>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <HAL_CAN_MspInit+0xa4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a10      	ldr	r2, [pc, #64]	@ (8000dd4 <HAL_CAN_MspInit+0xa4>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <HAL_CAN_MspInit+0xa4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000da6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000db8:	2309      	movs	r3, #9
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <HAL_CAN_MspInit+0xa8>)
 8000dc4:	f000 fcb6 	bl	8001734 <HAL_GPIO_Init>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	@ 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40006800 	.word	0x40006800
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020400 	.word	0x40020400

08000ddc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	@ 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a21      	ldr	r2, [pc, #132]	@ (8000e80 <HAL_I2C_MspInit+0xa4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d13c      	bne.n	8000e78 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <HAL_I2C_MspInit+0xa8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a1f      	ldr	r2, [pc, #124]	@ (8000e84 <HAL_I2C_MspInit+0xa8>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <HAL_I2C_MspInit+0xa8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e20:	2312      	movs	r3, #18
 8000e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4814      	ldr	r0, [pc, #80]	@ (8000e88 <HAL_I2C_MspInit+0xac>)
 8000e38:	f000 fc7c 	bl	8001734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <HAL_I2C_MspInit+0xa8>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	4a0f      	ldr	r2, [pc, #60]	@ (8000e84 <HAL_I2C_MspInit+0xa8>)
 8000e46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <HAL_I2C_MspInit+0xa8>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2021      	movs	r0, #33	@ 0x21
 8000e5e:	f000 fb92 	bl	8001586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000e62:	2021      	movs	r0, #33	@ 0x21
 8000e64:	f000 fbab 	bl	80015be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2022      	movs	r0, #34	@ 0x22
 8000e6e:	f000 fb8a 	bl	8001586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000e72:	2022      	movs	r0, #34	@ 0x22
 8000e74:	f000 fba3 	bl	80015be <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	@ 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40005800 	.word	0x40005800
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020400 	.word	0x40020400

08000e8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	@ 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f20 <HAL_SPI_MspInit+0x94>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d133      	bne.n	8000f16 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <HAL_SPI_MspInit+0x98>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f24 <HAL_SPI_MspInit+0x98>)
 8000eb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <HAL_SPI_MspInit+0x98>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <HAL_SPI_MspInit+0x98>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a14      	ldr	r2, [pc, #80]	@ (8000f24 <HAL_SPI_MspInit+0x98>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_SPI_MspInit+0x98>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ee6:	23e0      	movs	r3, #224	@ 0xe0
 8000ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <HAL_SPI_MspInit+0x9c>)
 8000f02:	f000 fc17 	bl	8001734 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2023      	movs	r0, #35	@ 0x23
 8000f0c:	f000 fb3b 	bl	8001586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f10:	2023      	movs	r0, #35	@ 0x23
 8000f12:	f000 fb54 	bl	80015be <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	@ 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40013000 	.word	0x40013000
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000

08000f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	@ 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc0 <HAL_UART_MspInit+0x94>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d134      	bne.n	8000fb8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <HAL_UART_MspInit+0x98>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f56:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <HAL_UART_MspInit+0x98>)
 8000f58:	f043 0310 	orr.w	r3, r3, #16
 8000f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5e:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <HAL_UART_MspInit+0x98>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <HAL_UART_MspInit+0x98>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a14      	ldr	r2, [pc, #80]	@ (8000fc4 <HAL_UART_MspInit+0x98>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_UART_MspInit+0x98>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f86:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4809      	ldr	r0, [pc, #36]	@ (8000fc8 <HAL_UART_MspInit+0x9c>)
 8000fa4:	f000 fbc6 	bl	8001734 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	2025      	movs	r0, #37	@ 0x25
 8000fae:	f000 faea 	bl	8001586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fb2:	2025      	movs	r0, #37	@ 0x25
 8000fb4:	f000 fb03 	bl	80015be <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	@ 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40011000 	.word	0x40011000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001022:	f000 f8b9 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <I2C2_EV_IRQHandler+0x10>)
 8001032:	f000 fe8e 	bl	8001d52 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000058 	.word	0x20000058

08001040 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <I2C2_ER_IRQHandler+0x10>)
 8001046:	f000 ffd7 	bl	8001ff8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000058 	.word	0x20000058

08001054 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <SPI1_IRQHandler+0x10>)
 800105a:	f003 fa07 	bl	800446c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000ac 	.word	0x200000ac

08001068 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <USART1_IRQHandler+0x10>)
 800106e:	f003 ffb5 	bl	8004fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000104 	.word	0x20000104

0800107c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	@ (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010a4:	f7ff ffea 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010aa:	490d      	ldr	r1, [pc, #52]	@ (80010e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010ac:	4a0d      	ldr	r2, [pc, #52]	@ (80010e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c0:	4c0a      	ldr	r4, [pc, #40]	@ (80010ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ce:	f006 ff41 	bl	8007f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff fa97 	bl	8000604 <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010e4:	0800885c 	.word	0x0800885c
  ldr r2, =_sbss
 80010e8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010ec:	200025a4 	.word	0x200025a4

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <HAL_Init+0x40>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001104:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <HAL_Init+0x40>)
 800110a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800110e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <HAL_Init+0x40>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 fa27 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff fdda 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023c00 	.word	0x40023c00

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fa3f 	bl	80015da <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 fa07 	bl	8001586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000004 	.word	0x20000004
 8001190:	2000000c 	.word	0x2000000c
 8001194:	20000008 	.word	0x20000008

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	2000000c 	.word	0x2000000c
 80011bc:	20000374 	.word	0x20000374

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000374 	.word	0x20000374

080011d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e0ed      	b.n	80013c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fd9a 	bl	8000d30 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120c:	f7ff ffd8 	bl	80011c0 <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001212:	e012      	b.n	800123a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001214:	f7ff ffd4 	bl	80011c0 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b0a      	cmp	r3, #10
 8001220:	d90b      	bls.n	800123a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001226:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2205      	movs	r2, #5
 8001232:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e0c5      	b.n	80013c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0e5      	beq.n	8001214 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0202 	bic.w	r2, r2, #2
 8001256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001258:	f7ff ffb2 	bl	80011c0 <HAL_GetTick>
 800125c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800125e:	e012      	b.n	8001286 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001260:	f7ff ffae 	bl	80011c0 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b0a      	cmp	r3, #10
 800126c:	d90b      	bls.n	8001286 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001272:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2205      	movs	r2, #5
 800127e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e09f      	b.n	80013c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1e5      	bne.n	8001260 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7e1b      	ldrb	r3, [r3, #24]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d108      	bne.n	80012ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e007      	b.n	80012be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7e5b      	ldrb	r3, [r3, #25]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d108      	bne.n	80012d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	e007      	b.n	80012e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e9b      	ldrb	r3, [r3, #26]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d108      	bne.n	8001302 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0220 	orr.w	r2, r2, #32
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e007      	b.n	8001312 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0220 	bic.w	r2, r2, #32
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7edb      	ldrb	r3, [r3, #27]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d108      	bne.n	800132c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0210 	bic.w	r2, r2, #16
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e007      	b.n	800133c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0210 	orr.w	r2, r2, #16
 800133a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7f1b      	ldrb	r3, [r3, #28]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d108      	bne.n	8001356 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0208 	orr.w	r2, r2, #8
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e007      	b.n	8001366 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0208 	bic.w	r2, r2, #8
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7f5b      	ldrb	r3, [r3, #29]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d108      	bne.n	8001380 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0204 	orr.w	r2, r2, #4
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e007      	b.n	8001390 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0204 	bic.w	r2, r2, #4
 800138e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	ea42 0103 	orr.w	r1, r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	1e5a      	subs	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db0b      	blt.n	800145e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 021f 	and.w	r2, r3, #31
 800144c:	4907      	ldr	r1, [pc, #28]	@ (800146c <__NVIC_EnableIRQ+0x38>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2001      	movs	r0, #1
 8001456:	fa00 f202 	lsl.w	r2, r0, r2
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	@ (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	@ (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	@ 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	@ 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f7ff ff8e 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	@ (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff29 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001598:	f7ff ff3e 	bl	8001418 <__NVIC_GetPriorityGrouping>
 800159c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff ff8e 	bl	80014c4 <NVIC_EncodePriority>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff5d 	bl	8001470 <__NVIC_SetPriority>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff31 	bl	8001434 <__NVIC_EnableIRQ>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ffa2 	bl	800152c <SysTick_Config>
 80015e8:	4603      	mov	r3, r0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001600:	f7ff fdde 	bl	80011c0 <HAL_GetTick>
 8001604:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d008      	beq.n	8001624 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2280      	movs	r2, #128	@ 0x80
 8001616:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e052      	b.n	80016ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0216 	bic.w	r2, r2, #22
 8001632:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001642:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	2b00      	cmp	r3, #0
 800164a:	d103      	bne.n	8001654 <HAL_DMA_Abort+0x62>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001650:	2b00      	cmp	r3, #0
 8001652:	d007      	beq.n	8001664 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0208 	bic.w	r2, r2, #8
 8001662:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001674:	e013      	b.n	800169e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001676:	f7ff fda3 	bl	80011c0 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b05      	cmp	r3, #5
 8001682:	d90c      	bls.n	800169e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2220      	movs	r2, #32
 8001688:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2203      	movs	r2, #3
 800168e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e015      	b.n	80016ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e4      	bne.n	8001676 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b0:	223f      	movs	r2, #63	@ 0x3f
 80016b2:	409a      	lsls	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d004      	beq.n	80016f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2280      	movs	r2, #128	@ 0x80
 80016ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e00c      	b.n	800170a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2205      	movs	r2, #5
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001724:	b2db      	uxtb	r3, r3
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	@ 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e16b      	b.n	8001a28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	429a      	cmp	r2, r3
 800176a:	f040 815a 	bne.w	8001a22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d005      	beq.n	8001786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001782:	2b02      	cmp	r3, #2
 8001784:	d130      	bne.n	80017e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 0201 	and.w	r2, r3, #1
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d017      	beq.n	8001824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d123      	bne.n	8001878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80b4 	beq.w	8001a22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b60      	ldr	r3, [pc, #384]	@ (8001a40 <HAL_GPIO_Init+0x30c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	4a5f      	ldr	r2, [pc, #380]	@ (8001a40 <HAL_GPIO_Init+0x30c>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001a40 <HAL_GPIO_Init+0x30c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a44 <HAL_GPIO_Init+0x310>)
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3302      	adds	r3, #2
 80018de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	220f      	movs	r2, #15
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a52      	ldr	r2, [pc, #328]	@ (8001a48 <HAL_GPIO_Init+0x314>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02b      	beq.n	800195a <HAL_GPIO_Init+0x226>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a51      	ldr	r2, [pc, #324]	@ (8001a4c <HAL_GPIO_Init+0x318>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d025      	beq.n	8001956 <HAL_GPIO_Init+0x222>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a50      	ldr	r2, [pc, #320]	@ (8001a50 <HAL_GPIO_Init+0x31c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01f      	beq.n	8001952 <HAL_GPIO_Init+0x21e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4f      	ldr	r2, [pc, #316]	@ (8001a54 <HAL_GPIO_Init+0x320>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x21a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4e      	ldr	r2, [pc, #312]	@ (8001a58 <HAL_GPIO_Init+0x324>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x216>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4d      	ldr	r2, [pc, #308]	@ (8001a5c <HAL_GPIO_Init+0x328>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x212>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a60 <HAL_GPIO_Init+0x32c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x20e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4b      	ldr	r2, [pc, #300]	@ (8001a64 <HAL_GPIO_Init+0x330>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x20a>
 800193a:	2307      	movs	r3, #7
 800193c:	e00e      	b.n	800195c <HAL_GPIO_Init+0x228>
 800193e:	2308      	movs	r3, #8
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001942:	2306      	movs	r3, #6
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x228>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x228>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x228>
 800195a:	2300      	movs	r3, #0
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800196c:	4935      	ldr	r1, [pc, #212]	@ (8001a44 <HAL_GPIO_Init+0x310>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a68 <HAL_GPIO_Init+0x334>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199e:	4a32      	ldr	r2, [pc, #200]	@ (8001a68 <HAL_GPIO_Init+0x334>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a4:	4b30      	ldr	r3, [pc, #192]	@ (8001a68 <HAL_GPIO_Init+0x334>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c8:	4a27      	ldr	r2, [pc, #156]	@ (8001a68 <HAL_GPIO_Init+0x334>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ce:	4b26      	ldr	r3, [pc, #152]	@ (8001a68 <HAL_GPIO_Init+0x334>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a68 <HAL_GPIO_Init+0x334>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <HAL_GPIO_Init+0x334>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1c:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <HAL_GPIO_Init+0x334>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f67f ae90 	bls.w	8001750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3724      	adds	r7, #36	@ 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40013800 	.word	0x40013800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40021400 	.word	0x40021400
 8001a60:	40021800 	.word	0x40021800
 8001a64:	40021c00 	.word	0x40021c00
 8001a68:	40013c00 	.word	0x40013c00

08001a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a7c:	787b      	ldrb	r3, [r7, #1]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a88:	e003      	b.n	8001a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	041a      	lsls	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	619a      	str	r2, [r3, #24]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e12b      	b.n	8001d0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff f988 	bl	8000ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2224      	movs	r2, #36	@ 0x24
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001af2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b04:	f002 fa56 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8001b08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4a81      	ldr	r2, [pc, #516]	@ (8001d14 <HAL_I2C_Init+0x274>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d807      	bhi.n	8001b24 <HAL_I2C_Init+0x84>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a80      	ldr	r2, [pc, #512]	@ (8001d18 <HAL_I2C_Init+0x278>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	bf94      	ite	ls
 8001b1c:	2301      	movls	r3, #1
 8001b1e:	2300      	movhi	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	e006      	b.n	8001b32 <HAL_I2C_Init+0x92>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4a7d      	ldr	r2, [pc, #500]	@ (8001d1c <HAL_I2C_Init+0x27c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	bf94      	ite	ls
 8001b2c:	2301      	movls	r3, #1
 8001b2e:	2300      	movhi	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0e7      	b.n	8001d0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4a78      	ldr	r2, [pc, #480]	@ (8001d20 <HAL_I2C_Init+0x280>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9b      	lsrs	r3, r3, #18
 8001b44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4a6a      	ldr	r2, [pc, #424]	@ (8001d14 <HAL_I2C_Init+0x274>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d802      	bhi.n	8001b74 <HAL_I2C_Init+0xd4>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3301      	adds	r3, #1
 8001b72:	e009      	b.n	8001b88 <HAL_I2C_Init+0xe8>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	4a69      	ldr	r2, [pc, #420]	@ (8001d24 <HAL_I2C_Init+0x284>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	3301      	adds	r3, #1
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	495c      	ldr	r1, [pc, #368]	@ (8001d14 <HAL_I2C_Init+0x274>)
 8001ba4:	428b      	cmp	r3, r1
 8001ba6:	d819      	bhi.n	8001bdc <HAL_I2C_Init+0x13c>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1e59      	subs	r1, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb6:	1c59      	adds	r1, r3, #1
 8001bb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00a      	beq.n	8001bd8 <HAL_I2C_Init+0x138>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1e59      	subs	r1, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd6:	e051      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e04f      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d111      	bne.n	8001c08 <HAL_I2C_Init+0x168>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e58      	subs	r0, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	440b      	add	r3, r1
 8001bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e012      	b.n	8001c2e <HAL_I2C_Init+0x18e>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	0099      	lsls	r1, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Init+0x196>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e022      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10e      	bne.n	8001c5c <HAL_I2C_Init+0x1bc>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e58      	subs	r0, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	440b      	add	r3, r1
 8001c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c5a:	e00f      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e58      	subs	r0, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	0099      	lsls	r1, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	6809      	ldr	r1, [r1, #0]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001caa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6911      	ldr	r1, [r2, #16]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68d2      	ldr	r2, [r2, #12]
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	000186a0 	.word	0x000186a0
 8001d18:	001e847f 	.word	0x001e847f
 8001d1c:	003d08ff 	.word	0x003d08ff
 8001d20:	431bde83 	.word	0x431bde83
 8001d24:	10624dd3 	.word	0x10624dd3

08001d28 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3a:	2b80      	cmp	r3, #128	@ 0x80
 8001d3c:	d103      	bne.n	8001d46 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  }
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b088      	sub	sp, #32
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6a:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d7a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d003      	beq.n	8001d8a <HAL_I2C_EV_IRQHandler+0x38>
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	2b40      	cmp	r3, #64	@ 0x40
 8001d86:	f040 80b1 	bne.w	8001eec <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10d      	bne.n	8001dc0 <HAL_I2C_EV_IRQHandler+0x6e>
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001daa:	d003      	beq.n	8001db4 <HAL_I2C_EV_IRQHandler+0x62>
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001db2:	d101      	bne.n	8001db8 <HAL_I2C_EV_IRQHandler+0x66>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <HAL_I2C_EV_IRQHandler+0x68>
 8001db8:	2300      	movs	r3, #0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	f000 8114 	beq.w	8001fe8 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HAL_I2C_EV_IRQHandler+0x90>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f001 fc61 	bl	800369c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fd66 	bl	80028ac <I2C_Master_SB>
 8001de0:	e083      	b.n	8001eea <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_I2C_EV_IRQHandler+0xac>
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fdde 	bl	80029b8 <I2C_Master_ADD10>
 8001dfc:	e075      	b.n	8001eea <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_I2C_EV_IRQHandler+0xc8>
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fdfa 	bl	8002a0c <I2C_Master_ADDR>
 8001e18:	e067      	b.n	8001eea <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d036      	beq.n	8001e92 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e32:	f000 80db 	beq.w	8001fec <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00d      	beq.n	8001e5c <HAL_I2C_EV_IRQHandler+0x10a>
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d008      	beq.n	8001e5c <HAL_I2C_EV_IRQHandler+0x10a>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d103      	bne.n	8001e5c <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f9c2 	bl	80021de <I2C_MasterTransmit_TXE>
 8001e5a:	e046      	b.n	8001eea <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80c2 	beq.w	8001fec <HAL_I2C_EV_IRQHandler+0x29a>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80bc 	beq.w	8001fec <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	2b21      	cmp	r3, #33	@ 0x21
 8001e78:	d103      	bne.n	8001e82 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fa4b 	bl	8002316 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e80:	e0b4      	b.n	8001fec <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	2b40      	cmp	r3, #64	@ 0x40
 8001e86:	f040 80b1 	bne.w	8001fec <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fab9 	bl	8002402 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e90:	e0ac      	b.n	8001fec <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ea0:	f000 80a4 	beq.w	8001fec <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <HAL_I2C_EV_IRQHandler+0x178>
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_I2C_EV_IRQHandler+0x178>
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fb35 	bl	8002532 <I2C_MasterReceive_RXNE>
 8001ec8:	e00f      	b.n	8001eea <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 808b 	beq.w	8001fec <HAL_I2C_EV_IRQHandler+0x29a>
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8085 	beq.w	8001fec <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fbed 	bl	80026c2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ee8:	e080      	b.n	8001fec <HAL_I2C_EV_IRQHandler+0x29a>
 8001eea:	e07f      	b.n	8001fec <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d004      	beq.n	8001efe <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	e007      	b.n	8001f0e <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d011      	beq.n	8001f3c <HAL_I2C_EV_IRQHandler+0x1ea>
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f32:	69b9      	ldr	r1, [r7, #24]
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 ffb8 	bl	8002eaa <I2C_Slave_ADDR>
 8001f3a:	e05a      	b.n	8001ff2 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_I2C_EV_IRQHandler+0x206>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 fff3 	bl	8002f3c <I2C_Slave_STOPF>
 8001f56:	e04c      	b.n	8001ff2 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f58:	7bbb      	ldrb	r3, [r7, #14]
 8001f5a:	2b21      	cmp	r3, #33	@ 0x21
 8001f5c:	d002      	beq.n	8001f64 <HAL_I2C_EV_IRQHandler+0x212>
 8001f5e:	7bbb      	ldrb	r3, [r7, #14]
 8001f60:	2b29      	cmp	r3, #41	@ 0x29
 8001f62:	d120      	bne.n	8001fa6 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00d      	beq.n	8001f8a <HAL_I2C_EV_IRQHandler+0x238>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_I2C_EV_IRQHandler+0x238>
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d103      	bne.n	8001f8a <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fed3 	bl	8002d2e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f88:	e032      	b.n	8001ff0 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d02d      	beq.n	8001ff0 <HAL_I2C_EV_IRQHandler+0x29e>
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d028      	beq.n	8001ff0 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 ff02 	bl	8002da8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fa4:	e024      	b.n	8001ff0 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00d      	beq.n	8001fcc <HAL_I2C_EV_IRQHandler+0x27a>
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <HAL_I2C_EV_IRQHandler+0x27a>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d103      	bne.n	8001fcc <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 ff10 	bl	8002dea <I2C_SlaveReceive_RXNE>
 8001fca:	e012      	b.n	8001ff2 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 ff40 	bl	8002e66 <I2C_SlaveReceive_BTF>
 8001fe6:	e004      	b.n	8001ff2 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001fe8:	bf00      	nop
 8001fea:	e002      	b.n	8001ff2 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fec:	bf00      	nop
 8001fee:	e000      	b.n	8001ff2 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ff0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	@ 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800201a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00d      	beq.n	8002042 <HAL_I2C_ER_IRQHandler+0x4a>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002040:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00d      	beq.n	8002068 <HAL_I2C_ER_IRQHandler+0x70>
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002066:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206e:	2b00      	cmp	r3, #0
 8002070:	d03e      	beq.n	80020f0 <HAL_I2C_ER_IRQHandler+0xf8>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d039      	beq.n	80020f0 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800207c:	7efb      	ldrb	r3, [r7, #27]
 800207e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800208e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002096:	7ebb      	ldrb	r3, [r7, #26]
 8002098:	2b20      	cmp	r3, #32
 800209a:	d112      	bne.n	80020c2 <HAL_I2C_ER_IRQHandler+0xca>
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10f      	bne.n	80020c2 <HAL_I2C_ER_IRQHandler+0xca>
 80020a2:	7cfb      	ldrb	r3, [r7, #19]
 80020a4:	2b21      	cmp	r3, #33	@ 0x21
 80020a6:	d008      	beq.n	80020ba <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	2b29      	cmp	r3, #41	@ 0x29
 80020ac:	d005      	beq.n	80020ba <HAL_I2C_ER_IRQHandler+0xc2>
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	2b28      	cmp	r3, #40	@ 0x28
 80020b2:	d106      	bne.n	80020c2 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b21      	cmp	r3, #33	@ 0x21
 80020b8:	d103      	bne.n	80020c2 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f001 f86e 	bl	800319c <I2C_Slave_AF>
 80020c0:	e016      	b.n	80020f0 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020ca:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020d4:	7efb      	ldrb	r3, [r7, #27]
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d002      	beq.n	80020e0 <HAL_I2C_ER_IRQHandler+0xe8>
 80020da:	7efb      	ldrb	r3, [r7, #27]
 80020dc:	2b40      	cmp	r3, #64	@ 0x40
 80020de:	d107      	bne.n	80020f0 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ee:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00d      	beq.n	8002116 <HAL_I2C_ER_IRQHandler+0x11e>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002114:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f001 f8ab 	bl	8003284 <I2C_ITError>
  }
}
 800212e:	bf00      	nop
 8002130:	3728      	adds	r7, #40	@ 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	70fb      	strb	r3, [r7, #3]
 800216a:	4613      	mov	r3, r2
 800216c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021f4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d150      	bne.n	80022a6 <I2C_MasterTransmit_TXE+0xc8>
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b21      	cmp	r3, #33	@ 0x21
 8002208:	d14d      	bne.n	80022a6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d01d      	beq.n	800224c <I2C_MasterTransmit_TXE+0x6e>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b20      	cmp	r3, #32
 8002214:	d01a      	beq.n	800224c <I2C_MasterTransmit_TXE+0x6e>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800221c:	d016      	beq.n	800224c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800222c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2211      	movs	r2, #17
 8002232:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff76 	bl	8002136 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800224a:	e060      	b.n	800230e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800225a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800226a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b40      	cmp	r3, #64	@ 0x40
 8002284:	d107      	bne.n	8002296 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff7d 	bl	800218e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002294:	e03b      	b.n	800230e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ff49 	bl	8002136 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022a4:	e033      	b.n	800230e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	2b21      	cmp	r3, #33	@ 0x21
 80022aa:	d005      	beq.n	80022b8 <I2C_MasterTransmit_TXE+0xda>
 80022ac:	7bbb      	ldrb	r3, [r7, #14]
 80022ae:	2b40      	cmp	r3, #64	@ 0x40
 80022b0:	d12d      	bne.n	800230e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	2b22      	cmp	r3, #34	@ 0x22
 80022b6:	d12a      	bne.n	800230e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022d0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022d2:	e01c      	b.n	800230e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b40      	cmp	r3, #64	@ 0x40
 80022de:	d103      	bne.n	80022e8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f88e 	bl	8002402 <I2C_MemoryTransmit_TXE_BTF>
}
 80022e6:	e012      	b.n	800230e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800230c:	e7ff      	b.n	800230e <I2C_MasterTransmit_TXE+0x130>
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b21      	cmp	r3, #33	@ 0x21
 800232e:	d164      	bne.n	80023fa <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d012      	beq.n	8002360 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	781a      	ldrb	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800235e:	e04c      	b.n	80023fa <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b08      	cmp	r3, #8
 8002364:	d01d      	beq.n	80023a2 <I2C_MasterTransmit_BTF+0x8c>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b20      	cmp	r3, #32
 800236a:	d01a      	beq.n	80023a2 <I2C_MasterTransmit_BTF+0x8c>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002372:	d016      	beq.n	80023a2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002382:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2211      	movs	r2, #17
 8002388:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fecb 	bl	8002136 <HAL_I2C_MasterTxCpltCallback>
}
 80023a0:	e02b      	b.n	80023fa <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023b0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b40      	cmp	r3, #64	@ 0x40
 80023da:	d107      	bne.n	80023ec <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff fed2 	bl	800218e <HAL_I2C_MemTxCpltCallback>
}
 80023ea:	e006      	b.n	80023fa <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff fe9e 	bl	8002136 <HAL_I2C_MasterTxCpltCallback>
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002410:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002416:	2b00      	cmp	r3, #0
 8002418:	d11d      	bne.n	8002456 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241e:	2b01      	cmp	r3, #1
 8002420:	d10b      	bne.n	800243a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002426:	b2da      	uxtb	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002432:	1c9a      	adds	r2, r3, #2
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002438:	e077      	b.n	800252a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243e:	b29b      	uxth	r3, r3
 8002440:	121b      	asrs	r3, r3, #8
 8002442:	b2da      	uxtb	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002454:	e069      	b.n	800252a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800245a:	2b01      	cmp	r3, #1
 800245c:	d10b      	bne.n	8002476 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002462:	b2da      	uxtb	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002474:	e059      	b.n	800252a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800247a:	2b02      	cmp	r3, #2
 800247c:	d152      	bne.n	8002524 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	2b22      	cmp	r3, #34	@ 0x22
 8002482:	d10d      	bne.n	80024a0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002492:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800249e:	e044      	b.n	800252a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d015      	beq.n	80024d6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	2b21      	cmp	r3, #33	@ 0x21
 80024ae:	d112      	bne.n	80024d6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	781a      	ldrb	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80024d4:	e029      	b.n	800252a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d124      	bne.n	800252a <I2C_MemoryTransmit_TXE_BTF+0x128>
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	2b21      	cmp	r3, #33	@ 0x21
 80024e4:	d121      	bne.n	800252a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80024f4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002504:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff fe36 	bl	800218e <HAL_I2C_MemTxCpltCallback>
}
 8002522:	e002      	b.n	800252a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff fbff 	bl	8001d28 <I2C_Flush_DR>
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b22      	cmp	r3, #34	@ 0x22
 8002544:	f040 80b9 	bne.w	80026ba <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d921      	bls.n	80025a0 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b03      	cmp	r3, #3
 800258a:	f040 8096 	bne.w	80026ba <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800259c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800259e:	e08c      	b.n	80026ba <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d07f      	beq.n	80026a8 <I2C_MasterReceive_RXNE+0x176>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d002      	beq.n	80025b4 <I2C_MasterReceive_RXNE+0x82>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d179      	bne.n	80026a8 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f001 f83f 	bl	8003638 <I2C_WaitOnSTOPRequestThroughIT>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d14c      	bne.n	800265a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ce:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025de:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b40      	cmp	r3, #64	@ 0x40
 8002618:	d10a      	bne.n	8002630 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff fdba 	bl	80021a2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800262e:	e044      	b.n	80026ba <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b08      	cmp	r3, #8
 800263c:	d002      	beq.n	8002644 <I2C_MasterReceive_RXNE+0x112>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b20      	cmp	r3, #32
 8002642:	d103      	bne.n	800264c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	631a      	str	r2, [r3, #48]	@ 0x30
 800264a:	e002      	b.n	8002652 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2212      	movs	r2, #18
 8002650:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fd79 	bl	800214a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002658:	e02f      	b.n	80026ba <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002668:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff fd88 	bl	80021b6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026a6:	e008      	b.n	80026ba <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026b6:	605a      	str	r2, [r3, #4]
}
 80026b8:	e7ff      	b.n	80026ba <I2C_MasterReceive_RXNE+0x188>
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d11b      	bne.n	8002712 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002710:	e0c8      	b.n	80028a4 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b03      	cmp	r3, #3
 800271a:	d129      	bne.n	8002770 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800272a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b04      	cmp	r3, #4
 8002730:	d00a      	beq.n	8002748 <I2C_MasterReceive_BTF+0x86>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d007      	beq.n	8002748 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002746:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800276e:	e099      	b.n	80028a4 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	f040 8081 	bne.w	800287e <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d002      	beq.n	8002788 <I2C_MasterReceive_BTF+0xc6>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b10      	cmp	r3, #16
 8002786:	d108      	bne.n	800279a <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e019      	b.n	80027ce <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d002      	beq.n	80027a6 <I2C_MasterReceive_BTF+0xe4>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d108      	bne.n	80027b8 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e00a      	b.n	80027ce <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d007      	beq.n	80027ce <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002828:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b40      	cmp	r3, #64	@ 0x40
 800283c:	d10a      	bne.n	8002854 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fca8 	bl	80021a2 <HAL_I2C_MemRxCpltCallback>
}
 8002852:	e027      	b.n	80028a4 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b08      	cmp	r3, #8
 8002860:	d002      	beq.n	8002868 <I2C_MasterReceive_BTF+0x1a6>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b20      	cmp	r3, #32
 8002866:	d103      	bne.n	8002870 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	@ 0x30
 800286e:	e002      	b.n	8002876 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2212      	movs	r2, #18
 8002874:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fc67 	bl	800214a <HAL_I2C_MasterRxCpltCallback>
}
 800287c:	e012      	b.n	80028a4 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b40      	cmp	r3, #64	@ 0x40
 80028be:	d117      	bne.n	80028f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80028da:	e067      	b.n	80029ac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	611a      	str	r2, [r3, #16]
}
 80028ee:	e05d      	b.n	80029ac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028f8:	d133      	bne.n	8002962 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b21      	cmp	r3, #33	@ 0x21
 8002904:	d109      	bne.n	800291a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002916:	611a      	str	r2, [r3, #16]
 8002918:	e008      	b.n	800292c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	b2da      	uxtb	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <I2C_Master_SB+0x92>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002942:	2b00      	cmp	r3, #0
 8002944:	d032      	beq.n	80029ac <I2C_Master_SB+0x100>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d02d      	beq.n	80029ac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800295e:	605a      	str	r2, [r3, #4]
}
 8002960:	e024      	b.n	80029ac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10e      	bne.n	8002988 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296e:	b29b      	uxth	r3, r3
 8002970:	11db      	asrs	r3, r3, #7
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f003 0306 	and.w	r3, r3, #6
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f063 030f 	orn	r3, r3, #15
 800297e:	b2da      	uxtb	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	611a      	str	r2, [r3, #16]
}
 8002986:	e011      	b.n	80029ac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800298c:	2b01      	cmp	r3, #1
 800298e:	d10d      	bne.n	80029ac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	b29b      	uxth	r3, r3
 8002996:	11db      	asrs	r3, r3, #7
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 0306 	and.w	r3, r3, #6
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f063 030e 	orn	r3, r3, #14
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	611a      	str	r2, [r3, #16]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <I2C_Master_ADD10+0x26>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00c      	beq.n	8002a00 <I2C_Master_ADD10+0x48>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029fe:	605a      	str	r2, [r3, #4]
  }
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b091      	sub	sp, #68	@ 0x44
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a1a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b22      	cmp	r3, #34	@ 0x22
 8002a34:	f040 8169 	bne.w	8002d0a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10f      	bne.n	8002a60 <I2C_Master_ADDR+0x54>
 8002a40:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a44:	2b40      	cmp	r3, #64	@ 0x40
 8002a46:	d10b      	bne.n	8002a60 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5e:	e160      	b.n	8002d22 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d11d      	bne.n	8002aa4 <I2C_Master_ADDR+0x98>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002a70:	d118      	bne.n	8002aa4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a72:	2300      	movs	r3, #0
 8002a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a96:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002aa2:	e13e      	b.n	8002d22 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d113      	bne.n	8002ad6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e115      	b.n	8002d02 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	f040 808a 	bne.w	8002bf6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ae8:	d137      	bne.n	8002b5a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b08:	d113      	bne.n	8002b32 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b18:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	e0e7      	b.n	8002d02 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	623b      	str	r3, [r7, #32]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	e0d3      	b.n	8002d02 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d02e      	beq.n	8002bbe <I2C_Master_ADDR+0x1b2>
 8002b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d02b      	beq.n	8002bbe <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b68:	2b12      	cmp	r3, #18
 8002b6a:	d102      	bne.n	8002b72 <I2C_Master_ADDR+0x166>
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d125      	bne.n	8002bbe <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d00e      	beq.n	8002b96 <I2C_Master_ADDR+0x18a>
 8002b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d00b      	beq.n	8002b96 <I2C_Master_ADDR+0x18a>
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d008      	beq.n	8002b96 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e007      	b.n	8002ba6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ba4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	e0a1      	b.n	8002d02 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bcc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	e085      	b.n	8002d02 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d14d      	bne.n	8002c9c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d016      	beq.n	8002c34 <I2C_Master_ADDR+0x228>
 8002c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d013      	beq.n	8002c34 <I2C_Master_ADDR+0x228>
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d010      	beq.n	8002c34 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c20:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e007      	b.n	8002c44 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c42:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c52:	d117      	bne.n	8002c84 <I2C_Master_ADDR+0x278>
 8002c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c56:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c5a:	d00b      	beq.n	8002c74 <I2C_Master_ADDR+0x268>
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d008      	beq.n	8002c74 <I2C_Master_ADDR+0x268>
 8002c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d005      	beq.n	8002c74 <I2C_Master_ADDR+0x268>
 8002c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d002      	beq.n	8002c74 <I2C_Master_ADDR+0x268>
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d107      	bne.n	8002c84 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c82:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	e032      	b.n	8002d02 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002caa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cba:	d117      	bne.n	8002cec <I2C_Master_ADDR+0x2e0>
 8002cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cbe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cc2:	d00b      	beq.n	8002cdc <I2C_Master_ADDR+0x2d0>
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d008      	beq.n	8002cdc <I2C_Master_ADDR+0x2d0>
 8002cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d005      	beq.n	8002cdc <I2C_Master_ADDR+0x2d0>
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd2:	2b10      	cmp	r3, #16
 8002cd4:	d002      	beq.n	8002cdc <I2C_Master_ADDR+0x2d0>
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d107      	bne.n	8002cec <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d08:	e00b      	b.n	8002d22 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	e7ff      	b.n	8002d22 <I2C_Master_ADDR+0x316>
 8002d22:	bf00      	nop
 8002d24:	3744      	adds	r7, #68	@ 0x44
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d02b      	beq.n	8002da0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d114      	bne.n	8002da0 <I2C_SlaveTransmit_TXE+0x72>
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b29      	cmp	r3, #41	@ 0x29
 8002d7a:	d111      	bne.n	8002da0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2221      	movs	r2, #33	@ 0x21
 8002d90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2228      	movs	r2, #40	@ 0x28
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fd fc28 	bl	80005f0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d011      	beq.n	8002dde <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d02c      	beq.n	8002e5e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d114      	bne.n	8002e5e <I2C_SlaveReceive_RXNE+0x74>
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e38:	d111      	bne.n	8002e5e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e48:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2222      	movs	r2, #34	@ 0x22
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2228      	movs	r2, #40	@ 0x28
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fd fbbf 	bl	80005dc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d012      	beq.n	8002e9e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ec4:	2b28      	cmp	r3, #40	@ 0x28
 8002ec6:	d125      	bne.n	8002f14 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ed6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d103      	bne.n	8002ef8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	81bb      	strh	r3, [r7, #12]
 8002ef6:	e002      	b.n	8002efe <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f06:	89ba      	ldrh	r2, [r7, #12]
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff f926 	bl	800215e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f12:	e00e      	b.n	8002f32 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f4a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f5a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f88:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f98:	d172      	bne.n	8003080 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	2b22      	cmp	r3, #34	@ 0x22
 8002f9e:	d002      	beq.n	8002fa6 <I2C_Slave_STOPF+0x6a>
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fa4:	d135      	bne.n	8003012 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	f043 0204 	orr.w	r2, r3, #4
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe fb99 	bl	8001716 <HAL_DMA_GetState>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d049      	beq.n	800307e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fee:	4a69      	ldr	r2, [pc, #420]	@ (8003194 <I2C_Slave_STOPF+0x258>)
 8002ff0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe fb6b 	bl	80016d2 <HAL_DMA_Abort_IT>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d03d      	beq.n	800307e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800300c:	4610      	mov	r0, r2
 800300e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003010:	e035      	b.n	800307e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	b29a      	uxth	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f043 0204 	orr.w	r2, r3, #4
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003044:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe fb63 	bl	8001716 <HAL_DMA_GetState>
 8003050:	4603      	mov	r3, r0
 8003052:	2b01      	cmp	r3, #1
 8003054:	d014      	beq.n	8003080 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305a:	4a4e      	ldr	r2, [pc, #312]	@ (8003194 <I2C_Slave_STOPF+0x258>)
 800305c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fb35 	bl	80016d2 <HAL_DMA_Abort_IT>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003078:	4610      	mov	r0, r2
 800307a:	4798      	blx	r3
 800307c:	e000      	b.n	8003080 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800307e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d03e      	beq.n	8003108 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b04      	cmp	r3, #4
 8003096:	d112      	bne.n	80030be <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	2b40      	cmp	r3, #64	@ 0x40
 80030ca:	d112      	bne.n	80030f2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	f043 0204 	orr.w	r2, r3, #4
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f8b7 	bl	8003284 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003116:	e039      	b.n	800318c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b2a      	cmp	r3, #42	@ 0x2a
 800311c:	d109      	bne.n	8003132 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2228      	movs	r2, #40	@ 0x28
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fd fa55 	bl	80005dc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b28      	cmp	r3, #40	@ 0x28
 800313c:	d111      	bne.n	8003162 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a15      	ldr	r2, [pc, #84]	@ (8003198 <I2C_Slave_STOPF+0x25c>)
 8003142:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff f80d 	bl	800217a <HAL_I2C_ListenCpltCallback>
}
 8003160:	e014      	b.n	800318c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	2b22      	cmp	r3, #34	@ 0x22
 8003168:	d002      	beq.n	8003170 <I2C_Slave_STOPF+0x234>
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	2b22      	cmp	r3, #34	@ 0x22
 800316e:	d10d      	bne.n	800318c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fa28 	bl	80005dc <HAL_I2C_SlaveRxCpltCallback>
}
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	080034e9 	.word	0x080034e9
 8003198:	ffff0000 	.word	0xffff0000

0800319c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d002      	beq.n	80031be <I2C_Slave_AF+0x22>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d129      	bne.n	8003212 <I2C_Slave_AF+0x76>
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b28      	cmp	r3, #40	@ 0x28
 80031c2:	d126      	bne.n	8003212 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003280 <I2C_Slave_AF+0xe4>)
 80031c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031d8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031e2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe ffb5 	bl	800217a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003210:	e031      	b.n	8003276 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	2b21      	cmp	r3, #33	@ 0x21
 8003216:	d129      	bne.n	800326c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a19      	ldr	r2, [pc, #100]	@ (8003280 <I2C_Slave_AF+0xe4>)
 800321c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2221      	movs	r2, #33	@ 0x21
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003242:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800324c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800325c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fe fd62 	bl	8001d28 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fd f9c3 	bl	80005f0 <HAL_I2C_SlaveTxCpltCallback>
}
 800326a:	e004      	b.n	8003276 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003274:	615a      	str	r2, [r3, #20]
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	ffff0000 	.word	0xffff0000

08003284 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003292:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800329a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800329c:	7bbb      	ldrb	r3, [r7, #14]
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d002      	beq.n	80032a8 <I2C_ITError+0x24>
 80032a2:	7bbb      	ldrb	r3, [r7, #14]
 80032a4:	2b40      	cmp	r3, #64	@ 0x40
 80032a6:	d10a      	bne.n	80032be <I2C_ITError+0x3a>
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b22      	cmp	r3, #34	@ 0x22
 80032ac:	d107      	bne.n	80032be <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032bc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032c4:	2b28      	cmp	r3, #40	@ 0x28
 80032c6:	d107      	bne.n	80032d8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2228      	movs	r2, #40	@ 0x28
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80032d6:	e015      	b.n	8003304 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032e6:	d00a      	beq.n	80032fe <I2C_ITError+0x7a>
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b60      	cmp	r3, #96	@ 0x60
 80032ec:	d007      	beq.n	80032fe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800330e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003312:	d162      	bne.n	80033da <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003322:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003328:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d020      	beq.n	8003374 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003336:	4a6a      	ldr	r2, [pc, #424]	@ (80034e0 <I2C_ITError+0x25c>)
 8003338:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe f9c7 	bl	80016d2 <HAL_DMA_Abort_IT>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8089 	beq.w	800345e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800336e:	4610      	mov	r0, r2
 8003370:	4798      	blx	r3
 8003372:	e074      	b.n	800345e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003378:	4a59      	ldr	r2, [pc, #356]	@ (80034e0 <I2C_ITError+0x25c>)
 800337a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe f9a6 	bl	80016d2 <HAL_DMA_Abort_IT>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d068      	beq.n	800345e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003396:	2b40      	cmp	r3, #64	@ 0x40
 8003398:	d10b      	bne.n	80033b2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0201 	bic.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033d4:	4610      	mov	r0, r2
 80033d6:	4798      	blx	r3
 80033d8:	e041      	b.n	800345e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b60      	cmp	r3, #96	@ 0x60
 80033e4:	d125      	bne.n	8003432 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fe:	2b40      	cmp	r3, #64	@ 0x40
 8003400:	d10b      	bne.n	800341a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe fecd 	bl	80021ca <HAL_I2C_AbortCpltCallback>
 8003430:	e015      	b.n	800345e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343c:	2b40      	cmp	r3, #64	@ 0x40
 800343e:	d10b      	bne.n	8003458 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fe feac 	bl	80021b6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10e      	bne.n	800348c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800347e:	2b00      	cmp	r3, #0
 8003480:	d104      	bne.n	800348c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800349a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d113      	bne.n	80034d8 <I2C_ITError+0x254>
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	2b28      	cmp	r3, #40	@ 0x28
 80034b4:	d110      	bne.n	80034d8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a0a      	ldr	r2, [pc, #40]	@ (80034e4 <I2C_ITError+0x260>)
 80034ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fe fe51 	bl	800217a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	080034e9 	.word	0x080034e9
 80034e4:	ffff0000 	.word	0xffff0000

080034e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003500:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003502:	4b4b      	ldr	r3, [pc, #300]	@ (8003630 <I2C_DMAAbort+0x148>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	08db      	lsrs	r3, r3, #3
 8003508:	4a4a      	ldr	r2, [pc, #296]	@ (8003634 <I2C_DMAAbort+0x14c>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0a1a      	lsrs	r2, r3, #8
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	00da      	lsls	r2, r3, #3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	f043 0220 	orr.w	r2, r3, #32
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800352e:	e00a      	b.n	8003546 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3b01      	subs	r3, #1
 8003534:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003544:	d0ea      	beq.n	800351c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003552:	2200      	movs	r2, #0
 8003554:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	2200      	movs	r2, #0
 8003564:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003574:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003588:	2200      	movs	r2, #0
 800358a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	2200      	movs	r2, #0
 800359a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b60      	cmp	r3, #96	@ 0x60
 80035b6:	d10e      	bne.n	80035d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2200      	movs	r2, #0
 80035cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035ce:	6978      	ldr	r0, [r7, #20]
 80035d0:	f7fe fdfb 	bl	80021ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035d4:	e027      	b.n	8003626 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035dc:	2b28      	cmp	r3, #40	@ 0x28
 80035de:	d117      	bne.n	8003610 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2228      	movs	r2, #40	@ 0x28
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800360e:	e007      	b.n	8003620 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003620:	6978      	ldr	r0, [r7, #20]
 8003622:	f7fe fdc8 	bl	80021b6 <HAL_I2C_ErrorCallback>
}
 8003626:	bf00      	nop
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000004 	.word	0x20000004
 8003634:	14f8b589 	.word	0x14f8b589

08003638 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003644:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	08db      	lsrs	r3, r3, #3
 800364a:	4a13      	ldr	r2, [pc, #76]	@ (8003698 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	0a1a      	lsrs	r2, r3, #8
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3b01      	subs	r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d107      	bne.n	8003676 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	f043 0220 	orr.w	r2, r3, #32
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e008      	b.n	8003688 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003684:	d0e9      	beq.n	800365a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	20000004 	.word	0x20000004
 8003698:	14f8b589 	.word	0x14f8b589

0800369c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80036ac:	d103      	bne.n	80036b6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80036b4:	e007      	b.n	80036c6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80036be:	d102      	bne.n	80036c6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2208      	movs	r2, #8
 80036c4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e267      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d075      	beq.n	80037de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036f2:	4b88      	ldr	r3, [pc, #544]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d00c      	beq.n	8003718 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fe:	4b85      	ldr	r3, [pc, #532]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003706:	2b08      	cmp	r3, #8
 8003708:	d112      	bne.n	8003730 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370a:	4b82      	ldr	r3, [pc, #520]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003716:	d10b      	bne.n	8003730 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003718:	4b7e      	ldr	r3, [pc, #504]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d05b      	beq.n	80037dc <HAL_RCC_OscConfig+0x108>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d157      	bne.n	80037dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e242      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003738:	d106      	bne.n	8003748 <HAL_RCC_OscConfig+0x74>
 800373a:	4b76      	ldr	r3, [pc, #472]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a75      	ldr	r2, [pc, #468]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e01d      	b.n	8003784 <HAL_RCC_OscConfig+0xb0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x98>
 8003752:	4b70      	ldr	r3, [pc, #448]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a6f      	ldr	r2, [pc, #444]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b6d      	ldr	r3, [pc, #436]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a6c      	ldr	r2, [pc, #432]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e00b      	b.n	8003784 <HAL_RCC_OscConfig+0xb0>
 800376c:	4b69      	ldr	r3, [pc, #420]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a68      	ldr	r2, [pc, #416]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	4b66      	ldr	r3, [pc, #408]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a65      	ldr	r2, [pc, #404]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 800377e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d013      	beq.n	80037b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fd fd18 	bl	80011c0 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003794:	f7fd fd14 	bl	80011c0 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	@ 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e207      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0xc0>
 80037b2:	e014      	b.n	80037de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fd fd04 	bl	80011c0 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fd fd00 	bl	80011c0 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	@ 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e1f3      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ce:	4b51      	ldr	r3, [pc, #324]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0xe8>
 80037da:	e000      	b.n	80037de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d063      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f6:	4b47      	ldr	r3, [pc, #284]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d11c      	bne.n	800383c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003802:	4b44      	ldr	r3, [pc, #272]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d116      	bne.n	800383c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	4b41      	ldr	r3, [pc, #260]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_RCC_OscConfig+0x152>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e1c7      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003826:	4b3b      	ldr	r3, [pc, #236]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4937      	ldr	r1, [pc, #220]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383a:	e03a      	b.n	80038b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003844:	4b34      	ldr	r3, [pc, #208]	@ (8003918 <HAL_RCC_OscConfig+0x244>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fd fcb9 	bl	80011c0 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003852:	f7fd fcb5 	bl	80011c0 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e1a8      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	4b2b      	ldr	r3, [pc, #172]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003870:	4b28      	ldr	r3, [pc, #160]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4925      	ldr	r1, [pc, #148]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 8003880:	4313      	orrs	r3, r2
 8003882:	600b      	str	r3, [r1, #0]
 8003884:	e015      	b.n	80038b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003886:	4b24      	ldr	r3, [pc, #144]	@ (8003918 <HAL_RCC_OscConfig+0x244>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fd fc98 	bl	80011c0 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003894:	f7fd fc94 	bl	80011c0 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e187      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d036      	beq.n	800392c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c6:	4b15      	ldr	r3, [pc, #84]	@ (800391c <HAL_RCC_OscConfig+0x248>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fd fc78 	bl	80011c0 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d4:	f7fd fc74 	bl	80011c0 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e167      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <HAL_RCC_OscConfig+0x240>)
 80038e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x200>
 80038f2:	e01b      	b.n	800392c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f4:	4b09      	ldr	r3, [pc, #36]	@ (800391c <HAL_RCC_OscConfig+0x248>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fa:	f7fd fc61 	bl	80011c0 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003900:	e00e      	b.n	8003920 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003902:	f7fd fc5d 	bl	80011c0 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d907      	bls.n	8003920 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e150      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
 8003914:	40023800 	.word	0x40023800
 8003918:	42470000 	.word	0x42470000
 800391c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	4b88      	ldr	r3, [pc, #544]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ea      	bne.n	8003902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8097 	beq.w	8003a68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393e:	4b81      	ldr	r3, [pc, #516]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10f      	bne.n	800396a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	4b7d      	ldr	r3, [pc, #500]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	4a7c      	ldr	r2, [pc, #496]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003958:	6413      	str	r3, [r2, #64]	@ 0x40
 800395a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396a:	4b77      	ldr	r3, [pc, #476]	@ (8003b48 <HAL_RCC_OscConfig+0x474>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d118      	bne.n	80039a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003976:	4b74      	ldr	r3, [pc, #464]	@ (8003b48 <HAL_RCC_OscConfig+0x474>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a73      	ldr	r2, [pc, #460]	@ (8003b48 <HAL_RCC_OscConfig+0x474>)
 800397c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003982:	f7fd fc1d 	bl	80011c0 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398a:	f7fd fc19 	bl	80011c0 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e10c      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b48 <HAL_RCC_OscConfig+0x474>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d106      	bne.n	80039be <HAL_RCC_OscConfig+0x2ea>
 80039b0:	4b64      	ldr	r3, [pc, #400]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b4:	4a63      	ldr	r2, [pc, #396]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80039bc:	e01c      	b.n	80039f8 <HAL_RCC_OscConfig+0x324>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x30c>
 80039c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80039d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_OscConfig+0x324>
 80039e0:	4b58      	ldr	r3, [pc, #352]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e4:	4a57      	ldr	r2, [pc, #348]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ec:	4b55      	ldr	r3, [pc, #340]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f0:	4a54      	ldr	r2, [pc, #336]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 80039f2:	f023 0304 	bic.w	r3, r3, #4
 80039f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d015      	beq.n	8003a2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fd fbde 	bl	80011c0 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a08:	f7fd fbda 	bl	80011c0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e0cb      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1e:	4b49      	ldr	r3, [pc, #292]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0ee      	beq.n	8003a08 <HAL_RCC_OscConfig+0x334>
 8003a2a:	e014      	b.n	8003a56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2c:	f7fd fbc8 	bl	80011c0 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a34:	f7fd fbc4 	bl	80011c0 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e0b5      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1ee      	bne.n	8003a34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5c:	4b39      	ldr	r3, [pc, #228]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a60:	4a38      	ldr	r2, [pc, #224]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80a1 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a72:	4b34      	ldr	r3, [pc, #208]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d05c      	beq.n	8003b38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d141      	bne.n	8003b0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a86:	4b31      	ldr	r3, [pc, #196]	@ (8003b4c <HAL_RCC_OscConfig+0x478>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fd fb98 	bl	80011c0 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a94:	f7fd fb94 	bl	80011c0 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e087      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	4b27      	ldr	r3, [pc, #156]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	019b      	lsls	r3, r3, #6
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	085b      	lsrs	r3, r3, #1
 8003aca:	3b01      	subs	r3, #1
 8003acc:	041b      	lsls	r3, r3, #16
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad4:	061b      	lsls	r3, r3, #24
 8003ad6:	491b      	ldr	r1, [pc, #108]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003adc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b4c <HAL_RCC_OscConfig+0x478>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae2:	f7fd fb6d 	bl	80011c0 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aea:	f7fd fb69 	bl	80011c0 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e05c      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x416>
 8003b08:	e054      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0a:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <HAL_RCC_OscConfig+0x478>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fd fb56 	bl	80011c0 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fd fb52 	bl	80011c0 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e045      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x444>
 8003b36:	e03d      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e038      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40007000 	.word	0x40007000
 8003b4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b50:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc0 <HAL_RCC_OscConfig+0x4ec>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d028      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d121      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d11a      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b80:	4013      	ands	r3, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d111      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d107      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800

08003bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0cc      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b68      	ldr	r3, [pc, #416]	@ (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d90c      	bls.n	8003c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b65      	ldr	r3, [pc, #404]	@ (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b63      	ldr	r3, [pc, #396]	@ (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b8      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c18:	4b59      	ldr	r3, [pc, #356]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c30:	4b53      	ldr	r3, [pc, #332]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a52      	ldr	r2, [pc, #328]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b50      	ldr	r3, [pc, #320]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	494d      	ldr	r1, [pc, #308]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d044      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b47      	ldr	r3, [pc, #284]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d119      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e07f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d107      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c82:	4b3f      	ldr	r3, [pc, #252]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c92:	4b3b      	ldr	r3, [pc, #236]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e067      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca2:	4b37      	ldr	r3, [pc, #220]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f023 0203 	bic.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4934      	ldr	r1, [pc, #208]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb4:	f7fd fa84 	bl	80011c0 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cbc:	f7fd fa80 	bl	80011c0 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e04f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 020c 	and.w	r2, r3, #12
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d1eb      	bne.n	8003cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b25      	ldr	r3, [pc, #148]	@ (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d20c      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b22      	ldr	r3, [pc, #136]	@ (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b20      	ldr	r3, [pc, #128]	@ (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e032      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d18:	4b19      	ldr	r3, [pc, #100]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4916      	ldr	r1, [pc, #88]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d36:	4b12      	ldr	r3, [pc, #72]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	490e      	ldr	r1, [pc, #56]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d4a:	f000 f821 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	@ (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	490a      	ldr	r1, [pc, #40]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5c:	5ccb      	ldrb	r3, [r1, r3]
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	4a09      	ldr	r2, [pc, #36]	@ (8003d88 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d66:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd f9e4 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023c00 	.word	0x40023c00
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08007fb4 	.word	0x08007fb4
 8003d88:	20000004 	.word	0x20000004
 8003d8c:	20000008 	.word	0x20000008

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d94:	b094      	sub	sp, #80	@ 0x50
 8003d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003da8:	4b79      	ldr	r3, [pc, #484]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d00d      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	f200 80e1 	bhi.w	8003f7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d003      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0x3a>
 8003dc2:	e0db      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc4:	4b73      	ldr	r3, [pc, #460]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dc8:	e0db      	b.n	8003f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dca:	4b73      	ldr	r3, [pc, #460]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x208>)
 8003dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dce:	e0d8      	b.n	8003f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dd8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dda:	4b6d      	ldr	r3, [pc, #436]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d063      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	099b      	lsrs	r3, r3, #6
 8003dec:	2200      	movs	r2, #0
 8003dee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003df0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e02:	4622      	mov	r2, r4
 8003e04:	462b      	mov	r3, r5
 8003e06:	f04f 0000 	mov.w	r0, #0
 8003e0a:	f04f 0100 	mov.w	r1, #0
 8003e0e:	0159      	lsls	r1, r3, #5
 8003e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e14:	0150      	lsls	r0, r2, #5
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	1a51      	subs	r1, r2, r1
 8003e1e:	6139      	str	r1, [r7, #16]
 8003e20:	4629      	mov	r1, r5
 8003e22:	eb63 0301 	sbc.w	r3, r3, r1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e34:	4659      	mov	r1, fp
 8003e36:	018b      	lsls	r3, r1, #6
 8003e38:	4651      	mov	r1, sl
 8003e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e3e:	4651      	mov	r1, sl
 8003e40:	018a      	lsls	r2, r1, #6
 8003e42:	4651      	mov	r1, sl
 8003e44:	ebb2 0801 	subs.w	r8, r2, r1
 8003e48:	4659      	mov	r1, fp
 8003e4a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e62:	4690      	mov	r8, r2
 8003e64:	4699      	mov	r9, r3
 8003e66:	4623      	mov	r3, r4
 8003e68:	eb18 0303 	adds.w	r3, r8, r3
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	462b      	mov	r3, r5
 8003e70:	eb49 0303 	adc.w	r3, r9, r3
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e82:	4629      	mov	r1, r5
 8003e84:	024b      	lsls	r3, r1, #9
 8003e86:	4621      	mov	r1, r4
 8003e88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	024a      	lsls	r2, r1, #9
 8003e90:	4610      	mov	r0, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e96:	2200      	movs	r2, #0
 8003e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ea0:	f7fc f992 	bl	80001c8 <__aeabi_uldivmod>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eac:	e058      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eae:	4b38      	ldr	r3, [pc, #224]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	099b      	lsrs	r3, r3, #6
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	4611      	mov	r1, r2
 8003eba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ebe:	623b      	str	r3, [r7, #32]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ec8:	4642      	mov	r2, r8
 8003eca:	464b      	mov	r3, r9
 8003ecc:	f04f 0000 	mov.w	r0, #0
 8003ed0:	f04f 0100 	mov.w	r1, #0
 8003ed4:	0159      	lsls	r1, r3, #5
 8003ed6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eda:	0150      	lsls	r0, r2, #5
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ef8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003efc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f00:	ebb2 040a 	subs.w	r4, r2, sl
 8003f04:	eb63 050b 	sbc.w	r5, r3, fp
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	00eb      	lsls	r3, r5, #3
 8003f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f16:	00e2      	lsls	r2, r4, #3
 8003f18:	4614      	mov	r4, r2
 8003f1a:	461d      	mov	r5, r3
 8003f1c:	4643      	mov	r3, r8
 8003f1e:	18e3      	adds	r3, r4, r3
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	464b      	mov	r3, r9
 8003f24:	eb45 0303 	adc.w	r3, r5, r3
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f36:	4629      	mov	r1, r5
 8003f38:	028b      	lsls	r3, r1, #10
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f40:	4621      	mov	r1, r4
 8003f42:	028a      	lsls	r2, r1, #10
 8003f44:	4610      	mov	r0, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	61fa      	str	r2, [r7, #28]
 8003f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f54:	f7fc f938 	bl	80001c8 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f60:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f7a:	e002      	b.n	8003f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3750      	adds	r7, #80	@ 0x50
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800
 8003f94:	00f42400 	.word	0x00f42400
 8003f98:	007a1200 	.word	0x007a1200

08003f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa0:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000004 	.word	0x20000004

08003fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fb8:	f7ff fff0 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b05      	ldr	r3, [pc, #20]	@ (8003fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	0a9b      	lsrs	r3, r3, #10
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4903      	ldr	r1, [pc, #12]	@ (8003fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	08007fc4 	.word	0x08007fc4

08003fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fe0:	f7ff ffdc 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	0b5b      	lsrs	r3, r3, #13
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	4903      	ldr	r1, [pc, #12]	@ (8004000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff2:	5ccb      	ldrb	r3, [r1, r3]
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40023800 	.word	0x40023800
 8004000:	08007fc4 	.word	0x08007fc4

08004004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e07b      	b.n	800410e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d108      	bne.n	8004030 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004026:	d009      	beq.n	800403c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
 800402e:	e005      	b.n	800403c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc ff18 	bl	8000e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004072:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c0:	ea42 0103 	orr.w	r1, r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	f003 0104 	and.w	r1, r3, #4
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	f003 0210 	and.w	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <HAL_SPI_Transmit_IT+0x1a>
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e06a      	b.n	800420c <HAL_SPI_Transmit_IT+0xf4>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d001      	beq.n	8004146 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 8004142:	2302      	movs	r3, #2
 8004144:	e062      	b.n	800420c <HAL_SPI_Transmit_IT+0xf4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_SPI_Transmit_IT+0x3c>
 8004150:	2302      	movs	r3, #2
 8004152:	e05b      	b.n	800420c <HAL_SPI_Transmit_IT+0xf4>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2203      	movs	r2, #3
 8004160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	88fa      	ldrh	r2, [r7, #6]
 8004174:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_SPI_Transmit_IT+0x8c>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a1e      	ldr	r2, [pc, #120]	@ (8004218 <HAL_SPI_Transmit_IT+0x100>)
 80041a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80041a2:	e002      	b.n	80041aa <HAL_SPI_Transmit_IT+0x92>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a1d      	ldr	r2, [pc, #116]	@ (800421c <HAL_SPI_Transmit_IT+0x104>)
 80041a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041b2:	d10f      	bne.n	80041d4 <HAL_SPI_Transmit_IT+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041de:	2b40      	cmp	r3, #64	@ 0x40
 80041e0:	d007      	beq.n	80041f2 <HAL_SPI_Transmit_IT+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041f0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8004208:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	080048e9 	.word	0x080048e9
 800421c:	080048a3 	.word	0x080048a3

08004220 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d001      	beq.n	800423e <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800423a:	2302      	movs	r3, #2
 800423c:	e07f      	b.n	800433e <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d110      	bne.n	8004268 <HAL_SPI_Receive_IT+0x48>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800424e:	d10b      	bne.n	8004268 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2204      	movs	r2, #4
 8004254:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f876 	bl	8004350 <HAL_SPI_TransmitReceive_IT>
 8004264:	4603      	mov	r3, r0
 8004266:	e06a      	b.n	800433e <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_SPI_Receive_IT+0x54>
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e062      	b.n	800433e <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_SPI_Receive_IT+0x66>
 8004282:	2302      	movs	r3, #2
 8004284:	e05b      	b.n	800433e <HAL_SPI_Receive_IT+0x11e>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2204      	movs	r2, #4
 8004292:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	88fa      	ldrh	r2, [r7, #6]
 80042a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004348 <HAL_SPI_Receive_IT+0x128>)
 80042d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80042d4:	e002      	b.n	80042dc <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	@ (800434c <HAL_SPI_Receive_IT+0x12c>)
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042e4:	d10f      	bne.n	8004306 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004304:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004310:	2b40      	cmp	r3, #64	@ 0x40
 8004312:	d007      	beq.n	8004324 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004322:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800433a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	0800485d 	.word	0x0800485d
 800434c:	08004813 	.word	0x08004813

08004350 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004364:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d00c      	beq.n	800438c <HAL_SPI_TransmitReceive_IT+0x3c>
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004378:	d106      	bne.n	8004388 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <HAL_SPI_TransmitReceive_IT+0x38>
 8004382:	7dfb      	ldrb	r3, [r7, #23]
 8004384:	2b04      	cmp	r3, #4
 8004386:	d001      	beq.n	800438c <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 8004388:	2302      	movs	r3, #2
 800438a:	e061      	b.n	8004450 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_SPI_TransmitReceive_IT+0x4e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_SPI_TransmitReceive_IT+0x4e>
 8004398:	887b      	ldrh	r3, [r7, #2]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e056      	b.n	8004450 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_SPI_TransmitReceive_IT+0x60>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e04f      	b.n	8004450 <HAL_SPI_TransmitReceive_IT+0x100>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d003      	beq.n	80043cc <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2205      	movs	r2, #5
 80043c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	887a      	ldrh	r2, [r7, #2]
 80043dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	887a      	ldrh	r2, [r7, #2]
 80043e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	887a      	ldrh	r2, [r7, #2]
 80043ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	887a      	ldrh	r2, [r7, #2]
 80043f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d006      	beq.n	800440c <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a16      	ldr	r2, [pc, #88]	@ (800445c <HAL_SPI_TransmitReceive_IT+0x10c>)
 8004402:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a16      	ldr	r2, [pc, #88]	@ (8004460 <HAL_SPI_TransmitReceive_IT+0x110>)
 8004408:	645a      	str	r2, [r3, #68]	@ 0x44
 800440a:	e005      	b.n	8004418 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a15      	ldr	r2, [pc, #84]	@ (8004464 <HAL_SPI_TransmitReceive_IT+0x114>)
 8004410:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a14      	ldr	r2, [pc, #80]	@ (8004468 <HAL_SPI_TransmitReceive_IT+0x118>)
 8004416:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004422:	2b40      	cmp	r3, #64	@ 0x40
 8004424:	d007      	beq.n	8004436 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004434:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 800444c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	371c      	adds	r7, #28
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	08004755 	.word	0x08004755
 8004460:	080047b5 	.word	0x080047b5
 8004464:	08004691 	.word	0x08004691
 8004468:	080046f5 	.word	0x080046f5

0800446c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10e      	bne.n	80044ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004494:	2b00      	cmp	r3, #0
 8004496:	d009      	beq.n	80044ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d004      	beq.n	80044ac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
    return;
 80044aa:	e0ce      	b.n	800464a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_SPI_IRQHandler+0x5e>
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d004      	beq.n	80044ca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
    return;
 80044c8:	e0bf      	b.n	800464a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <HAL_SPI_IRQHandler+0x7e>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d105      	bne.n	80044ea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80b0 	beq.w	800464a <HAL_SPI_IRQHandler+0x1de>
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80aa 	beq.w	800464a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d023      	beq.n	8004548 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b03      	cmp	r3, #3
 800450a:	d011      	beq.n	8004530 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	f043 0204 	orr.w	r2, r3, #4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	e00b      	b.n	8004548 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	693b      	ldr	r3, [r7, #16]
        return;
 8004546:	e080      	b.n	800464a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d014      	beq.n	800457c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	f043 0201 	orr.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00c      	beq.n	80045a0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458a:	f043 0208 	orr.w	r2, r3, #8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d04f      	beq.n	8004648 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045b6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d104      	bne.n	80045d4 <HAL_SPI_IRQHandler+0x168>
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d034      	beq.n	800463e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0203 	bic.w	r2, r2, #3
 80045e2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d011      	beq.n	8004610 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f0:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <HAL_SPI_IRQHandler+0x1e4>)
 80045f2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fd f86a 	bl	80016d2 <HAL_DMA_Abort_IT>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004608:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004614:	2b00      	cmp	r3, #0
 8004616:	d016      	beq.n	8004646 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800461c:	4a0c      	ldr	r2, [pc, #48]	@ (8004650 <HAL_SPI_IRQHandler+0x1e4>)
 800461e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004624:	4618      	mov	r0, r3
 8004626:	f7fd f854 	bl	80016d2 <HAL_DMA_Abort_IT>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004634:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800463c:	e003      	b.n	8004646 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fb ffc2 	bl	80005c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004644:	e000      	b.n	8004648 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004646:	bf00      	nop
    return;
 8004648:	bf00      	nop
  }
}
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	08004669 	.word	0x08004669

08004654 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7fb ffa0 	bl	80005c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f103 020c 	add.w	r2, r3, #12
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10f      	bne.n	80046ec <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046da:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa62 	bl	8004bb0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	330c      	adds	r3, #12
 8004706:	7812      	ldrb	r2, [r2, #0]
 8004708:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10f      	bne.n	800474c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800473a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa32 	bl	8004bb0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004766:	b292      	uxth	r2, r2
 8004768:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476e:	1c9a      	adds	r2, r3, #2
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10f      	bne.n	80047ac <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800479a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fa02 	bl	8004bb0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80047ac:	bf00      	nop
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	881a      	ldrh	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047cc:	1c9a      	adds	r2, r3, #2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10f      	bne.n	800480a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047f8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d102      	bne.n	800480a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f9d3 	bl	8004bb0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f103 020c 	add.w	r2, r3, #12
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d102      	bne.n	8004854 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fa22 	bl	8004c98 <SPI_CloseRx_ISR>
  }
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	b292      	uxth	r2, r2
 8004870:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004876:	1c9a      	adds	r2, r3, #2
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f9ff 	bl	8004c98 <SPI_CloseRx_ISR>
  }
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b082      	sub	sp, #8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	7812      	ldrb	r2, [r2, #0]
 80048b6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa1c 	bl	8004d18 <SPI_CloseTx_ISR>
  }
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	881a      	ldrh	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004900:	1c9a      	adds	r2, r3, #2
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d102      	bne.n	8004924 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f9fa 	bl	8004d18 <SPI_CloseTx_ISR>
  }
}
 8004924:	bf00      	nop
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800493c:	f7fc fc40 	bl	80011c0 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	4413      	add	r3, r2
 800494a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800494c:	f7fc fc38 	bl	80011c0 <HAL_GetTick>
 8004950:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004952:	4b39      	ldr	r3, [pc, #228]	@ (8004a38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	015b      	lsls	r3, r3, #5
 8004958:	0d1b      	lsrs	r3, r3, #20
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	fb02 f303 	mul.w	r3, r2, r3
 8004960:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004962:	e054      	b.n	8004a0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496a:	d050      	beq.n	8004a0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800496c:	f7fc fc28 	bl	80011c0 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	429a      	cmp	r2, r3
 800497a:	d902      	bls.n	8004982 <SPI_WaitFlagStateUntilTimeout+0x56>
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d13d      	bne.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004990:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800499a:	d111      	bne.n	80049c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049a4:	d004      	beq.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ae:	d107      	bne.n	80049c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049c8:	d10f      	bne.n	80049ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e017      	b.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4013      	ands	r3, r2
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d19b      	bne.n	8004964 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000004 	.word	0x20000004

08004a3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a50:	d111      	bne.n	8004a76 <SPI_EndRxTransaction+0x3a>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a5a:	d004      	beq.n	8004a66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a64:	d107      	bne.n	8004a76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a74:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a7e:	d12a      	bne.n	8004ad6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a88:	d012      	beq.n	8004ab0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2200      	movs	r2, #0
 8004a92:	2180      	movs	r1, #128	@ 0x80
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f7ff ff49 	bl	800492c <SPI_WaitFlagStateUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d02d      	beq.n	8004afc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa4:	f043 0220 	orr.w	r2, r3, #32
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e026      	b.n	8004afe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2101      	movs	r1, #1
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7ff ff36 	bl	800492c <SPI_WaitFlagStateUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01a      	beq.n	8004afc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e013      	b.n	8004afe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2200      	movs	r2, #0
 8004ade:	2101      	movs	r1, #1
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff ff23 	bl	800492c <SPI_WaitFlagStateUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e000      	b.n	8004afe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f7ff ff04 	bl	800492c <SPI_WaitFlagStateUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e032      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba8 <SPI_EndRxTxTransaction+0xa0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bac <SPI_EndRxTxTransaction+0xa4>)
 8004b40:	fba2 2303 	umull	r2, r3, r2, r3
 8004b44:	0d5b      	lsrs	r3, r3, #21
 8004b46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b58:	d112      	bne.n	8004b80 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2200      	movs	r2, #0
 8004b62:	2180      	movs	r1, #128	@ 0x80
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7ff fee1 	bl	800492c <SPI_WaitFlagStateUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d016      	beq.n	8004b9e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b74:	f043 0220 	orr.w	r2, r3, #32
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e00f      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b96:	2b80      	cmp	r3, #128	@ 0x80
 8004b98:	d0f2      	beq.n	8004b80 <SPI_EndRxTxTransaction+0x78>
 8004b9a:	e000      	b.n	8004b9e <SPI_EndRxTxTransaction+0x96>
        break;
 8004b9c:	bf00      	nop
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000004 	.word	0x20000004
 8004bac:	165e9f81 	.word	0x165e9f81

08004bb0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004bb8:	4b35      	ldr	r3, [pc, #212]	@ (8004c90 <SPI_CloseRxTx_ISR+0xe0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a35      	ldr	r2, [pc, #212]	@ (8004c94 <SPI_CloseRxTx_ISR+0xe4>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	0a5b      	lsrs	r3, r3, #9
 8004bc4:	2264      	movs	r2, #100	@ 0x64
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bcc:	f7fc faf8 	bl	80011c0 <HAL_GetTick>
 8004bd0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0220 	bic.w	r2, r2, #32
 8004be0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bec:	f043 0220 	orr.w	r2, r3, #32
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004bf4:	e009      	b.n	8004c0a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0eb      	beq.n	8004be2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	2164      	movs	r1, #100	@ 0x64
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff ff7a 	bl	8004b08 <SPI_EndRxTxTransaction>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d115      	bne.n	8004c78 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d107      	bne.n	8004c68 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7fb fc79 	bl	8000558 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004c66:	e00e      	b.n	8004c86 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff fcef 	bl	8004654 <HAL_SPI_TxRxCpltCallback>
}
 8004c76:	e006      	b.n	8004c86 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7fb fca1 	bl	80005c8 <HAL_SPI_ErrorCallback>
}
 8004c86:	bf00      	nop
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000004 	.word	0x20000004
 8004c94:	057619f1 	.word	0x057619f1

08004c98 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cae:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004cb0:	f7fc fa86 	bl	80011c0 <HAL_GetTick>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2164      	movs	r1, #100	@ 0x64
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff febe 	bl	8004a3c <SPI_EndRxTransaction>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d103      	bne.n	8004d08 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7fb fc29 	bl	8000558 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004d06:	e002      	b.n	8004d0e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fb fc5d 	bl	80005c8 <HAL_SPI_ErrorCallback>
}
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004d20:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd4 <SPI_CloseTx_ISR+0xbc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd8 <SPI_CloseTx_ISR+0xc0>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0a5b      	lsrs	r3, r3, #9
 8004d2c:	2264      	movs	r2, #100	@ 0x64
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d34:	f7fc fa44 	bl	80011c0 <HAL_GetTick>
 8004d38:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d44:	f043 0220 	orr.w	r2, r3, #32
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d4c:	e009      	b.n	8004d62 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0eb      	beq.n	8004d3a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d70:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	2164      	movs	r1, #100	@ 0x64
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff fec6 	bl	8004b08 <SPI_EndRxTxTransaction>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fb fc03 	bl	80005c8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004dc2:	e002      	b.n	8004dca <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7fb fbaf 	bl	8000528 <HAL_SPI_TxCpltCallback>
}
 8004dca:	bf00      	nop
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000004 	.word	0x20000004
 8004dd8:	057619f1 	.word	0x057619f1

08004ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e042      	b.n	8004e74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc f892 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2224      	movs	r2, #36	@ 0x24
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fdbd 	bl	80059a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	@ 0x28
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d175      	bne.n	8004f88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <HAL_UART_Transmit+0x2c>
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e06e      	b.n	8004f8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2221      	movs	r2, #33	@ 0x21
 8004eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eba:	f7fc f981 	bl	80011c0 <HAL_GetTick>
 8004ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	88fa      	ldrh	r2, [r7, #6]
 8004eca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed4:	d108      	bne.n	8004ee8 <HAL_UART_Transmit+0x6c>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e003      	b.n	8004ef0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ef0:	e02e      	b.n	8004f50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2180      	movs	r1, #128	@ 0x80
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fb1f 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e03a      	b.n	8004f8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	e007      	b.n	8004f42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	781a      	ldrb	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1cb      	bne.n	8004ef2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2200      	movs	r2, #0
 8004f62:	2140      	movs	r1, #64	@ 0x40
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 faeb 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e006      	b.n	8004f8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	e000      	b.n	8004f8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
  }
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d112      	bne.n	8004fd2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <HAL_UART_Receive_IT+0x26>
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e00b      	b.n	8004fd4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fb12 	bl	80055f2 <UART_Start_Receive_IT>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	e000      	b.n	8004fd4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
  }
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b0ba      	sub	sp, #232	@ 0xe8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005002:	2300      	movs	r3, #0
 8005004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005008:	2300      	movs	r3, #0
 800500a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800501a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10f      	bne.n	8005042 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <HAL_UART_IRQHandler+0x66>
 800502e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fbf2 	bl	8005824 <UART_Receive_IT>
      return;
 8005040:	e25b      	b.n	80054fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80de 	beq.w	8005208 <HAL_UART_IRQHandler+0x22c>
 800504c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800505c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 80d1 	beq.w	8005208 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00b      	beq.n	800508a <HAL_UART_IRQHandler+0xae>
 8005072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005082:	f043 0201 	orr.w	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <HAL_UART_IRQHandler+0xd2>
 8005096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d005      	beq.n	80050ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	f043 0202 	orr.w	r2, r3, #2
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HAL_UART_IRQHandler+0xf6>
 80050ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	f043 0204 	orr.w	r2, r3, #4
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d011      	beq.n	8005102 <HAL_UART_IRQHandler+0x126>
 80050de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f043 0208 	orr.w	r2, r3, #8
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 81f2 	beq.w	80054f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800510c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_UART_IRQHandler+0x14e>
 8005118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fb7d 	bl	8005824 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005134:	2b40      	cmp	r3, #64	@ 0x40
 8005136:	bf0c      	ite	eq
 8005138:	2301      	moveq	r3, #1
 800513a:	2300      	movne	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d103      	bne.n	8005156 <HAL_UART_IRQHandler+0x17a>
 800514e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005152:	2b00      	cmp	r3, #0
 8005154:	d04f      	beq.n	80051f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fa85 	bl	8005666 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005166:	2b40      	cmp	r3, #64	@ 0x40
 8005168:	d141      	bne.n	80051ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3314      	adds	r3, #20
 8005170:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005180:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005188:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3314      	adds	r3, #20
 8005192:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005196:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800519a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1d9      	bne.n	800516a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d013      	beq.n	80051e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c2:	4a7e      	ldr	r2, [pc, #504]	@ (80053bc <HAL_UART_IRQHandler+0x3e0>)
 80051c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fc fa81 	bl	80016d2 <HAL_DMA_Abort_IT>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d016      	beq.n	8005204 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051e0:	4610      	mov	r0, r2
 80051e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	e00e      	b.n	8005204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f994 	bl	8005514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ec:	e00a      	b.n	8005204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f990 	bl	8005514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f4:	e006      	b.n	8005204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f98c 	bl	8005514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005202:	e175      	b.n	80054f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005204:	bf00      	nop
    return;
 8005206:	e173      	b.n	80054f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520c:	2b01      	cmp	r3, #1
 800520e:	f040 814f 	bne.w	80054b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8148 	beq.w	80054b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8141 	beq.w	80054b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800522e:	2300      	movs	r3, #0
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524e:	2b40      	cmp	r3, #64	@ 0x40
 8005250:	f040 80b6 	bne.w	80053c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005260:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 8145 	beq.w	80054f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800526e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005272:	429a      	cmp	r2, r3
 8005274:	f080 813e 	bcs.w	80054f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800527e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800528a:	f000 8088 	beq.w	800539e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80052ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1d9      	bne.n	800528e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3314      	adds	r3, #20
 80052e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3314      	adds	r3, #20
 80052fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005302:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005306:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e1      	bne.n	80052da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3314      	adds	r3, #20
 800531c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800532c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3314      	adds	r3, #20
 8005336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800533a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800533c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005340:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e3      	bne.n	8005316 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	330c      	adds	r3, #12
 8005362:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800536c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800536e:	f023 0310 	bic.w	r3, r3, #16
 8005372:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	330c      	adds	r3, #12
 800537c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005380:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005382:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005386:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800538e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e3      	bne.n	800535c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005398:	4618      	mov	r0, r3
 800539a:	f7fc f92a 	bl	80015f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f8b7 	bl	8005528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053ba:	e09b      	b.n	80054f4 <HAL_UART_IRQHandler+0x518>
 80053bc:	0800572d 	.word	0x0800572d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 808e 	beq.w	80054f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80053dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 8089 	beq.w	80054f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	330c      	adds	r3, #12
 80053ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800540a:	647a      	str	r2, [r7, #68]	@ 0x44
 800540c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e3      	bne.n	80053e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	623b      	str	r3, [r7, #32]
   return(result);
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3314      	adds	r3, #20
 800543e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005442:	633a      	str	r2, [r7, #48]	@ 0x30
 8005444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e3      	bne.n	800541e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	330c      	adds	r3, #12
 800546a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	60fb      	str	r3, [r7, #12]
   return(result);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0310 	bic.w	r3, r3, #16
 800547a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	330c      	adds	r3, #12
 8005484:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005488:	61fa      	str	r2, [r7, #28]
 800548a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	69b9      	ldr	r1, [r7, #24]
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	617b      	str	r3, [r7, #20]
   return(result);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e3      	bne.n	8005464 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054a6:	4619      	mov	r1, r3
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f83d 	bl	8005528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054ae:	e023      	b.n	80054f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d009      	beq.n	80054d0 <HAL_UART_IRQHandler+0x4f4>
 80054bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f943 	bl	8005754 <UART_Transmit_IT>
    return;
 80054ce:	e014      	b.n	80054fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00e      	beq.n	80054fa <HAL_UART_IRQHandler+0x51e>
 80054dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f983 	bl	80057f4 <UART_EndTransmit_IT>
    return;
 80054ee:	e004      	b.n	80054fa <HAL_UART_IRQHandler+0x51e>
    return;
 80054f0:	bf00      	nop
 80054f2:	e002      	b.n	80054fa <HAL_UART_IRQHandler+0x51e>
      return;
 80054f4:	bf00      	nop
 80054f6:	e000      	b.n	80054fa <HAL_UART_IRQHandler+0x51e>
      return;
 80054f8:	bf00      	nop
  }
}
 80054fa:	37e8      	adds	r7, #232	@ 0xe8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005550:	e03b      	b.n	80055ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d037      	beq.n	80055ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555a:	f7fb fe31 	bl	80011c0 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	6a3a      	ldr	r2, [r7, #32]
 8005566:	429a      	cmp	r2, r3
 8005568:	d302      	bcc.n	8005570 <UART_WaitOnFlagUntilTimeout+0x30>
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e03a      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d023      	beq.n	80055ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b80      	cmp	r3, #128	@ 0x80
 8005586:	d020      	beq.n	80055ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b40      	cmp	r3, #64	@ 0x40
 800558c:	d01d      	beq.n	80055ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b08      	cmp	r3, #8
 800559a:	d116      	bne.n	80055ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f857 	bl	8005666 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2208      	movs	r2, #8
 80055bc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e00f      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4013      	ands	r3, r2
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	bf0c      	ite	eq
 80055da:	2301      	moveq	r3, #1
 80055dc:	2300      	movne	r3, #0
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d0b4      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	4613      	mov	r3, r2
 80055fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	88fa      	ldrh	r2, [r7, #6]
 800560a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	88fa      	ldrh	r2, [r7, #6]
 8005610:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2222      	movs	r2, #34	@ 0x22
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005636:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695a      	ldr	r2, [r3, #20]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0220 	orr.w	r2, r2, #32
 8005656:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005666:	b480      	push	{r7}
 8005668:	b095      	sub	sp, #84	@ 0x54
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
 8005674:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800568e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005690:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005694:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800569c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e5      	bne.n	800566e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3314      	adds	r3, #20
 80056a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3314      	adds	r3, #20
 80056c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e5      	bne.n	80056a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d119      	bne.n	8005712 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	330c      	adds	r3, #12
 80056e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f023 0310 	bic.w	r3, r3, #16
 80056f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	330c      	adds	r3, #12
 80056fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056fe:	61ba      	str	r2, [r7, #24]
 8005700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6979      	ldr	r1, [r7, #20]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	613b      	str	r3, [r7, #16]
   return(result);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e5      	bne.n	80056de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005720:	bf00      	nop
 8005722:	3754      	adds	r7, #84	@ 0x54
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f7ff fee4 	bl	8005514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b21      	cmp	r3, #33	@ 0x21
 8005766:	d13e      	bne.n	80057e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005770:	d114      	bne.n	800579c <UART_Transmit_IT+0x48>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d110      	bne.n	800579c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800578e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	1c9a      	adds	r2, r3, #2
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	621a      	str	r2, [r3, #32]
 800579a:	e008      	b.n	80057ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	1c59      	adds	r1, r3, #1
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6211      	str	r1, [r2, #32]
 80057a6:	781a      	ldrb	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	4619      	mov	r1, r3
 80057bc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10f      	bne.n	80057e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	e000      	b.n	80057e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057e6:	2302      	movs	r3, #2
  }
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800580a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff fe73 	bl	8005500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08c      	sub	sp, #48	@ 0x30
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b22      	cmp	r3, #34	@ 0x22
 8005836:	f040 80ae 	bne.w	8005996 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005842:	d117      	bne.n	8005874 <UART_Receive_IT+0x50>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d113      	bne.n	8005874 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005854:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005862:	b29a      	uxth	r2, r3
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586c:	1c9a      	adds	r2, r3, #2
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	629a      	str	r2, [r3, #40]	@ 0x28
 8005872:	e026      	b.n	80058c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005878:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005886:	d007      	beq.n	8005898 <UART_Receive_IT+0x74>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <UART_Receive_IT+0x82>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d106      	bne.n	80058a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e008      	b.n	80058b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4619      	mov	r1, r3
 80058d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d15d      	bne.n	8005992 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0220 	bic.w	r2, r2, #32
 80058e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695a      	ldr	r2, [r3, #20]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0201 	bic.w	r2, r2, #1
 8005904:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005918:	2b01      	cmp	r3, #1
 800591a:	d135      	bne.n	8005988 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	330c      	adds	r3, #12
 8005928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	613b      	str	r3, [r7, #16]
   return(result);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f023 0310 	bic.w	r3, r3, #16
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	330c      	adds	r3, #12
 8005940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005942:	623a      	str	r2, [r7, #32]
 8005944:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	69f9      	ldr	r1, [r7, #28]
 8005948:	6a3a      	ldr	r2, [r7, #32]
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e5      	bne.n	8005922 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	2b10      	cmp	r3, #16
 8005962:	d10a      	bne.n	800597a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff fdd1 	bl	8005528 <HAL_UARTEx_RxEventCallback>
 8005986:	e002      	b.n	800598e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7fa fd95 	bl	80004b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e002      	b.n	8005998 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e000      	b.n	8005998 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005996:	2302      	movs	r3, #2
  }
}
 8005998:	4618      	mov	r0, r3
 800599a:	3730      	adds	r7, #48	@ 0x30
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a4:	b0c0      	sub	sp, #256	@ 0x100
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059bc:	68d9      	ldr	r1, [r3, #12]
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	ea40 0301 	orr.w	r3, r0, r1
 80059c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	431a      	orrs	r2, r3
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059f8:	f021 010c 	bic.w	r1, r1, #12
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a06:	430b      	orrs	r3, r1
 8005a08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1a:	6999      	ldr	r1, [r3, #24]
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	ea40 0301 	orr.w	r3, r0, r1
 8005a26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b8f      	ldr	r3, [pc, #572]	@ (8005c6c <UART_SetConfig+0x2cc>)
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d005      	beq.n	8005a40 <UART_SetConfig+0xa0>
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c70 <UART_SetConfig+0x2d0>)
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d104      	bne.n	8005a4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a40:	f7fe facc 	bl	8003fdc <HAL_RCC_GetPCLK2Freq>
 8005a44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a48:	e003      	b.n	8005a52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a4a:	f7fe fab3 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8005a4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a5c:	f040 810c 	bne.w	8005c78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a72:	4622      	mov	r2, r4
 8005a74:	462b      	mov	r3, r5
 8005a76:	1891      	adds	r1, r2, r2
 8005a78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a7a:	415b      	adcs	r3, r3
 8005a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a82:	4621      	mov	r1, r4
 8005a84:	eb12 0801 	adds.w	r8, r2, r1
 8005a88:	4629      	mov	r1, r5
 8005a8a:	eb43 0901 	adc.w	r9, r3, r1
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aa2:	4690      	mov	r8, r2
 8005aa4:	4699      	mov	r9, r3
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	eb18 0303 	adds.w	r3, r8, r3
 8005aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	eb49 0303 	adc.w	r3, r9, r3
 8005ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ac6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005aca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ace:	460b      	mov	r3, r1
 8005ad0:	18db      	adds	r3, r3, r3
 8005ad2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	eb42 0303 	adc.w	r3, r2, r3
 8005ada:	657b      	str	r3, [r7, #84]	@ 0x54
 8005adc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ae0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ae4:	f7fa fb70 	bl	80001c8 <__aeabi_uldivmod>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4b61      	ldr	r3, [pc, #388]	@ (8005c74 <UART_SetConfig+0x2d4>)
 8005aee:	fba3 2302 	umull	r2, r3, r3, r2
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	011c      	lsls	r4, r3, #4
 8005af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b08:	4642      	mov	r2, r8
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	1891      	adds	r1, r2, r2
 8005b0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b10:	415b      	adcs	r3, r3
 8005b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b18:	4641      	mov	r1, r8
 8005b1a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b1e:	4649      	mov	r1, r9
 8005b20:	eb43 0b01 	adc.w	fp, r3, r1
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b38:	4692      	mov	sl, r2
 8005b3a:	469b      	mov	fp, r3
 8005b3c:	4643      	mov	r3, r8
 8005b3e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b46:	464b      	mov	r3, r9
 8005b48:	eb4b 0303 	adc.w	r3, fp, r3
 8005b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b64:	460b      	mov	r3, r1
 8005b66:	18db      	adds	r3, r3, r3
 8005b68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	eb42 0303 	adc.w	r3, r2, r3
 8005b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b7a:	f7fa fb25 	bl	80001c8 <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	4b3b      	ldr	r3, [pc, #236]	@ (8005c74 <UART_SetConfig+0x2d4>)
 8005b86:	fba3 2301 	umull	r2, r3, r3, r1
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	2264      	movs	r2, #100	@ 0x64
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	1acb      	subs	r3, r1, r3
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b9a:	4b36      	ldr	r3, [pc, #216]	@ (8005c74 <UART_SetConfig+0x2d4>)
 8005b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ba8:	441c      	add	r4, r3
 8005baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bbc:	4642      	mov	r2, r8
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	1891      	adds	r1, r2, r2
 8005bc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bc4:	415b      	adcs	r3, r3
 8005bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bcc:	4641      	mov	r1, r8
 8005bce:	1851      	adds	r1, r2, r1
 8005bd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	414b      	adcs	r3, r1
 8005bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005be4:	4659      	mov	r1, fp
 8005be6:	00cb      	lsls	r3, r1, #3
 8005be8:	4651      	mov	r1, sl
 8005bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bee:	4651      	mov	r1, sl
 8005bf0:	00ca      	lsls	r2, r1, #3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	189b      	adds	r3, r3, r2
 8005bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c00:	464b      	mov	r3, r9
 8005c02:	460a      	mov	r2, r1
 8005c04:	eb42 0303 	adc.w	r3, r2, r3
 8005c08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c20:	460b      	mov	r3, r1
 8005c22:	18db      	adds	r3, r3, r3
 8005c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c26:	4613      	mov	r3, r2
 8005c28:	eb42 0303 	adc.w	r3, r2, r3
 8005c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c36:	f7fa fac7 	bl	80001c8 <__aeabi_uldivmod>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <UART_SetConfig+0x2d4>)
 8005c40:	fba3 1302 	umull	r1, r3, r3, r2
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	2164      	movs	r1, #100	@ 0x64
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	3332      	adds	r3, #50	@ 0x32
 8005c52:	4a08      	ldr	r2, [pc, #32]	@ (8005c74 <UART_SetConfig+0x2d4>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	f003 0207 	and.w	r2, r3, #7
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4422      	add	r2, r4
 8005c66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c68:	e106      	b.n	8005e78 <UART_SetConfig+0x4d8>
 8005c6a:	bf00      	nop
 8005c6c:	40011000 	.word	0x40011000
 8005c70:	40011400 	.word	0x40011400
 8005c74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c8a:	4642      	mov	r2, r8
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	1891      	adds	r1, r2, r2
 8005c90:	6239      	str	r1, [r7, #32]
 8005c92:	415b      	adcs	r3, r3
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	1854      	adds	r4, r2, r1
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	eb43 0501 	adc.w	r5, r3, r1
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	00eb      	lsls	r3, r5, #3
 8005cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cb2:	00e2      	lsls	r2, r4, #3
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	461d      	mov	r5, r3
 8005cb8:	4643      	mov	r3, r8
 8005cba:	18e3      	adds	r3, r4, r3
 8005cbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	eb45 0303 	adc.w	r3, r5, r3
 8005cc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	008b      	lsls	r3, r1, #2
 8005cea:	4621      	mov	r1, r4
 8005cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	008a      	lsls	r2, r1, #2
 8005cf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cf8:	f7fa fa66 	bl	80001c8 <__aeabi_uldivmod>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4b60      	ldr	r3, [pc, #384]	@ (8005e84 <UART_SetConfig+0x4e4>)
 8005d02:	fba3 2302 	umull	r2, r3, r3, r2
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	011c      	lsls	r4, r3, #4
 8005d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	464b      	mov	r3, r9
 8005d20:	1891      	adds	r1, r2, r2
 8005d22:	61b9      	str	r1, [r7, #24]
 8005d24:	415b      	adcs	r3, r3
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d2c:	4641      	mov	r1, r8
 8005d2e:	1851      	adds	r1, r2, r1
 8005d30:	6139      	str	r1, [r7, #16]
 8005d32:	4649      	mov	r1, r9
 8005d34:	414b      	adcs	r3, r1
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d44:	4659      	mov	r1, fp
 8005d46:	00cb      	lsls	r3, r1, #3
 8005d48:	4651      	mov	r1, sl
 8005d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d4e:	4651      	mov	r1, sl
 8005d50:	00ca      	lsls	r2, r1, #3
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	4603      	mov	r3, r0
 8005d58:	4642      	mov	r2, r8
 8005d5a:	189b      	adds	r3, r3, r2
 8005d5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d60:	464b      	mov	r3, r9
 8005d62:	460a      	mov	r2, r1
 8005d64:	eb42 0303 	adc.w	r3, r2, r3
 8005d68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d84:	4649      	mov	r1, r9
 8005d86:	008b      	lsls	r3, r1, #2
 8005d88:	4641      	mov	r1, r8
 8005d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d8e:	4641      	mov	r1, r8
 8005d90:	008a      	lsls	r2, r1, #2
 8005d92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d96:	f7fa fa17 	bl	80001c8 <__aeabi_uldivmod>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4611      	mov	r1, r2
 8005da0:	4b38      	ldr	r3, [pc, #224]	@ (8005e84 <UART_SetConfig+0x4e4>)
 8005da2:	fba3 2301 	umull	r2, r3, r3, r1
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	2264      	movs	r2, #100	@ 0x64
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	1acb      	subs	r3, r1, r3
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	3332      	adds	r3, #50	@ 0x32
 8005db4:	4a33      	ldr	r2, [pc, #204]	@ (8005e84 <UART_SetConfig+0x4e4>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dc0:	441c      	add	r4, r3
 8005dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dca:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	1891      	adds	r1, r2, r2
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	415b      	adcs	r3, r3
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005de0:	4641      	mov	r1, r8
 8005de2:	1851      	adds	r1, r2, r1
 8005de4:	6039      	str	r1, [r7, #0]
 8005de6:	4649      	mov	r1, r9
 8005de8:	414b      	adcs	r3, r1
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005df8:	4659      	mov	r1, fp
 8005dfa:	00cb      	lsls	r3, r1, #3
 8005dfc:	4651      	mov	r1, sl
 8005dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e02:	4651      	mov	r1, sl
 8005e04:	00ca      	lsls	r2, r1, #3
 8005e06:	4610      	mov	r0, r2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	189b      	adds	r3, r3, r2
 8005e10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e12:	464b      	mov	r3, r9
 8005e14:	460a      	mov	r2, r1
 8005e16:	eb42 0303 	adc.w	r3, r2, r3
 8005e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e26:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e34:	4649      	mov	r1, r9
 8005e36:	008b      	lsls	r3, r1, #2
 8005e38:	4641      	mov	r1, r8
 8005e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e3e:	4641      	mov	r1, r8
 8005e40:	008a      	lsls	r2, r1, #2
 8005e42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e46:	f7fa f9bf 	bl	80001c8 <__aeabi_uldivmod>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e84 <UART_SetConfig+0x4e4>)
 8005e50:	fba3 1302 	umull	r1, r3, r3, r2
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	2164      	movs	r1, #100	@ 0x64
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	3332      	adds	r3, #50	@ 0x32
 8005e62:	4a08      	ldr	r2, [pc, #32]	@ (8005e84 <UART_SetConfig+0x4e4>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	f003 020f 	and.w	r2, r3, #15
 8005e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4422      	add	r2, r4
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e84:	51eb851f 	.word	0x51eb851f

08005e88 <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 8005e8e:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8005e90:	2300      	movs	r3, #0
 8005e92:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8005e96:	2301      	movs	r3, #1
 8005e98:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8005e9c:	e02f      	b.n	8005efe <aes_gen_tables+0x76>
    {
        pow[i] = x;
 8005e9e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8005ea2:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8005ea6:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8005eaa:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8005eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 8005eb2:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8005eb6:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8005eba:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8005ebe:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8005ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = MBEDTLS_BYTE_0( x ^ XTIME( x ) );
 8005ec6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8005eca:	b25a      	sxtb	r2, r3
 8005ecc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	b25b      	sxtb	r3, r3
 8005ed4:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8005ed8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8005edc:	2900      	cmp	r1, #0
 8005ede:	d001      	beq.n	8005ee4 <aes_gen_tables+0x5c>
 8005ee0:	211b      	movs	r1, #27
 8005ee2:	e000      	b.n	8005ee6 <aes_gen_tables+0x5e>
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	404b      	eors	r3, r1
 8005ee8:	b25b      	sxtb	r3, r3
 8005eea:	4053      	eors	r3, r2
 8005eec:	b25b      	sxtb	r3, r3
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 256; i++ )
 8005ef4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8005ef8:	3301      	adds	r3, #1
 8005efa:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8005efe:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8005f02:	2bff      	cmp	r3, #255	@ 0xff
 8005f04:	ddcb      	ble.n	8005e9e <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8005f06:	2300      	movs	r3, #0
 8005f08:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8005f12:	e01d      	b.n	8005f50 <aes_gen_tables+0xc8>
    {
        RCON[i] = (uint32_t) x;
 8005f14:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8005f18:	49d6      	ldr	r1, [pc, #856]	@ (8006274 <aes_gen_tables+0x3ec>)
 8005f1a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8005f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = MBEDTLS_BYTE_0( XTIME( x ) );
 8005f22:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	b25b      	sxtb	r3, r3
 8005f2a:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8005f2e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	d001      	beq.n	8005f3a <aes_gen_tables+0xb2>
 8005f36:	221b      	movs	r2, #27
 8005f38:	e000      	b.n	8005f3c <aes_gen_tables+0xb4>
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	4053      	eors	r3, r2
 8005f3e:	b25b      	sxtb	r3, r3
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8005f46:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8005f50:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8005f54:	2b09      	cmp	r3, #9
 8005f56:	dddd      	ble.n	8005f14 <aes_gen_tables+0x8c>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8005f58:	4bc7      	ldr	r3, [pc, #796]	@ (8006278 <aes_gen_tables+0x3f0>)
 8005f5a:	2263      	movs	r2, #99	@ 0x63
 8005f5c:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 8005f5e:	4bc7      	ldr	r3, [pc, #796]	@ (800627c <aes_gen_tables+0x3f4>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

    for( i = 1; i < 256; i++ )
 8005f66:	2301      	movs	r3, #1
 8005f68:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8005f6c:	e07e      	b.n	800606c <aes_gen_tables+0x1e4>
    {
        x = pow[255 - log[i]];
 8005f6e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8005f72:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8005f76:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8005f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7e:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8005f82:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8005f86:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8005f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        y  = x; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8005f92:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8005f96:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 8005f9a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	b25a      	sxtb	r2, r3
 8005fa2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8005fa6:	11db      	asrs	r3, r3, #7
 8005fa8:	b25b      	sxtb	r3, r3
 8005faa:	4313      	orrs	r3, r2
 8005fac:	b25b      	sxtb	r3, r3
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8005fb4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8005fb8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8005fbc:	4053      	eors	r3, r2
 8005fbe:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8005fc2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	b25a      	sxtb	r2, r3
 8005fca:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8005fce:	11db      	asrs	r3, r3, #7
 8005fd0:	b25b      	sxtb	r3, r3
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8005fdc:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8005fe0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8005fe4:	4053      	eors	r3, r2
 8005fe6:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8005fea:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	b25a      	sxtb	r2, r3
 8005ff2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8005ff6:	11db      	asrs	r3, r3, #7
 8005ff8:	b25b      	sxtb	r3, r3
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b25b      	sxtb	r3, r3
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8006004:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8006008:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800600c:	4053      	eors	r3, r2
 800600e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8006012:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	b25a      	sxtb	r2, r3
 800601a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800601e:	11db      	asrs	r3, r3, #7
 8006020:	b25b      	sxtb	r3, r3
 8006022:	4313      	orrs	r3, r2
 8006024:	b25b      	sxtb	r3, r3
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y ^ 0x63;
 800602c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8006030:	f083 0363 	eor.w	r3, r3, #99	@ 0x63
 8006034:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8006038:	4053      	eors	r3, r2
 800603a:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        FSb[i] = (unsigned char) x;
 800603e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8006042:	b2d9      	uxtb	r1, r3
 8006044:	4a8c      	ldr	r2, [pc, #560]	@ (8006278 <aes_gen_tables+0x3f0>)
 8006046:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800604a:	4413      	add	r3, r2
 800604c:	460a      	mov	r2, r1
 800604e:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8006050:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006054:	b2d9      	uxtb	r1, r3
 8006056:	4a89      	ldr	r2, [pc, #548]	@ (800627c <aes_gen_tables+0x3f4>)
 8006058:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800605c:	4413      	add	r3, r2
 800605e:	460a      	mov	r2, r1
 8006060:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 8006062:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006066:	3301      	adds	r3, #1
 8006068:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 800606c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006070:	2bff      	cmp	r3, #255	@ 0xff
 8006072:	f77f af7c 	ble.w	8005f6e <aes_gen_tables+0xe6>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8006076:	2300      	movs	r3, #0
 8006078:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 800607c:	e13b      	b.n	80062f6 <aes_gen_tables+0x46e>
    {
        x = FSb[i];
 800607e:	4a7e      	ldr	r2, [pc, #504]	@ (8006278 <aes_gen_tables+0x3f0>)
 8006080:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006084:	4413      	add	r3, r2
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
        y = MBEDTLS_BYTE_0( XTIME( x ) );
 800608c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	b25b      	sxtb	r3, r3
 8006094:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8006098:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800609c:	2a00      	cmp	r2, #0
 800609e:	d001      	beq.n	80060a4 <aes_gen_tables+0x21c>
 80060a0:	221b      	movs	r2, #27
 80060a2:	e000      	b.n	80060a6 <aes_gen_tables+0x21e>
 80060a4:	2200      	movs	r2, #0
 80060a6:	4053      	eors	r3, r2
 80060a8:	b25b      	sxtb	r3, r3
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        z = MBEDTLS_BYTE_0( y ^ x );
 80060b0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80060b4:	b25a      	sxtb	r2, r3
 80060b6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80060ba:	b25b      	sxtb	r3, r3
 80060bc:	4053      	eors	r3, r2
 80060be:	b25b      	sxtb	r3, r3
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 80060c6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80060ca:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 80060cc:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80060d0:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 80060d2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80060d6:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 80060d8:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 80060da:	f8d7 3800 	ldr.w	r3, [r7, #2048]	@ 0x800
 80060de:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 80060e0:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 80060e2:	4967      	ldr	r1, [pc, #412]	@ (8006280 <aes_gen_tables+0x3f8>)
 80060e4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80060e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 80060ec:	4a64      	ldr	r2, [pc, #400]	@ (8006280 <aes_gen_tables+0x3f8>)
 80060ee:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80060f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f6:	ea4f 6233 	mov.w	r2, r3, ror #24
 80060fa:	4962      	ldr	r1, [pc, #392]	@ (8006284 <aes_gen_tables+0x3fc>)
 80060fc:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 8006104:	4a5f      	ldr	r2, [pc, #380]	@ (8006284 <aes_gen_tables+0x3fc>)
 8006106:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800610a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800610e:	ea4f 6233 	mov.w	r2, r3, ror #24
 8006112:	495d      	ldr	r1, [pc, #372]	@ (8006288 <aes_gen_tables+0x400>)
 8006114:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 800611c:	4a5a      	ldr	r2, [pc, #360]	@ (8006288 <aes_gen_tables+0x400>)
 800611e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006126:	ea4f 6233 	mov.w	r2, r3, ror #24
 800612a:	4958      	ldr	r1, [pc, #352]	@ (800628c <aes_gen_tables+0x404>)
 800612c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 8006134:	4a51      	ldr	r2, [pc, #324]	@ (800627c <aes_gen_tables+0x3f4>)
 8006136:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800613a:	4413      	add	r3, r2
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8006142:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8006146:	2b00      	cmp	r3, #0
 8006148:	d020      	beq.n	800618c <aes_gen_tables+0x304>
 800614a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800614e:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8006152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006154:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8006158:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800615c:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8006160:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006164:	441a      	add	r2, r3
 8006166:	4b4a      	ldr	r3, [pc, #296]	@ (8006290 <aes_gen_tables+0x408>)
 8006168:	fb83 1302 	smull	r1, r3, r3, r2
 800616c:	4413      	add	r3, r2
 800616e:	11d9      	asrs	r1, r3, #7
 8006170:	17d3      	asrs	r3, r2, #31
 8006172:	1ac9      	subs	r1, r1, r3
 8006174:	460b      	mov	r3, r1
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	1a5b      	subs	r3, r3, r1
 800617a:	1ad1      	subs	r1, r2, r3
 800617c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8006180:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8006184:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006188:	4618      	mov	r0, r3
 800618a:	e000      	b.n	800618e <aes_gen_tables+0x306>
 800618c:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800618e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8006192:	2b00      	cmp	r3, #0
 8006194:	d020      	beq.n	80061d8 <aes_gen_tables+0x350>
 8006196:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800619a:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800619e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061a0:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80061a4:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80061a8:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80061ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061b0:	441a      	add	r2, r3
 80061b2:	4b37      	ldr	r3, [pc, #220]	@ (8006290 <aes_gen_tables+0x408>)
 80061b4:	fb83 1302 	smull	r1, r3, r3, r2
 80061b8:	4413      	add	r3, r2
 80061ba:	11d9      	asrs	r1, r3, #7
 80061bc:	17d3      	asrs	r3, r2, #31
 80061be:	1ac9      	subs	r1, r1, r3
 80061c0:	460b      	mov	r3, r1
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	1a5b      	subs	r3, r3, r1
 80061c6:	1ad1      	subs	r1, r2, r3
 80061c8:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80061cc:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80061d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061d4:	021b      	lsls	r3, r3, #8
 80061d6:	e000      	b.n	80061da <aes_gen_tables+0x352>
 80061d8:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80061da:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80061dc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d020      	beq.n	8006226 <aes_gen_tables+0x39e>
 80061e4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80061e8:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80061ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ee:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80061f2:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80061f6:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80061fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061fe:	441a      	add	r2, r3
 8006200:	4b23      	ldr	r3, [pc, #140]	@ (8006290 <aes_gen_tables+0x408>)
 8006202:	fb83 1302 	smull	r1, r3, r3, r2
 8006206:	4413      	add	r3, r2
 8006208:	11d9      	asrs	r1, r3, #7
 800620a:	17d3      	asrs	r3, r2, #31
 800620c:	1ac9      	subs	r1, r1, r3
 800620e:	460b      	mov	r3, r1
 8006210:	021b      	lsls	r3, r3, #8
 8006212:	1a5b      	subs	r3, r3, r1
 8006214:	1ad1      	subs	r1, r2, r3
 8006216:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800621a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800621e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006222:	041b      	lsls	r3, r3, #16
 8006224:	e000      	b.n	8006228 <aes_gen_tables+0x3a0>
 8006226:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8006228:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 800622a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800622e:	2b00      	cmp	r3, #0
 8006230:	d030      	beq.n	8006294 <aes_gen_tables+0x40c>
 8006232:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8006236:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800623a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800623c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8006240:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8006244:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8006248:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800624c:	441a      	add	r2, r3
 800624e:	4b10      	ldr	r3, [pc, #64]	@ (8006290 <aes_gen_tables+0x408>)
 8006250:	fb83 1302 	smull	r1, r3, r3, r2
 8006254:	4413      	add	r3, r2
 8006256:	11d9      	asrs	r1, r3, #7
 8006258:	17d3      	asrs	r3, r2, #31
 800625a:	1ac9      	subs	r1, r1, r3
 800625c:	460b      	mov	r3, r1
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	1a5b      	subs	r3, r3, r1
 8006262:	1ad1      	subs	r1, r2, r3
 8006264:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8006268:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800626c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006270:	061b      	lsls	r3, r3, #24
 8006272:	e010      	b.n	8006296 <aes_gen_tables+0x40e>
 8006274:	20002578 	.word	0x20002578
 8006278:	20000378 	.word	0x20000378
 800627c:	20001478 	.word	0x20001478
 8006280:	20000478 	.word	0x20000478
 8006284:	20000878 	.word	0x20000878
 8006288:	20000c78 	.word	0x20000c78
 800628c:	20001078 	.word	0x20001078
 8006290:	80808081 	.word	0x80808081
 8006294:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8006296:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800629a:	491d      	ldr	r1, [pc, #116]	@ (8006310 <aes_gen_tables+0x488>)
 800629c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80062a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 80062a4:	4a1a      	ldr	r2, [pc, #104]	@ (8006310 <aes_gen_tables+0x488>)
 80062a6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80062aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ae:	ea4f 6233 	mov.w	r2, r3, ror #24
 80062b2:	4918      	ldr	r1, [pc, #96]	@ (8006314 <aes_gen_tables+0x48c>)
 80062b4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80062b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 80062bc:	4a15      	ldr	r2, [pc, #84]	@ (8006314 <aes_gen_tables+0x48c>)
 80062be:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80062c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c6:	ea4f 6233 	mov.w	r2, r3, ror #24
 80062ca:	4913      	ldr	r1, [pc, #76]	@ (8006318 <aes_gen_tables+0x490>)
 80062cc:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80062d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 80062d4:	4a10      	ldr	r2, [pc, #64]	@ (8006318 <aes_gen_tables+0x490>)
 80062d6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80062da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062de:	ea4f 6233 	mov.w	r2, r3, ror #24
 80062e2:	490e      	ldr	r1, [pc, #56]	@ (800631c <aes_gen_tables+0x494>)
 80062e4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80062e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 80062ec:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80062f0:	3301      	adds	r3, #1
 80062f2:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80062f6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80062fa:	2bff      	cmp	r3, #255	@ 0xff
 80062fc:	f77f aebf 	ble.w	800607e <aes_gen_tables+0x1f6>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	f607 0714 	addw	r7, r7, #2068	@ 0x814
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	20001578 	.word	0x20001578
 8006314:	20001978 	.word	0x20001978
 8006318:	20001d78 	.word	0x20001d78
 800631c:	20002178 	.word	0x20002178

08006320 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8006328:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800632c:	2100      	movs	r1, #0
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 fe08 	bl	8007f44 <memset>
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 800634a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fde4 	bl	8007f1c <mbedtls_platform_zeroize>
 8006354:	e000      	b.n	8006358 <mbedtls_aes_free+0x1c>
        return;
 8006356:	bf00      	nop
}
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006372:	d012      	beq.n	800639a <mbedtls_aes_setkey_enc+0x3a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800637a:	d812      	bhi.n	80063a2 <mbedtls_aes_setkey_enc+0x42>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b80      	cmp	r3, #128	@ 0x80
 8006380:	d003      	beq.n	800638a <mbedtls_aes_setkey_enc+0x2a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2bc0      	cmp	r3, #192	@ 0xc0
 8006386:	d004      	beq.n	8006392 <mbedtls_aes_setkey_enc+0x32>
 8006388:	e00b      	b.n	80063a2 <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	220a      	movs	r2, #10
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	e00a      	b.n	80063a8 <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	220c      	movs	r2, #12
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	e006      	b.n	80063a8 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	220e      	movs	r2, #14
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	e002      	b.n	80063a8 <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80063a2:	f06f 031f 	mvn.w	r3, #31
 80063a6:	e1c7      	b.n	8006738 <mbedtls_aes_setkey_enc+0x3d8>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80063a8:	4b8d      	ldr	r3, [pc, #564]	@ (80065e0 <mbedtls_aes_setkey_enc+0x280>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <mbedtls_aes_setkey_enc+0x5a>
    {
        aes_gen_tables();
 80063b0:	f7ff fd6a 	bl	8005e88 <aes_gen_tables>
        aes_init_done = 1;
 80063b4:	4b8a      	ldr	r3, [pc, #552]	@ (80065e0 <mbedtls_aes_setkey_enc+0x280>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3308      	adds	r3, #8
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	e027      	b.n	800641c <mbedtls_aes_setkey_enc+0xbc>
    {
        RK[i] = MBEDTLS_GET_UINT32_LE( key, i << 2 );
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	4413      	add	r3, r2
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	4619      	mov	r1, r3
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	3301      	adds	r3, #1
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	4413      	add	r3, r2
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	ea41 0203 	orr.w	r2, r1, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	3302      	adds	r3, #2
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	440b      	add	r3, r1
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	041b      	lsls	r3, r3, #16
 80063f8:	ea42 0103 	orr.w	r1, r2, r3
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	3303      	adds	r3, #3
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	4413      	add	r3, r2
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	061a      	lsls	r2, r3, #24
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	6938      	ldr	r0, [r7, #16]
 8006410:	4403      	add	r3, r0
 8006412:	430a      	orrs	r2, r1
 8006414:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	3301      	adds	r3, #1
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	429a      	cmp	r2, r3
 8006424:	d3d2      	bcc.n	80063cc <mbedtls_aes_setkey_enc+0x6c>
    }

    switch( ctx->nr )
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b0e      	cmp	r3, #14
 800642c:	f000 80d4 	beq.w	80065d8 <mbedtls_aes_setkey_enc+0x278>
 8006430:	2b0e      	cmp	r3, #14
 8006432:	f300 8180 	bgt.w	8006736 <mbedtls_aes_setkey_enc+0x3d6>
 8006436:	2b0a      	cmp	r3, #10
 8006438:	d002      	beq.n	8006440 <mbedtls_aes_setkey_enc+0xe0>
 800643a:	2b0c      	cmp	r3, #12
 800643c:	d05c      	beq.n	80064f8 <mbedtls_aes_setkey_enc+0x198>
 800643e:	e17a      	b.n	8006736 <mbedtls_aes_setkey_enc+0x3d6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8006440:	2300      	movs	r3, #0
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	e054      	b.n	80064f0 <mbedtls_aes_setkey_enc+0x190>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	4966      	ldr	r1, [pc, #408]	@ (80065e4 <mbedtls_aes_setkey_enc+0x284>)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006452:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	320c      	adds	r2, #12
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	0a12      	lsrs	r2, r2, #8
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	4611      	mov	r1, r2
 8006460:	4a61      	ldr	r2, [pc, #388]	@ (80065e8 <mbedtls_aes_setkey_enc+0x288>)
 8006462:	5c52      	ldrb	r2, [r2, r1]
                RK[4]  = RK[0] ^ RCON[i] ^
 8006464:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	330c      	adds	r3, #12
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	0c1b      	lsrs	r3, r3, #16
 800646e:	b2db      	uxtb	r3, r3
 8006470:	4619      	mov	r1, r3
 8006472:	4b5d      	ldr	r3, [pc, #372]	@ (80065e8 <mbedtls_aes_setkey_enc+0x288>)
 8006474:	5c5b      	ldrb	r3, [r3, r1]
 8006476:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 8006478:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	330c      	adds	r3, #12
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	0e1b      	lsrs	r3, r3, #24
 8006482:	b2db      	uxtb	r3, r3
 8006484:	4619      	mov	r1, r3
 8006486:	4b58      	ldr	r3, [pc, #352]	@ (80065e8 <mbedtls_aes_setkey_enc+0x288>)
 8006488:	5c5b      	ldrb	r3, [r3, r1]
 800648a:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 800648c:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[3] ) ] << 24 );
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	330c      	adds	r3, #12
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	b2db      	uxtb	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	4b53      	ldr	r3, [pc, #332]	@ (80065e8 <mbedtls_aes_setkey_enc+0x288>)
 800649c:	5c9b      	ldrb	r3, [r3, r2]
 800649e:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 80064a4:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 80064a6:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	3304      	adds	r3, #4
 80064ac:	6819      	ldr	r1, [r3, #0]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	3310      	adds	r3, #16
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	3314      	adds	r3, #20
 80064b8:	404a      	eors	r2, r1
 80064ba:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	3308      	adds	r3, #8
 80064c0:	6819      	ldr	r1, [r3, #0]
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	3314      	adds	r3, #20
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	3318      	adds	r3, #24
 80064cc:	404a      	eors	r2, r1
 80064ce:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	330c      	adds	r3, #12
 80064d4:	6819      	ldr	r1, [r3, #0]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	3318      	adds	r3, #24
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	331c      	adds	r3, #28
 80064e0:	404a      	eors	r2, r1
 80064e2:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	3301      	adds	r3, #1
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	3310      	adds	r3, #16
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b09      	cmp	r3, #9
 80064f4:	d9a7      	bls.n	8006446 <mbedtls_aes_setkey_enc+0xe6>
            }
            break;
 80064f6:	e11e      	b.n	8006736 <mbedtls_aes_setkey_enc+0x3d6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80064f8:	2300      	movs	r3, #0
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	e068      	b.n	80065d0 <mbedtls_aes_setkey_enc+0x270>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4938      	ldr	r1, [pc, #224]	@ (80065e4 <mbedtls_aes_setkey_enc+0x284>)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800650a:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	3214      	adds	r2, #20
 8006510:	6812      	ldr	r2, [r2, #0]
 8006512:	0a12      	lsrs	r2, r2, #8
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	4611      	mov	r1, r2
 8006518:	4a33      	ldr	r2, [pc, #204]	@ (80065e8 <mbedtls_aes_setkey_enc+0x288>)
 800651a:	5c52      	ldrb	r2, [r2, r1]
                RK[6]  = RK[0] ^ RCON[i] ^
 800651c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	3314      	adds	r3, #20
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	0c1b      	lsrs	r3, r3, #16
 8006526:	b2db      	uxtb	r3, r3
 8006528:	4619      	mov	r1, r3
 800652a:	4b2f      	ldr	r3, [pc, #188]	@ (80065e8 <mbedtls_aes_setkey_enc+0x288>)
 800652c:	5c5b      	ldrb	r3, [r3, r1]
 800652e:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 8006530:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	3314      	adds	r3, #20
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	0e1b      	lsrs	r3, r3, #24
 800653a:	b2db      	uxtb	r3, r3
 800653c:	4619      	mov	r1, r3
 800653e:	4b2a      	ldr	r3, [pc, #168]	@ (80065e8 <mbedtls_aes_setkey_enc+0x288>)
 8006540:	5c5b      	ldrb	r3, [r3, r1]
 8006542:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 8006544:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[5] ) ] << 24 );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	3314      	adds	r3, #20
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	4b25      	ldr	r3, [pc, #148]	@ (80065e8 <mbedtls_aes_setkey_enc+0x288>)
 8006554:	5c9b      	ldrb	r3, [r3, r2]
 8006556:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 800655c:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 800655e:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	3304      	adds	r3, #4
 8006564:	6819      	ldr	r1, [r3, #0]
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	3318      	adds	r3, #24
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	331c      	adds	r3, #28
 8006570:	404a      	eors	r2, r1
 8006572:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	3308      	adds	r3, #8
 8006578:	6819      	ldr	r1, [r3, #0]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	331c      	adds	r3, #28
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	3320      	adds	r3, #32
 8006584:	404a      	eors	r2, r1
 8006586:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	330c      	adds	r3, #12
 800658c:	6819      	ldr	r1, [r3, #0]
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	3320      	adds	r3, #32
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	3324      	adds	r3, #36	@ 0x24
 8006598:	404a      	eors	r2, r1
 800659a:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	3310      	adds	r3, #16
 80065a0:	6819      	ldr	r1, [r3, #0]
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	3324      	adds	r3, #36	@ 0x24
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	3328      	adds	r3, #40	@ 0x28
 80065ac:	404a      	eors	r2, r1
 80065ae:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	3314      	adds	r3, #20
 80065b4:	6819      	ldr	r1, [r3, #0]
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	3328      	adds	r3, #40	@ 0x28
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	332c      	adds	r3, #44	@ 0x2c
 80065c0:	404a      	eors	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	3301      	adds	r3, #1
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	3318      	adds	r3, #24
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b07      	cmp	r3, #7
 80065d4:	d993      	bls.n	80064fe <mbedtls_aes_setkey_enc+0x19e>
            }
            break;
 80065d6:	e0ae      	b.n	8006736 <mbedtls_aes_setkey_enc+0x3d6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	e0a6      	b.n	800672c <mbedtls_aes_setkey_enc+0x3cc>
 80065de:	bf00      	nop
 80065e0:	200025a0 	.word	0x200025a0
 80065e4:	20002578 	.word	0x20002578
 80065e8:	20000378 	.word	0x20000378
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	4953      	ldr	r1, [pc, #332]	@ (8006740 <mbedtls_aes_setkey_enc+0x3e0>)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80065f8:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	321c      	adds	r2, #28
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	0a12      	lsrs	r2, r2, #8
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	4611      	mov	r1, r2
 8006606:	4a4f      	ldr	r2, [pc, #316]	@ (8006744 <mbedtls_aes_setkey_enc+0x3e4>)
 8006608:	5c52      	ldrb	r2, [r2, r1]
                RK[8]  = RK[0] ^ RCON[i] ^
 800660a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	331c      	adds	r3, #28
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	0c1b      	lsrs	r3, r3, #16
 8006614:	b2db      	uxtb	r3, r3
 8006616:	4619      	mov	r1, r3
 8006618:	4b4a      	ldr	r3, [pc, #296]	@ (8006744 <mbedtls_aes_setkey_enc+0x3e4>)
 800661a:	5c5b      	ldrb	r3, [r3, r1]
 800661c:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 800661e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	331c      	adds	r3, #28
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	0e1b      	lsrs	r3, r3, #24
 8006628:	b2db      	uxtb	r3, r3
 800662a:	4619      	mov	r1, r3
 800662c:	4b45      	ldr	r3, [pc, #276]	@ (8006744 <mbedtls_aes_setkey_enc+0x3e4>)
 800662e:	5c5b      	ldrb	r3, [r3, r1]
 8006630:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 8006632:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[7] ) ] << 24 );
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	331c      	adds	r3, #28
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	461a      	mov	r2, r3
 8006640:	4b40      	ldr	r3, [pc, #256]	@ (8006744 <mbedtls_aes_setkey_enc+0x3e4>)
 8006642:	5c9b      	ldrb	r3, [r3, r2]
 8006644:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 800664a:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 800664c:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	3304      	adds	r3, #4
 8006652:	6819      	ldr	r1, [r3, #0]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	3320      	adds	r3, #32
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	3324      	adds	r3, #36	@ 0x24
 800665e:	404a      	eors	r2, r1
 8006660:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	3308      	adds	r3, #8
 8006666:	6819      	ldr	r1, [r3, #0]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	3324      	adds	r3, #36	@ 0x24
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	3328      	adds	r3, #40	@ 0x28
 8006672:	404a      	eors	r2, r1
 8006674:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	330c      	adds	r3, #12
 800667a:	6819      	ldr	r1, [r3, #0]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	3328      	adds	r3, #40	@ 0x28
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	332c      	adds	r3, #44	@ 0x2c
 8006686:	404a      	eors	r2, r1
 8006688:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	3310      	adds	r3, #16
 800668e:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	322c      	adds	r2, #44	@ 0x2c
 8006694:	6812      	ldr	r2, [r2, #0]
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	4611      	mov	r1, r2
 800669a:	4a2a      	ldr	r2, [pc, #168]	@ (8006744 <mbedtls_aes_setkey_enc+0x3e4>)
 800669c:	5c52      	ldrb	r2, [r2, r1]
                RK[12] = RK[4] ^
 800669e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	332c      	adds	r3, #44	@ 0x2c
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	0a1b      	lsrs	r3, r3, #8
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	4619      	mov	r1, r3
 80066ac:	4b25      	ldr	r3, [pc, #148]	@ (8006744 <mbedtls_aes_setkey_enc+0x3e4>)
 80066ae:	5c5b      	ldrb	r3, [r3, r1]
 80066b0:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 80066b2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	332c      	adds	r3, #44	@ 0x2c
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	0c1b      	lsrs	r3, r3, #16
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	4619      	mov	r1, r3
 80066c0:	4b20      	ldr	r3, [pc, #128]	@ (8006744 <mbedtls_aes_setkey_enc+0x3e4>)
 80066c2:	5c5b      	ldrb	r3, [r3, r1]
 80066c4:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 80066c6:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[11] ) ] << 24 );
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	332c      	adds	r3, #44	@ 0x2c
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	0e1b      	lsrs	r3, r3, #24
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006744 <mbedtls_aes_setkey_enc+0x3e4>)
 80066d8:	5c9b      	ldrb	r3, [r3, r2]
 80066da:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 80066e0:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 80066e2:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	3314      	adds	r3, #20
 80066e8:	6819      	ldr	r1, [r3, #0]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	3330      	adds	r3, #48	@ 0x30
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	3334      	adds	r3, #52	@ 0x34
 80066f4:	404a      	eors	r2, r1
 80066f6:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	3318      	adds	r3, #24
 80066fc:	6819      	ldr	r1, [r3, #0]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	3334      	adds	r3, #52	@ 0x34
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	3338      	adds	r3, #56	@ 0x38
 8006708:	404a      	eors	r2, r1
 800670a:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	331c      	adds	r3, #28
 8006710:	6819      	ldr	r1, [r3, #0]
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	3338      	adds	r3, #56	@ 0x38
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	333c      	adds	r3, #60	@ 0x3c
 800671c:	404a      	eors	r2, r1
 800671e:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	3301      	adds	r3, #1
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	3320      	adds	r3, #32
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2b06      	cmp	r3, #6
 8006730:	f67f af5c 	bls.w	80065ec <mbedtls_aes_setkey_enc+0x28c>
            }
            break;
 8006734:	bf00      	nop
    }

    return( 0 );
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20002578 	.word	0x20002578
 8006744:	20000378 	.word	0x20000378

08006748 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b0d0      	sub	sp, #320	@ 0x140
 800674c:	af00      	add	r7, sp, #0
 800674e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006752:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006756:	6018      	str	r0, [r3, #0]
 8006758:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800675c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006760:	6019      	str	r1, [r3, #0]
 8006762:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006766:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800676a:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 800676c:	f107 0314 	add.w	r3, r7, #20
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff fdd5 	bl	8006320 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8006776:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800677a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3308      	adds	r3, #8
 8006782:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006786:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800678a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8006794:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8006796:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800679a:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800679e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80067a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80067a6:	f107 0014 	add.w	r0, r7, #20
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	6819      	ldr	r1, [r3, #0]
 80067ae:	f7ff fdd7 	bl	8006360 <mbedtls_aes_setkey_enc>
 80067b2:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 80067b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f040 80e2 	bne.w	8006984 <mbedtls_aes_setkey_dec+0x23c>
        goto exit;

    ctx->nr = cty.nr;
 80067c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80067c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80067ce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80067d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80067da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80067e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	4413      	add	r3, r2
 80067ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 80067f2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80067f6:	1d13      	adds	r3, r2, #4
 80067f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80067fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006800:	1d19      	adds	r1, r3, #4
 8006802:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800680a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800680e:	1d13      	adds	r3, r2, #4
 8006810:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006814:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006818:	1d19      	adds	r1, r3, #4
 800681a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8006822:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006826:	1d13      	adds	r3, r2, #4
 8006828:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800682c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006830:	1d19      	adds	r1, r3, #4
 8006832:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8006836:	6812      	ldr	r2, [r2, #0]
 8006838:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800683a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800683e:	1d13      	adds	r3, r2, #4
 8006840:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006844:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006848:	1d19      	adds	r1, r3, #4
 800684a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800684e:	6812      	ldr	r2, [r2, #0]
 8006850:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8006852:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006856:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3b01      	subs	r3, #1
 8006860:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8006864:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006868:	3b20      	subs	r3, #32
 800686a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800686e:	e054      	b.n	800691a <mbedtls_aes_setkey_dec+0x1d2>
    {
        for( j = 0; j < 4; j++, SK++ )
 8006870:	2300      	movs	r3, #0
 8006872:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8006876:	e042      	b.n	80068fe <mbedtls_aes_setkey_dec+0x1b6>
        {
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8006878:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	4b47      	ldr	r3, [pc, #284]	@ (80069a0 <mbedtls_aes_setkey_dec+0x258>)
 8006884:	5c9b      	ldrb	r3, [r3, r2]
 8006886:	461a      	mov	r2, r3
 8006888:	4b46      	ldr	r3, [pc, #280]	@ (80069a4 <mbedtls_aes_setkey_dec+0x25c>)
 800688a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 800688e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	0a1b      	lsrs	r3, r3, #8
 8006896:	b2db      	uxtb	r3, r3
 8006898:	4619      	mov	r1, r3
 800689a:	4b41      	ldr	r3, [pc, #260]	@ (80069a0 <mbedtls_aes_setkey_dec+0x258>)
 800689c:	5c5b      	ldrb	r3, [r3, r1]
 800689e:	4619      	mov	r1, r3
 80068a0:	4b41      	ldr	r3, [pc, #260]	@ (80069a8 <mbedtls_aes_setkey_dec+0x260>)
 80068a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 80068a6:	405a      	eors	r2, r3
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 80068a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	0c1b      	lsrs	r3, r3, #16
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	4619      	mov	r1, r3
 80068b4:	4b3a      	ldr	r3, [pc, #232]	@ (80069a0 <mbedtls_aes_setkey_dec+0x258>)
 80068b6:	5c5b      	ldrb	r3, [r3, r1]
 80068b8:	4619      	mov	r1, r3
 80068ba:	4b3c      	ldr	r3, [pc, #240]	@ (80069ac <mbedtls_aes_setkey_dec+0x264>)
 80068bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 80068c0:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ MBEDTLS_BYTE_3( *SK ) ] );
 80068c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	0e1b      	lsrs	r3, r3, #24
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	4b33      	ldr	r3, [pc, #204]	@ (80069a0 <mbedtls_aes_setkey_dec+0x258>)
 80068d2:	5c9b      	ldrb	r3, [r3, r2]
 80068d4:	461a      	mov	r2, r3
 80068d6:	4b36      	ldr	r3, [pc, #216]	@ (80069b0 <mbedtls_aes_setkey_dec+0x268>)
 80068d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 80068dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80068e0:	1d18      	adds	r0, r3, #4
 80068e2:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 80068e6:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 80068e8:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 80068ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80068ee:	3301      	adds	r3, #1
 80068f0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80068f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80068f8:	3304      	adds	r3, #4
 80068fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80068fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006902:	2b03      	cmp	r3, #3
 8006904:	ddb8      	ble.n	8006878 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8006906:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800690a:	3b01      	subs	r3, #1
 800690c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8006910:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006914:	3b20      	subs	r3, #32
 8006916:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800691a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800691e:	2b00      	cmp	r3, #0
 8006920:	dca6      	bgt.n	8006870 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 8006922:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006926:	1d13      	adds	r3, r2, #4
 8006928:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800692c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006930:	1d19      	adds	r1, r3, #4
 8006932:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8006936:	6812      	ldr	r2, [r2, #0]
 8006938:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800693a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800693e:	1d13      	adds	r3, r2, #4
 8006940:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006944:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006948:	1d19      	adds	r1, r3, #4
 800694a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8006952:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006956:	1d13      	adds	r3, r2, #4
 8006958:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800695c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006960:	1d19      	adds	r1, r3, #4
 8006962:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800696a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800696e:	1d13      	adds	r3, r2, #4
 8006970:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006974:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006978:	1d19      	adds	r1, r3, #4
 800697a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800697e:	6812      	ldr	r2, [r2, #0]
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e000      	b.n	8006986 <mbedtls_aes_setkey_dec+0x23e>
        goto exit;
 8006984:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 8006986:	f107 0314 	add.w	r3, r7, #20
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff fcd6 	bl	800633c <mbedtls_aes_free>

    return( ret );
 8006990:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 8006994:	4618      	mov	r0, r3
 8006996:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000378 	.word	0x20000378
 80069a4:	20001578 	.word	0x20001578
 80069a8:	20001978 	.word	0x20001978
 80069ac:	20001d78 	.word	0x20001d78
 80069b0:	20002178 	.word	0x20002178

080069b4 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08e      	sub	sp, #56	@ 0x38
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	633b      	str	r3, [r7, #48]	@ 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3301      	adds	r3, #1
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	021b      	lsls	r3, r3, #8
 80069d4:	431a      	orrs	r2, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	3302      	adds	r3, #2
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	041b      	lsls	r3, r3, #16
 80069de:	431a      	orrs	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	3303      	adds	r3, #3
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	061b      	lsls	r3, r3, #24
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]
 80069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ee:	1d1a      	adds	r2, r3, #4
 80069f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4053      	eors	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	3304      	adds	r3, #4
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	3305      	adds	r3, #5
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	3306      	adds	r3, #6
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	041b      	lsls	r3, r3, #16
 8006a14:	431a      	orrs	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	3307      	adds	r3, #7
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	061b      	lsls	r3, r3, #24
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	1d1a      	adds	r2, r3, #4
 8006a26:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	4053      	eors	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	3308      	adds	r3, #8
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	3309      	adds	r3, #9
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	021b      	lsls	r3, r3, #8
 8006a40:	431a      	orrs	r2, r3
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	330a      	adds	r3, #10
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	041b      	lsls	r3, r3, #16
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	330b      	adds	r3, #11
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	061b      	lsls	r3, r3, #24
 8006a54:	4313      	orrs	r3, r2
 8006a56:	61bb      	str	r3, [r7, #24]
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	1d1a      	adds	r2, r3, #4
 8006a5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	4053      	eors	r3, r2
 8006a64:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	330c      	adds	r3, #12
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	330d      	adds	r3, #13
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	021b      	lsls	r3, r3, #8
 8006a76:	431a      	orrs	r2, r3
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	330e      	adds	r3, #14
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	041b      	lsls	r3, r3, #16
 8006a80:	431a      	orrs	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	330f      	adds	r3, #15
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	061b      	lsls	r3, r3, #24
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	61fb      	str	r3, [r7, #28]
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a90:	1d1a      	adds	r2, r3, #4
 8006a92:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4053      	eors	r3, r2
 8006a9a:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	105b      	asrs	r3, r3, #1
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa6:	e122      	b.n	8006cee <mbedtls_internal_aes_encrypt+0x33a>
    {
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aaa:	1d1a      	adds	r2, r3, #4
 8006aac:	633a      	str	r2, [r7, #48]	@ 0x30
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4bb0      	ldr	r3, [pc, #704]	@ (8006d78 <mbedtls_internal_aes_encrypt+0x3c4>)
 8006ab8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006abc:	405a      	eors	r2, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	0a1b      	lsrs	r3, r3, #8
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4bad      	ldr	r3, [pc, #692]	@ (8006d7c <mbedtls_internal_aes_encrypt+0x3c8>)
 8006ac8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006acc:	405a      	eors	r2, r3
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	0c1b      	lsrs	r3, r3, #16
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4baa      	ldr	r3, [pc, #680]	@ (8006d80 <mbedtls_internal_aes_encrypt+0x3cc>)
 8006ad8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006adc:	405a      	eors	r2, r3
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	0e1b      	lsrs	r3, r3, #24
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4ba7      	ldr	r3, [pc, #668]	@ (8006d84 <mbedtls_internal_aes_encrypt+0x3d0>)
 8006ae8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006aec:	4053      	eors	r3, r2
 8006aee:	623b      	str	r3, [r7, #32]
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	1d1a      	adds	r2, r3, #4
 8006af4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	4619      	mov	r1, r3
 8006afe:	4b9e      	ldr	r3, [pc, #632]	@ (8006d78 <mbedtls_internal_aes_encrypt+0x3c4>)
 8006b00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b04:	405a      	eors	r2, r3
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	0a1b      	lsrs	r3, r3, #8
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4b9b      	ldr	r3, [pc, #620]	@ (8006d7c <mbedtls_internal_aes_encrypt+0x3c8>)
 8006b10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b14:	405a      	eors	r2, r3
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	0c1b      	lsrs	r3, r3, #16
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4b98      	ldr	r3, [pc, #608]	@ (8006d80 <mbedtls_internal_aes_encrypt+0x3cc>)
 8006b20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b24:	405a      	eors	r2, r3
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	0e1b      	lsrs	r3, r3, #24
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4b95      	ldr	r3, [pc, #596]	@ (8006d84 <mbedtls_internal_aes_encrypt+0x3d0>)
 8006b30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b34:	4053      	eors	r3, r2
 8006b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	4619      	mov	r1, r3
 8006b46:	4b8c      	ldr	r3, [pc, #560]	@ (8006d78 <mbedtls_internal_aes_encrypt+0x3c4>)
 8006b48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b4c:	405a      	eors	r2, r3
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	0a1b      	lsrs	r3, r3, #8
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	4619      	mov	r1, r3
 8006b56:	4b89      	ldr	r3, [pc, #548]	@ (8006d7c <mbedtls_internal_aes_encrypt+0x3c8>)
 8006b58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b5c:	405a      	eors	r2, r3
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	0c1b      	lsrs	r3, r3, #16
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	4619      	mov	r1, r3
 8006b66:	4b86      	ldr	r3, [pc, #536]	@ (8006d80 <mbedtls_internal_aes_encrypt+0x3cc>)
 8006b68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b6c:	405a      	eors	r2, r3
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	0e1b      	lsrs	r3, r3, #24
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	4619      	mov	r1, r3
 8006b76:	4b83      	ldr	r3, [pc, #524]	@ (8006d84 <mbedtls_internal_aes_encrypt+0x3d0>)
 8006b78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b7c:	4053      	eors	r3, r2
 8006b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b82:	1d1a      	adds	r2, r3, #4
 8006b84:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8006d78 <mbedtls_internal_aes_encrypt+0x3c4>)
 8006b90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b94:	405a      	eors	r2, r3
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	0a1b      	lsrs	r3, r3, #8
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4b77      	ldr	r3, [pc, #476]	@ (8006d7c <mbedtls_internal_aes_encrypt+0x3c8>)
 8006ba0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ba4:	405a      	eors	r2, r3
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	0c1b      	lsrs	r3, r3, #16
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	4619      	mov	r1, r3
 8006bae:	4b74      	ldr	r3, [pc, #464]	@ (8006d80 <mbedtls_internal_aes_encrypt+0x3cc>)
 8006bb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bb4:	405a      	eors	r2, r3
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	0e1b      	lsrs	r3, r3, #24
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4b71      	ldr	r3, [pc, #452]	@ (8006d84 <mbedtls_internal_aes_encrypt+0x3d0>)
 8006bc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bc4:	4053      	eors	r3, r2
 8006bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bca:	1d1a      	adds	r2, r3, #4
 8006bcc:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4b68      	ldr	r3, [pc, #416]	@ (8006d78 <mbedtls_internal_aes_encrypt+0x3c4>)
 8006bd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bdc:	405a      	eors	r2, r3
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	0a1b      	lsrs	r3, r3, #8
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	4619      	mov	r1, r3
 8006be6:	4b65      	ldr	r3, [pc, #404]	@ (8006d7c <mbedtls_internal_aes_encrypt+0x3c8>)
 8006be8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bec:	405a      	eors	r2, r3
 8006bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf0:	0c1b      	lsrs	r3, r3, #16
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4b62      	ldr	r3, [pc, #392]	@ (8006d80 <mbedtls_internal_aes_encrypt+0x3cc>)
 8006bf8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bfc:	405a      	eors	r2, r3
 8006bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c00:	0e1b      	lsrs	r3, r3, #24
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	4619      	mov	r1, r3
 8006c06:	4b5f      	ldr	r3, [pc, #380]	@ (8006d84 <mbedtls_internal_aes_encrypt+0x3d0>)
 8006c08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c0c:	4053      	eors	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	1d1a      	adds	r2, r3, #4
 8006c14:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4b56      	ldr	r3, [pc, #344]	@ (8006d78 <mbedtls_internal_aes_encrypt+0x3c4>)
 8006c20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c24:	405a      	eors	r2, r3
 8006c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c28:	0a1b      	lsrs	r3, r3, #8
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4b53      	ldr	r3, [pc, #332]	@ (8006d7c <mbedtls_internal_aes_encrypt+0x3c8>)
 8006c30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c34:	405a      	eors	r2, r3
 8006c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c38:	0c1b      	lsrs	r3, r3, #16
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4b50      	ldr	r3, [pc, #320]	@ (8006d80 <mbedtls_internal_aes_encrypt+0x3cc>)
 8006c40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c44:	405a      	eors	r2, r3
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	0e1b      	lsrs	r3, r3, #24
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4b4d      	ldr	r3, [pc, #308]	@ (8006d84 <mbedtls_internal_aes_encrypt+0x3d0>)
 8006c50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c54:	4053      	eors	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5a:	1d1a      	adds	r2, r3, #4
 8006c5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	4619      	mov	r1, r3
 8006c66:	4b44      	ldr	r3, [pc, #272]	@ (8006d78 <mbedtls_internal_aes_encrypt+0x3c4>)
 8006c68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c6c:	405a      	eors	r2, r3
 8006c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c70:	0a1b      	lsrs	r3, r3, #8
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	4619      	mov	r1, r3
 8006c76:	4b41      	ldr	r3, [pc, #260]	@ (8006d7c <mbedtls_internal_aes_encrypt+0x3c8>)
 8006c78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c7c:	405a      	eors	r2, r3
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	0c1b      	lsrs	r3, r3, #16
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	4619      	mov	r1, r3
 8006c86:	4b3e      	ldr	r3, [pc, #248]	@ (8006d80 <mbedtls_internal_aes_encrypt+0x3cc>)
 8006c88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c8c:	405a      	eors	r2, r3
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	0e1b      	lsrs	r3, r3, #24
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	4619      	mov	r1, r3
 8006c96:	4b3b      	ldr	r3, [pc, #236]	@ (8006d84 <mbedtls_internal_aes_encrypt+0x3d0>)
 8006c98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c9c:	4053      	eors	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca2:	1d1a      	adds	r2, r3, #4
 8006ca4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	4619      	mov	r1, r3
 8006cae:	4b32      	ldr	r3, [pc, #200]	@ (8006d78 <mbedtls_internal_aes_encrypt+0x3c4>)
 8006cb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006cb4:	405a      	eors	r2, r3
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	0a1b      	lsrs	r3, r3, #8
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8006d7c <mbedtls_internal_aes_encrypt+0x3c8>)
 8006cc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006cc4:	405a      	eors	r2, r3
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	0c1b      	lsrs	r3, r3, #16
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4b2c      	ldr	r3, [pc, #176]	@ (8006d80 <mbedtls_internal_aes_encrypt+0x3cc>)
 8006cd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006cd4:	405a      	eors	r2, r3
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	0e1b      	lsrs	r3, r3, #24
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4b29      	ldr	r3, [pc, #164]	@ (8006d84 <mbedtls_internal_aes_encrypt+0x3d0>)
 8006ce0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ce4:	4053      	eors	r3, r2
 8006ce6:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cea:	3b01      	subs	r3, #1
 8006cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f73f aed9 	bgt.w	8006aa8 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	1d1a      	adds	r2, r3, #4
 8006cfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	4619      	mov	r1, r3
 8006d04:	4b1c      	ldr	r3, [pc, #112]	@ (8006d78 <mbedtls_internal_aes_encrypt+0x3c4>)
 8006d06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d0a:	405a      	eors	r2, r3
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	0a1b      	lsrs	r3, r3, #8
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	4619      	mov	r1, r3
 8006d14:	4b19      	ldr	r3, [pc, #100]	@ (8006d7c <mbedtls_internal_aes_encrypt+0x3c8>)
 8006d16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d1a:	405a      	eors	r2, r3
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	0c1b      	lsrs	r3, r3, #16
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	4619      	mov	r1, r3
 8006d24:	4b16      	ldr	r3, [pc, #88]	@ (8006d80 <mbedtls_internal_aes_encrypt+0x3cc>)
 8006d26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d2a:	405a      	eors	r2, r3
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	0e1b      	lsrs	r3, r3, #24
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	4619      	mov	r1, r3
 8006d34:	4b13      	ldr	r3, [pc, #76]	@ (8006d84 <mbedtls_internal_aes_encrypt+0x3d0>)
 8006d36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d3a:	4053      	eors	r3, r2
 8006d3c:	623b      	str	r3, [r7, #32]
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	1d1a      	adds	r2, r3, #4
 8006d42:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d78 <mbedtls_internal_aes_encrypt+0x3c4>)
 8006d4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d52:	405a      	eors	r2, r3
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	0a1b      	lsrs	r3, r3, #8
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4b07      	ldr	r3, [pc, #28]	@ (8006d7c <mbedtls_internal_aes_encrypt+0x3c8>)
 8006d5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d62:	405a      	eors	r2, r3
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	0c1b      	lsrs	r3, r3, #16
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4b04      	ldr	r3, [pc, #16]	@ (8006d80 <mbedtls_internal_aes_encrypt+0x3cc>)
 8006d6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d72:	405a      	eors	r2, r3
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	e007      	b.n	8006d88 <mbedtls_internal_aes_encrypt+0x3d4>
 8006d78:	20000478 	.word	0x20000478
 8006d7c:	20000878 	.word	0x20000878
 8006d80:	20000c78 	.word	0x20000c78
 8006d84:	20001078 	.word	0x20001078
 8006d88:	0e1b      	lsrs	r3, r3, #24
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4b9f      	ldr	r3, [pc, #636]	@ (800700c <mbedtls_internal_aes_encrypt+0x658>)
 8006d90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d94:	4053      	eors	r3, r2
 8006d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	1d1a      	adds	r2, r3, #4
 8006d9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	4619      	mov	r1, r3
 8006da6:	4b9a      	ldr	r3, [pc, #616]	@ (8007010 <mbedtls_internal_aes_encrypt+0x65c>)
 8006da8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dac:	405a      	eors	r2, r3
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	0a1b      	lsrs	r3, r3, #8
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	4619      	mov	r1, r3
 8006db6:	4b97      	ldr	r3, [pc, #604]	@ (8007014 <mbedtls_internal_aes_encrypt+0x660>)
 8006db8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dbc:	405a      	eors	r2, r3
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	0c1b      	lsrs	r3, r3, #16
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4b94      	ldr	r3, [pc, #592]	@ (8007018 <mbedtls_internal_aes_encrypt+0x664>)
 8006dc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dcc:	405a      	eors	r2, r3
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	0e1b      	lsrs	r3, r3, #24
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4b8d      	ldr	r3, [pc, #564]	@ (800700c <mbedtls_internal_aes_encrypt+0x658>)
 8006dd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ddc:	4053      	eors	r3, r2
 8006dde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de2:	1d1a      	adds	r2, r3, #4
 8006de4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	4619      	mov	r1, r3
 8006dee:	4b88      	ldr	r3, [pc, #544]	@ (8007010 <mbedtls_internal_aes_encrypt+0x65c>)
 8006df0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006df4:	405a      	eors	r2, r3
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	0a1b      	lsrs	r3, r3, #8
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4b85      	ldr	r3, [pc, #532]	@ (8007014 <mbedtls_internal_aes_encrypt+0x660>)
 8006e00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e04:	405a      	eors	r2, r3
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	0c1b      	lsrs	r3, r3, #16
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4b82      	ldr	r3, [pc, #520]	@ (8007018 <mbedtls_internal_aes_encrypt+0x664>)
 8006e10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e14:	405a      	eors	r2, r3
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	0e1b      	lsrs	r3, r3, #24
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4b7b      	ldr	r3, [pc, #492]	@ (800700c <mbedtls_internal_aes_encrypt+0x658>)
 8006e20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e24:	4053      	eors	r3, r2
 8006e26:	62fb      	str	r3, [r7, #44]	@ 0x2c

    t.X[0] = *RK++ ^ \
 8006e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2a:	1d1a      	adds	r2, r3, #4
 8006e2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e2e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8006e30:	6a3a      	ldr	r2, [r7, #32]
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	4611      	mov	r1, r2
 8006e36:	4a79      	ldr	r2, [pc, #484]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006e38:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 8006e3a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	0a1b      	lsrs	r3, r3, #8
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	4619      	mov	r1, r3
 8006e44:	4b75      	ldr	r3, [pc, #468]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006e46:	5c5b      	ldrb	r3, [r3, r1]
 8006e48:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8006e4a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8006e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4e:	0c1b      	lsrs	r3, r3, #16
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	4619      	mov	r1, r3
 8006e54:	4b71      	ldr	r3, [pc, #452]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006e56:	5c5b      	ldrb	r3, [r3, r1]
 8006e58:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8006e5a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 8006e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e5e:	0e1b      	lsrs	r3, r3, #24
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	4619      	mov	r1, r3
 8006e64:	4b6d      	ldr	r3, [pc, #436]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006e66:	5c5b      	ldrb	r3, [r3, r1]
 8006e68:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8006e6a:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8006e6c:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	1d1a      	adds	r2, r3, #4
 8006e72:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e74:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8006e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4a67      	ldr	r2, [pc, #412]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006e7e:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8006e80:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8006e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e84:	0a1b      	lsrs	r3, r3, #8
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4b64      	ldr	r3, [pc, #400]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006e8c:	5c5b      	ldrb	r3, [r3, r1]
 8006e8e:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8006e90:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8006e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e94:	0c1b      	lsrs	r3, r3, #16
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4b60      	ldr	r3, [pc, #384]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006e9c:	5c5b      	ldrb	r3, [r3, r1]
 8006e9e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8006ea0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	0e1b      	lsrs	r3, r3, #24
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4b5c      	ldr	r3, [pc, #368]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006eac:	5c5b      	ldrb	r3, [r3, r1]
 8006eae:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8006eb0:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8006eb2:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb6:	1d1a      	adds	r2, r3, #4
 8006eb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006eba:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8006ebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	4a56      	ldr	r2, [pc, #344]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006ec4:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8006ec6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8006ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eca:	0a1b      	lsrs	r3, r3, #8
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4b52      	ldr	r3, [pc, #328]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006ed2:	5c5b      	ldrb	r3, [r3, r1]
 8006ed4:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8006ed6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	0c1b      	lsrs	r3, r3, #16
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006ee2:	5c5b      	ldrb	r3, [r3, r1]
 8006ee4:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8006ee6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	0e1b      	lsrs	r3, r3, #24
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006ef2:	5c5b      	ldrb	r3, [r3, r1]
 8006ef4:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8006ef6:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8006ef8:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	1d1a      	adds	r2, r3, #4
 8006efe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f00:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8006f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	4611      	mov	r1, r2
 8006f08:	4a44      	ldr	r2, [pc, #272]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006f0a:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 8006f0c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	0a1b      	lsrs	r3, r3, #8
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	4619      	mov	r1, r3
 8006f16:	4b41      	ldr	r3, [pc, #260]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006f18:	5c5b      	ldrb	r3, [r3, r1]
 8006f1a:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8006f1c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	0c1b      	lsrs	r3, r3, #16
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	4619      	mov	r1, r3
 8006f26:	4b3d      	ldr	r3, [pc, #244]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006f28:	5c5b      	ldrb	r3, [r3, r1]
 8006f2a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 8006f2c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 8006f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f30:	0e1b      	lsrs	r3, r3, #24
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	4619      	mov	r1, r3
 8006f36:	4b39      	ldr	r3, [pc, #228]	@ (800701c <mbedtls_internal_aes_encrypt+0x668>)
 8006f38:	5c5b      	ldrb	r3, [r3, r1]
 8006f3a:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 8006f3c:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 8006f3e:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	0a1a      	lsrs	r2, r3, #8
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	0c1a      	lsrs	r2, r3, #16
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	b2d2      	uxtb	r2, r2
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	0e1a      	lsrs	r2, r3, #24
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3303      	adds	r3, #3
 8006f68:	b2d2      	uxtb	r2, r2
 8006f6a:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3304      	adds	r3, #4
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	0a1a      	lsrs	r2, r3, #8
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3305      	adds	r3, #5
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	0c1a      	lsrs	r2, r3, #16
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3306      	adds	r3, #6
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	0e1a      	lsrs	r2, r3, #24
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	3307      	adds	r3, #7
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	b2d2      	uxtb	r2, r2
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	0a1a      	lsrs	r2, r3, #8
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3309      	adds	r3, #9
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	0c1a      	lsrs	r2, r3, #16
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	330a      	adds	r3, #10
 8006fb8:	b2d2      	uxtb	r2, r2
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	0e1a      	lsrs	r2, r3, #24
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	330b      	adds	r3, #11
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 8006fc8:	69fa      	ldr	r2, [r7, #28]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	0a1a      	lsrs	r2, r3, #8
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	330d      	adds	r3, #13
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	0c1a      	lsrs	r2, r3, #16
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	330e      	adds	r3, #14
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	0e1a      	lsrs	r2, r3, #24
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	330f      	adds	r3, #15
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8006ff6:	f107 0310 	add.w	r3, r7, #16
 8006ffa:	2120      	movs	r1, #32
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 ff8d 	bl	8007f1c <mbedtls_platform_zeroize>

    return( 0 );
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3738      	adds	r7, #56	@ 0x38
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20001078 	.word	0x20001078
 8007010:	20000478 	.word	0x20000478
 8007014:	20000878 	.word	0x20000878
 8007018:	20000c78 	.word	0x20000c78
 800701c:	20000378 	.word	0x20000378

08007020 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08e      	sub	sp, #56	@ 0x38
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	633b      	str	r3, [r7, #48]	@ 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	3301      	adds	r3, #1
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	431a      	orrs	r2, r3
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	3302      	adds	r3, #2
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	041b      	lsls	r3, r3, #16
 800704a:	431a      	orrs	r2, r3
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	3303      	adds	r3, #3
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	061b      	lsls	r3, r3, #24
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	1d1a      	adds	r2, r3, #4
 800705c:	633a      	str	r2, [r7, #48]	@ 0x30
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	4053      	eors	r3, r2
 8007064:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	3304      	adds	r3, #4
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	3305      	adds	r3, #5
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	431a      	orrs	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	3306      	adds	r3, #6
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	041b      	lsls	r3, r3, #16
 8007080:	431a      	orrs	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	3307      	adds	r3, #7
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	061b      	lsls	r3, r3, #24
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	1d1a      	adds	r2, r3, #4
 8007092:	633a      	str	r2, [r7, #48]	@ 0x30
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	4053      	eors	r3, r2
 800709a:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	3308      	adds	r3, #8
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	3309      	adds	r3, #9
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	431a      	orrs	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	330a      	adds	r3, #10
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	041b      	lsls	r3, r3, #16
 80070b6:	431a      	orrs	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	330b      	adds	r3, #11
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	061b      	lsls	r3, r3, #24
 80070c0:	4313      	orrs	r3, r2
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c6:	1d1a      	adds	r2, r3, #4
 80070c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	4053      	eors	r3, r2
 80070d0:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	330c      	adds	r3, #12
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	330d      	adds	r3, #13
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	431a      	orrs	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	330e      	adds	r3, #14
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	041b      	lsls	r3, r3, #16
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	330f      	adds	r3, #15
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	061b      	lsls	r3, r3, #24
 80070f6:	4313      	orrs	r3, r2
 80070f8:	61fb      	str	r3, [r7, #28]
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	1d1a      	adds	r2, r3, #4
 80070fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4053      	eors	r3, r2
 8007106:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	105b      	asrs	r3, r3, #1
 800710e:	3b01      	subs	r3, #1
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
 8007112:	e122      	b.n	800735a <mbedtls_internal_aes_decrypt+0x33a>
    {
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	1d1a      	adds	r2, r3, #4
 8007118:	633a      	str	r2, [r7, #48]	@ 0x30
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	4619      	mov	r1, r3
 8007122:	4bb0      	ldr	r3, [pc, #704]	@ (80073e4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8007124:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007128:	405a      	eors	r2, r3
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	0a1b      	lsrs	r3, r3, #8
 800712e:	b2db      	uxtb	r3, r3
 8007130:	4619      	mov	r1, r3
 8007132:	4bad      	ldr	r3, [pc, #692]	@ (80073e8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8007134:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007138:	405a      	eors	r2, r3
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	0c1b      	lsrs	r3, r3, #16
 800713e:	b2db      	uxtb	r3, r3
 8007140:	4619      	mov	r1, r3
 8007142:	4baa      	ldr	r3, [pc, #680]	@ (80073ec <mbedtls_internal_aes_decrypt+0x3cc>)
 8007144:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007148:	405a      	eors	r2, r3
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	0e1b      	lsrs	r3, r3, #24
 800714e:	b2db      	uxtb	r3, r3
 8007150:	4619      	mov	r1, r3
 8007152:	4ba7      	ldr	r3, [pc, #668]	@ (80073f0 <mbedtls_internal_aes_decrypt+0x3d0>)
 8007154:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007158:	4053      	eors	r3, r2
 800715a:	623b      	str	r3, [r7, #32]
 800715c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715e:	1d1a      	adds	r2, r3, #4
 8007160:	633a      	str	r2, [r7, #48]	@ 0x30
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	4619      	mov	r1, r3
 800716a:	4b9e      	ldr	r3, [pc, #632]	@ (80073e4 <mbedtls_internal_aes_decrypt+0x3c4>)
 800716c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007170:	405a      	eors	r2, r3
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	0a1b      	lsrs	r3, r3, #8
 8007176:	b2db      	uxtb	r3, r3
 8007178:	4619      	mov	r1, r3
 800717a:	4b9b      	ldr	r3, [pc, #620]	@ (80073e8 <mbedtls_internal_aes_decrypt+0x3c8>)
 800717c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007180:	405a      	eors	r2, r3
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	0c1b      	lsrs	r3, r3, #16
 8007186:	b2db      	uxtb	r3, r3
 8007188:	4619      	mov	r1, r3
 800718a:	4b98      	ldr	r3, [pc, #608]	@ (80073ec <mbedtls_internal_aes_decrypt+0x3cc>)
 800718c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007190:	405a      	eors	r2, r3
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	0e1b      	lsrs	r3, r3, #24
 8007196:	b2db      	uxtb	r3, r3
 8007198:	4619      	mov	r1, r3
 800719a:	4b95      	ldr	r3, [pc, #596]	@ (80073f0 <mbedtls_internal_aes_decrypt+0x3d0>)
 800719c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071a0:	4053      	eors	r3, r2
 80071a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	1d1a      	adds	r2, r3, #4
 80071a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	4619      	mov	r1, r3
 80071b2:	4b8c      	ldr	r3, [pc, #560]	@ (80073e4 <mbedtls_internal_aes_decrypt+0x3c4>)
 80071b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071b8:	405a      	eors	r2, r3
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	0a1b      	lsrs	r3, r3, #8
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	4b89      	ldr	r3, [pc, #548]	@ (80073e8 <mbedtls_internal_aes_decrypt+0x3c8>)
 80071c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071c8:	405a      	eors	r2, r3
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	0c1b      	lsrs	r3, r3, #16
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	4619      	mov	r1, r3
 80071d2:	4b86      	ldr	r3, [pc, #536]	@ (80073ec <mbedtls_internal_aes_decrypt+0x3cc>)
 80071d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071d8:	405a      	eors	r2, r3
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	0e1b      	lsrs	r3, r3, #24
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	4619      	mov	r1, r3
 80071e2:	4b83      	ldr	r3, [pc, #524]	@ (80073f0 <mbedtls_internal_aes_decrypt+0x3d0>)
 80071e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071e8:	4053      	eors	r3, r2
 80071ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ee:	1d1a      	adds	r2, r3, #4
 80071f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	4619      	mov	r1, r3
 80071fa:	4b7a      	ldr	r3, [pc, #488]	@ (80073e4 <mbedtls_internal_aes_decrypt+0x3c4>)
 80071fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007200:	405a      	eors	r2, r3
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	0a1b      	lsrs	r3, r3, #8
 8007206:	b2db      	uxtb	r3, r3
 8007208:	4619      	mov	r1, r3
 800720a:	4b77      	ldr	r3, [pc, #476]	@ (80073e8 <mbedtls_internal_aes_decrypt+0x3c8>)
 800720c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007210:	405a      	eors	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	b2db      	uxtb	r3, r3
 8007218:	4619      	mov	r1, r3
 800721a:	4b74      	ldr	r3, [pc, #464]	@ (80073ec <mbedtls_internal_aes_decrypt+0x3cc>)
 800721c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007220:	405a      	eors	r2, r3
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	0e1b      	lsrs	r3, r3, #24
 8007226:	b2db      	uxtb	r3, r3
 8007228:	4619      	mov	r1, r3
 800722a:	4b71      	ldr	r3, [pc, #452]	@ (80073f0 <mbedtls_internal_aes_decrypt+0x3d0>)
 800722c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007230:	4053      	eors	r3, r2
 8007232:	62fb      	str	r3, [r7, #44]	@ 0x2c
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8007234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007236:	1d1a      	adds	r2, r3, #4
 8007238:	633a      	str	r2, [r7, #48]	@ 0x30
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	4619      	mov	r1, r3
 8007242:	4b68      	ldr	r3, [pc, #416]	@ (80073e4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8007244:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007248:	405a      	eors	r2, r3
 800724a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724c:	0a1b      	lsrs	r3, r3, #8
 800724e:	b2db      	uxtb	r3, r3
 8007250:	4619      	mov	r1, r3
 8007252:	4b65      	ldr	r3, [pc, #404]	@ (80073e8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8007254:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007258:	405a      	eors	r2, r3
 800725a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725c:	0c1b      	lsrs	r3, r3, #16
 800725e:	b2db      	uxtb	r3, r3
 8007260:	4619      	mov	r1, r3
 8007262:	4b62      	ldr	r3, [pc, #392]	@ (80073ec <mbedtls_internal_aes_decrypt+0x3cc>)
 8007264:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007268:	405a      	eors	r2, r3
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	0e1b      	lsrs	r3, r3, #24
 800726e:	b2db      	uxtb	r3, r3
 8007270:	4619      	mov	r1, r3
 8007272:	4b5f      	ldr	r3, [pc, #380]	@ (80073f0 <mbedtls_internal_aes_decrypt+0x3d0>)
 8007274:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007278:	4053      	eors	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727e:	1d1a      	adds	r2, r3, #4
 8007280:	633a      	str	r2, [r7, #48]	@ 0x30
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	b2db      	uxtb	r3, r3
 8007288:	4619      	mov	r1, r3
 800728a:	4b56      	ldr	r3, [pc, #344]	@ (80073e4 <mbedtls_internal_aes_decrypt+0x3c4>)
 800728c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007290:	405a      	eors	r2, r3
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	0a1b      	lsrs	r3, r3, #8
 8007296:	b2db      	uxtb	r3, r3
 8007298:	4619      	mov	r1, r3
 800729a:	4b53      	ldr	r3, [pc, #332]	@ (80073e8 <mbedtls_internal_aes_decrypt+0x3c8>)
 800729c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072a0:	405a      	eors	r2, r3
 80072a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a4:	0c1b      	lsrs	r3, r3, #16
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	4619      	mov	r1, r3
 80072aa:	4b50      	ldr	r3, [pc, #320]	@ (80073ec <mbedtls_internal_aes_decrypt+0x3cc>)
 80072ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072b0:	405a      	eors	r2, r3
 80072b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b4:	0e1b      	lsrs	r3, r3, #24
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	4619      	mov	r1, r3
 80072ba:	4b4d      	ldr	r3, [pc, #308]	@ (80073f0 <mbedtls_internal_aes_decrypt+0x3d0>)
 80072bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072c0:	4053      	eors	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	1d1a      	adds	r2, r3, #4
 80072c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	4619      	mov	r1, r3
 80072d2:	4b44      	ldr	r3, [pc, #272]	@ (80073e4 <mbedtls_internal_aes_decrypt+0x3c4>)
 80072d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072d8:	405a      	eors	r2, r3
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	0a1b      	lsrs	r3, r3, #8
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	4619      	mov	r1, r3
 80072e2:	4b41      	ldr	r3, [pc, #260]	@ (80073e8 <mbedtls_internal_aes_decrypt+0x3c8>)
 80072e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072e8:	405a      	eors	r2, r3
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	0c1b      	lsrs	r3, r3, #16
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	4619      	mov	r1, r3
 80072f2:	4b3e      	ldr	r3, [pc, #248]	@ (80073ec <mbedtls_internal_aes_decrypt+0x3cc>)
 80072f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072f8:	405a      	eors	r2, r3
 80072fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fc:	0e1b      	lsrs	r3, r3, #24
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	4619      	mov	r1, r3
 8007302:	4b3b      	ldr	r3, [pc, #236]	@ (80073f0 <mbedtls_internal_aes_decrypt+0x3d0>)
 8007304:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007308:	4053      	eors	r3, r2
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730e:	1d1a      	adds	r2, r3, #4
 8007310:	633a      	str	r2, [r7, #48]	@ 0x30
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007316:	b2db      	uxtb	r3, r3
 8007318:	4619      	mov	r1, r3
 800731a:	4b32      	ldr	r3, [pc, #200]	@ (80073e4 <mbedtls_internal_aes_decrypt+0x3c4>)
 800731c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007320:	405a      	eors	r2, r3
 8007322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007324:	0a1b      	lsrs	r3, r3, #8
 8007326:	b2db      	uxtb	r3, r3
 8007328:	4619      	mov	r1, r3
 800732a:	4b2f      	ldr	r3, [pc, #188]	@ (80073e8 <mbedtls_internal_aes_decrypt+0x3c8>)
 800732c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007330:	405a      	eors	r2, r3
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	0c1b      	lsrs	r3, r3, #16
 8007336:	b2db      	uxtb	r3, r3
 8007338:	4619      	mov	r1, r3
 800733a:	4b2c      	ldr	r3, [pc, #176]	@ (80073ec <mbedtls_internal_aes_decrypt+0x3cc>)
 800733c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007340:	405a      	eors	r2, r3
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	0e1b      	lsrs	r3, r3, #24
 8007346:	b2db      	uxtb	r3, r3
 8007348:	4619      	mov	r1, r3
 800734a:	4b29      	ldr	r3, [pc, #164]	@ (80073f0 <mbedtls_internal_aes_decrypt+0x3d0>)
 800734c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007350:	4053      	eors	r3, r2
 8007352:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8007354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007356:	3b01      	subs	r3, #1
 8007358:	637b      	str	r3, [r7, #52]	@ 0x34
 800735a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735c:	2b00      	cmp	r3, #0
 800735e:	f73f aed9 	bgt.w	8007114 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8007362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007364:	1d1a      	adds	r2, r3, #4
 8007366:	633a      	str	r2, [r7, #48]	@ 0x30
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	4619      	mov	r1, r3
 8007370:	4b1c      	ldr	r3, [pc, #112]	@ (80073e4 <mbedtls_internal_aes_decrypt+0x3c4>)
 8007372:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007376:	405a      	eors	r2, r3
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	0a1b      	lsrs	r3, r3, #8
 800737c:	b2db      	uxtb	r3, r3
 800737e:	4619      	mov	r1, r3
 8007380:	4b19      	ldr	r3, [pc, #100]	@ (80073e8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8007382:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007386:	405a      	eors	r2, r3
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	0c1b      	lsrs	r3, r3, #16
 800738c:	b2db      	uxtb	r3, r3
 800738e:	4619      	mov	r1, r3
 8007390:	4b16      	ldr	r3, [pc, #88]	@ (80073ec <mbedtls_internal_aes_decrypt+0x3cc>)
 8007392:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007396:	405a      	eors	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	0e1b      	lsrs	r3, r3, #24
 800739c:	b2db      	uxtb	r3, r3
 800739e:	4619      	mov	r1, r3
 80073a0:	4b13      	ldr	r3, [pc, #76]	@ (80073f0 <mbedtls_internal_aes_decrypt+0x3d0>)
 80073a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073a6:	4053      	eors	r3, r2
 80073a8:	623b      	str	r3, [r7, #32]
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	1d1a      	adds	r2, r3, #4
 80073ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	4619      	mov	r1, r3
 80073b8:	4b0a      	ldr	r3, [pc, #40]	@ (80073e4 <mbedtls_internal_aes_decrypt+0x3c4>)
 80073ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073be:	405a      	eors	r2, r3
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	0a1b      	lsrs	r3, r3, #8
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	4619      	mov	r1, r3
 80073c8:	4b07      	ldr	r3, [pc, #28]	@ (80073e8 <mbedtls_internal_aes_decrypt+0x3c8>)
 80073ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073ce:	405a      	eors	r2, r3
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	0c1b      	lsrs	r3, r3, #16
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	4619      	mov	r1, r3
 80073d8:	4b04      	ldr	r3, [pc, #16]	@ (80073ec <mbedtls_internal_aes_decrypt+0x3cc>)
 80073da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073de:	405a      	eors	r2, r3
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	e007      	b.n	80073f4 <mbedtls_internal_aes_decrypt+0x3d4>
 80073e4:	20001578 	.word	0x20001578
 80073e8:	20001978 	.word	0x20001978
 80073ec:	20001d78 	.word	0x20001d78
 80073f0:	20002178 	.word	0x20002178
 80073f4:	0e1b      	lsrs	r3, r3, #24
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	4619      	mov	r1, r3
 80073fa:	4b9f      	ldr	r3, [pc, #636]	@ (8007678 <mbedtls_internal_aes_decrypt+0x658>)
 80073fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007400:	4053      	eors	r3, r2
 8007402:	627b      	str	r3, [r7, #36]	@ 0x24
 8007404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007406:	1d1a      	adds	r2, r3, #4
 8007408:	633a      	str	r2, [r7, #48]	@ 0x30
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	4619      	mov	r1, r3
 8007412:	4b9a      	ldr	r3, [pc, #616]	@ (800767c <mbedtls_internal_aes_decrypt+0x65c>)
 8007414:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007418:	405a      	eors	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	0a1b      	lsrs	r3, r3, #8
 800741e:	b2db      	uxtb	r3, r3
 8007420:	4619      	mov	r1, r3
 8007422:	4b97      	ldr	r3, [pc, #604]	@ (8007680 <mbedtls_internal_aes_decrypt+0x660>)
 8007424:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007428:	405a      	eors	r2, r3
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	0c1b      	lsrs	r3, r3, #16
 800742e:	b2db      	uxtb	r3, r3
 8007430:	4619      	mov	r1, r3
 8007432:	4b94      	ldr	r3, [pc, #592]	@ (8007684 <mbedtls_internal_aes_decrypt+0x664>)
 8007434:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007438:	405a      	eors	r2, r3
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	0e1b      	lsrs	r3, r3, #24
 800743e:	b2db      	uxtb	r3, r3
 8007440:	4619      	mov	r1, r3
 8007442:	4b8d      	ldr	r3, [pc, #564]	@ (8007678 <mbedtls_internal_aes_decrypt+0x658>)
 8007444:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007448:	4053      	eors	r3, r2
 800744a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800744c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	633a      	str	r2, [r7, #48]	@ 0x30
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	4619      	mov	r1, r3
 800745a:	4b88      	ldr	r3, [pc, #544]	@ (800767c <mbedtls_internal_aes_decrypt+0x65c>)
 800745c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007460:	405a      	eors	r2, r3
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	0a1b      	lsrs	r3, r3, #8
 8007466:	b2db      	uxtb	r3, r3
 8007468:	4619      	mov	r1, r3
 800746a:	4b85      	ldr	r3, [pc, #532]	@ (8007680 <mbedtls_internal_aes_decrypt+0x660>)
 800746c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007470:	405a      	eors	r2, r3
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	0c1b      	lsrs	r3, r3, #16
 8007476:	b2db      	uxtb	r3, r3
 8007478:	4619      	mov	r1, r3
 800747a:	4b82      	ldr	r3, [pc, #520]	@ (8007684 <mbedtls_internal_aes_decrypt+0x664>)
 800747c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007480:	405a      	eors	r2, r3
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	0e1b      	lsrs	r3, r3, #24
 8007486:	b2db      	uxtb	r3, r3
 8007488:	4619      	mov	r1, r3
 800748a:	4b7b      	ldr	r3, [pc, #492]	@ (8007678 <mbedtls_internal_aes_decrypt+0x658>)
 800748c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007490:	4053      	eors	r3, r2
 8007492:	62fb      	str	r3, [r7, #44]	@ 0x2c

    t.X[0] = *RK++ ^ \
 8007494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007496:	1d1a      	adds	r2, r3, #4
 8007498:	633a      	str	r2, [r7, #48]	@ 0x30
 800749a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 800749c:	6a3a      	ldr	r2, [r7, #32]
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	4611      	mov	r1, r2
 80074a2:	4a79      	ldr	r2, [pc, #484]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 80074a4:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 80074a6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	0a1b      	lsrs	r3, r3, #8
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	4619      	mov	r1, r3
 80074b0:	4b75      	ldr	r3, [pc, #468]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 80074b2:	5c5b      	ldrb	r3, [r3, r1]
 80074b4:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 80074b6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 80074b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ba:	0c1b      	lsrs	r3, r3, #16
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	4619      	mov	r1, r3
 80074c0:	4b71      	ldr	r3, [pc, #452]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 80074c2:	5c5b      	ldrb	r3, [r3, r1]
 80074c4:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 80074c6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	0e1b      	lsrs	r3, r3, #24
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	4619      	mov	r1, r3
 80074d0:	4b6d      	ldr	r3, [pc, #436]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 80074d2:	5c5b      	ldrb	r3, [r3, r1]
 80074d4:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 80074d6:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 80074d8:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	1d1a      	adds	r2, r3, #4
 80074de:	633a      	str	r2, [r7, #48]	@ 0x30
 80074e0:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 80074e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	4611      	mov	r1, r2
 80074e8:	4a67      	ldr	r2, [pc, #412]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 80074ea:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 80074ec:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	0a1b      	lsrs	r3, r3, #8
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	4619      	mov	r1, r3
 80074f6:	4b64      	ldr	r3, [pc, #400]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 80074f8:	5c5b      	ldrb	r3, [r3, r1]
 80074fa:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 80074fc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 80074fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007500:	0c1b      	lsrs	r3, r3, #16
 8007502:	b2db      	uxtb	r3, r3
 8007504:	4619      	mov	r1, r3
 8007506:	4b60      	ldr	r3, [pc, #384]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 8007508:	5c5b      	ldrb	r3, [r3, r1]
 800750a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 800750c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 800750e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007510:	0e1b      	lsrs	r3, r3, #24
 8007512:	b2db      	uxtb	r3, r3
 8007514:	4619      	mov	r1, r3
 8007516:	4b5c      	ldr	r3, [pc, #368]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 8007518:	5c5b      	ldrb	r3, [r3, r1]
 800751a:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 800751c:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 800751e:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 8007520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007522:	1d1a      	adds	r2, r3, #4
 8007524:	633a      	str	r2, [r7, #48]	@ 0x30
 8007526:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8007528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	4611      	mov	r1, r2
 800752e:	4a56      	ldr	r2, [pc, #344]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 8007530:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8007532:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	0a1b      	lsrs	r3, r3, #8
 8007538:	b2db      	uxtb	r3, r3
 800753a:	4619      	mov	r1, r3
 800753c:	4b52      	ldr	r3, [pc, #328]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 800753e:	5c5b      	ldrb	r3, [r3, r1]
 8007540:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8007542:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	0c1b      	lsrs	r3, r3, #16
 8007548:	b2db      	uxtb	r3, r3
 800754a:	4619      	mov	r1, r3
 800754c:	4b4e      	ldr	r3, [pc, #312]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 800754e:	5c5b      	ldrb	r3, [r3, r1]
 8007550:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8007552:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 8007554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007556:	0e1b      	lsrs	r3, r3, #24
 8007558:	b2db      	uxtb	r3, r3
 800755a:	4619      	mov	r1, r3
 800755c:	4b4a      	ldr	r3, [pc, #296]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 800755e:	5c5b      	ldrb	r3, [r3, r1]
 8007560:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8007562:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8007564:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	1d1a      	adds	r2, r3, #4
 800756a:	633a      	str	r2, [r7, #48]	@ 0x30
 800756c:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 800756e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	4611      	mov	r1, r2
 8007574:	4a44      	ldr	r2, [pc, #272]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 8007576:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 8007578:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	0a1b      	lsrs	r3, r3, #8
 800757e:	b2db      	uxtb	r3, r3
 8007580:	4619      	mov	r1, r3
 8007582:	4b41      	ldr	r3, [pc, #260]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 8007584:	5c5b      	ldrb	r3, [r3, r1]
 8007586:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8007588:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	0c1b      	lsrs	r3, r3, #16
 800758e:	b2db      	uxtb	r3, r3
 8007590:	4619      	mov	r1, r3
 8007592:	4b3d      	ldr	r3, [pc, #244]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 8007594:	5c5b      	ldrb	r3, [r3, r1]
 8007596:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8007598:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	0e1b      	lsrs	r3, r3, #24
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	4619      	mov	r1, r3
 80075a2:	4b39      	ldr	r3, [pc, #228]	@ (8007688 <mbedtls_internal_aes_decrypt+0x668>)
 80075a4:	5c5b      	ldrb	r3, [r3, r1]
 80075a6:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 80075a8:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 80075aa:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	701a      	strb	r2, [r3, #0]
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	0a1a      	lsrs	r2, r3, #8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3301      	adds	r3, #1
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	0c1a      	lsrs	r2, r3, #16
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3302      	adds	r3, #2
 80075c8:	b2d2      	uxtb	r2, r2
 80075ca:	701a      	strb	r2, [r3, #0]
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	0e1a      	lsrs	r2, r3, #24
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3303      	adds	r3, #3
 80075d4:	b2d2      	uxtb	r2, r2
 80075d6:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3304      	adds	r3, #4
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	0a1a      	lsrs	r2, r3, #8
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3305      	adds	r3, #5
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	701a      	strb	r2, [r3, #0]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	0c1a      	lsrs	r2, r3, #16
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3306      	adds	r3, #6
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	0e1a      	lsrs	r2, r3, #24
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3307      	adds	r3, #7
 8007602:	b2d2      	uxtb	r2, r2
 8007604:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3308      	adds	r3, #8
 800760c:	b2d2      	uxtb	r2, r2
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	0a1a      	lsrs	r2, r3, #8
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3309      	adds	r3, #9
 8007618:	b2d2      	uxtb	r2, r2
 800761a:	701a      	strb	r2, [r3, #0]
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	0c1a      	lsrs	r2, r3, #16
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	330a      	adds	r3, #10
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	0e1a      	lsrs	r2, r3, #24
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	330b      	adds	r3, #11
 8007630:	b2d2      	uxtb	r2, r2
 8007632:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	330c      	adds	r3, #12
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	701a      	strb	r2, [r3, #0]
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	0a1a      	lsrs	r2, r3, #8
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	330d      	adds	r3, #13
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	701a      	strb	r2, [r3, #0]
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	0c1a      	lsrs	r2, r3, #16
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	330e      	adds	r3, #14
 8007652:	b2d2      	uxtb	r2, r2
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	0e1a      	lsrs	r2, r3, #24
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	330f      	adds	r3, #15
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8007662:	f107 0310 	add.w	r3, r7, #16
 8007666:	2120      	movs	r1, #32
 8007668:	4618      	mov	r0, r3
 800766a:	f000 fc57 	bl	8007f1c <mbedtls_platform_zeroize>

    return( 0 );
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3738      	adds	r7, #56	@ 0x38
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20002178 	.word	0x20002178
 800767c:	20001578 	.word	0x20001578
 8007680:	20001978 	.word	0x20001978
 8007684:	20001d78 	.word	0x20001d78
 8007688:	20001478 	.word	0x20001478

0800768c <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d106      	bne.n	80076ae <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff f985 	bl	80069b4 <mbedtls_internal_aes_encrypt>
 80076aa:	4603      	mov	r3, r0
 80076ac:	e005      	b.n	80076ba <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f7ff fcb4 	bl	8007020 <mbedtls_internal_aes_decrypt>
 80076b8:	4603      	mov	r3, r0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <mbedtls_des_init>:
    {                                                   \
        uint32_t t = (a); (a) = (b); (b) = t; t = 0;    \
    } while( 0 )

void mbedtls_des_init( mbedtls_des_context *ctx )
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_des_context ) );
 80076ca:	2280      	movs	r2, #128	@ 0x80
 80076cc:	2100      	movs	r1, #0
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fc38 	bl	8007f44 <memset>
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <mbedtls_des_setkey>:
    return( 0 );
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey( uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t X, Y, T;

    X = MBEDTLS_GET_UINT32_BE( key, 0 );
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	061a      	lsls	r2, r3, #24
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	3301      	adds	r3, #1
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	041b      	lsls	r3, r3, #16
 80076f4:	431a      	orrs	r2, r3
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	3302      	adds	r3, #2
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	021b      	lsls	r3, r3, #8
 80076fe:	4313      	orrs	r3, r2
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	3203      	adds	r2, #3
 8007704:	7812      	ldrb	r2, [r2, #0]
 8007706:	4313      	orrs	r3, r2
 8007708:	613b      	str	r3, [r7, #16]
    Y = MBEDTLS_GET_UINT32_BE( key, 4 );
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	3304      	adds	r3, #4
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	061a      	lsls	r2, r3, #24
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	3305      	adds	r3, #5
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	041b      	lsls	r3, r3, #16
 800771a:	431a      	orrs	r2, r3
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	3306      	adds	r3, #6
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	021b      	lsls	r3, r3, #8
 8007724:	4313      	orrs	r3, r2
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	3207      	adds	r2, #7
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	4313      	orrs	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]

    /*
     * Permuted Choice 1
     */
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	091a      	lsrs	r2, r3, #4
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	4053      	eors	r3, r2
 8007738:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800773c:	60bb      	str	r3, [r7, #8]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4053      	eors	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	4053      	eors	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
    T =  ((Y      ) ^ X) & 0x10101010;  X ^= T; Y ^= (T      );
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	4053      	eors	r3, r2
 8007756:	f003 3310 	and.w	r3, r3, #269488144	@ 0x10101010
 800775a:	60bb      	str	r3, [r7, #8]
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4053      	eors	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4053      	eors	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]

    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f003 030f 	and.w	r3, r3, #15
 8007772:	4a55      	ldr	r2, [pc, #340]	@ (80078c8 <mbedtls_des_setkey+0x1ec>)
 8007774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007778:	00da      	lsls	r2, r3, #3
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	0a1b      	lsrs	r3, r3, #8
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	4951      	ldr	r1, [pc, #324]	@ (80078c8 <mbedtls_des_setkey+0x1ec>)
 8007784:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	431a      	orrs	r2, r3
        | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	0c1b      	lsrs	r3, r3, #16
 8007790:	f003 030f 	and.w	r3, r3, #15
 8007794:	494c      	ldr	r1, [pc, #304]	@ (80078c8 <mbedtls_des_setkey+0x1ec>)
 8007796:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	431a      	orrs	r2, r3
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	0e1b      	lsrs	r3, r3, #24
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	4948      	ldr	r1, [pc, #288]	@ (80078c8 <mbedtls_des_setkey+0x1ec>)
 80077a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80077ac:	431a      	orrs	r2, r3
        | (LHs[ (X >>  5) & 0xF] << 7) | (LHs[ (X >> 13) & 0xF ] << 6)
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	095b      	lsrs	r3, r3, #5
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	4944      	ldr	r1, [pc, #272]	@ (80078c8 <mbedtls_des_setkey+0x1ec>)
 80077b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80077bc:	01db      	lsls	r3, r3, #7
 80077be:	431a      	orrs	r2, r3
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	0b5b      	lsrs	r3, r3, #13
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	493f      	ldr	r1, [pc, #252]	@ (80078c8 <mbedtls_des_setkey+0x1ec>)
 80077ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80077ce:	019b      	lsls	r3, r3, #6
 80077d0:	431a      	orrs	r2, r3
        | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	0d5b      	lsrs	r3, r3, #21
 80077d6:	f003 030f 	and.w	r3, r3, #15
 80077da:	493b      	ldr	r1, [pc, #236]	@ (80078c8 <mbedtls_des_setkey+0x1ec>)
 80077dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80077e0:	015b      	lsls	r3, r3, #5
 80077e2:	431a      	orrs	r2, r3
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	0f5b      	lsrs	r3, r3, #29
 80077e8:	4937      	ldr	r1, [pc, #220]	@ (80078c8 <mbedtls_des_setkey+0x1ec>)
 80077ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80077ee:	011b      	lsls	r3, r3, #4
    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	613b      	str	r3, [r7, #16]

    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	085b      	lsrs	r3, r3, #1
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	4a33      	ldr	r2, [pc, #204]	@ (80078cc <mbedtls_des_setkey+0x1f0>)
 80077fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007802:	00da      	lsls	r2, r3, #3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	0a5b      	lsrs	r3, r3, #9
 8007808:	f003 030f 	and.w	r3, r3, #15
 800780c:	492f      	ldr	r1, [pc, #188]	@ (80078cc <mbedtls_des_setkey+0x1f0>)
 800780e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	0c5b      	lsrs	r3, r3, #17
 800781a:	f003 030f 	and.w	r3, r3, #15
 800781e:	492b      	ldr	r1, [pc, #172]	@ (80078cc <mbedtls_des_setkey+0x1f0>)
 8007820:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	431a      	orrs	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	0e5b      	lsrs	r3, r3, #25
 800782c:	f003 030f 	and.w	r3, r3, #15
 8007830:	4926      	ldr	r1, [pc, #152]	@ (80078cc <mbedtls_des_setkey+0x1f0>)
 8007832:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007836:	431a      	orrs	r2, r3
        | (RHs[ (Y >>  4) & 0xF] << 7) | (RHs[ (Y >> 12) & 0xF ] << 6)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	4922      	ldr	r1, [pc, #136]	@ (80078cc <mbedtls_des_setkey+0x1f0>)
 8007842:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007846:	01db      	lsls	r3, r3, #7
 8007848:	431a      	orrs	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	0b1b      	lsrs	r3, r3, #12
 800784e:	f003 030f 	and.w	r3, r3, #15
 8007852:	491e      	ldr	r1, [pc, #120]	@ (80078cc <mbedtls_des_setkey+0x1f0>)
 8007854:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007858:	019b      	lsls	r3, r3, #6
 800785a:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	0d1b      	lsrs	r3, r3, #20
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	4919      	ldr	r1, [pc, #100]	@ (80078cc <mbedtls_des_setkey+0x1f0>)
 8007866:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800786a:	015b      	lsls	r3, r3, #5
 800786c:	431a      	orrs	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	0f1b      	lsrs	r3, r3, #28
 8007872:	4916      	ldr	r1, [pc, #88]	@ (80078cc <mbedtls_des_setkey+0x1f0>)
 8007874:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007878:	011b      	lsls	r3, r3, #4
    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]

    X &= 0x0FFFFFFF;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007884:	613b      	str	r3, [r7, #16]
    Y &= 0x0FFFFFFF;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800788c:	60fb      	str	r3, [r7, #12]

    /*
     * calculate subkeys
     */
    for( i = 0; i < 16; i++ )
 800788e:	2300      	movs	r3, #0
 8007890:	617b      	str	r3, [r7, #20]
 8007892:	e113      	b.n	8007abc <mbedtls_des_setkey+0x3e0>
    {
        if( i < 2 || i == 8 || i == 15 )
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b01      	cmp	r3, #1
 8007898:	dd05      	ble.n	80078a6 <mbedtls_des_setkey+0x1ca>
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2b08      	cmp	r3, #8
 800789e:	d002      	beq.n	80078a6 <mbedtls_des_setkey+0x1ca>
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	2b0f      	cmp	r3, #15
 80078a4:	d114      	bne.n	80078d0 <mbedtls_des_setkey+0x1f4>
        {
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	005a      	lsls	r2, r3, #1
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	0edb      	lsrs	r3, r3, #27
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80078b4:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	005a      	lsls	r2, r3, #1
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	0edb      	lsrs	r3, r3, #27
 80078be:	4313      	orrs	r3, r2
 80078c0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	e013      	b.n	80078f0 <mbedtls_des_setkey+0x214>
 80078c8:	080087cc 	.word	0x080087cc
 80078cc:	0800880c 	.word	0x0800880c
        }
        else
        {
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	009a      	lsls	r2, r3, #2
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	0e9b      	lsrs	r3, r3, #26
 80078d8:	4313      	orrs	r3, r2
 80078da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80078de:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	009a      	lsls	r2, r3, #2
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	0e9b      	lsrs	r3, r3, #26
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80078ee:	60fb      	str	r3, [r7, #12]
        }

        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	011b      	lsls	r3, r3, #4
 80078f4:	f003 5210 	and.w	r2, r3, #603979776	@ 0x24000000
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	071b      	lsls	r3, r3, #28
 80078fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007900:	431a      	orrs	r2, r3
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	039b      	lsls	r3, r3, #14
 8007906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800790a:	431a      	orrs	r2, r3
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	049b      	lsls	r3, r3, #18
 8007910:	f003 7302 	and.w	r3, r3, #34078720	@ 0x2080000
 8007914:	431a      	orrs	r2, r3
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	019b      	lsls	r3, r3, #6
 800791a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800791e:	431a      	orrs	r2, r3
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	025b      	lsls	r3, r3, #9
 8007924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007928:	431a      	orrs	r2, r3
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	085b      	lsrs	r3, r3, #1
 800792e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007932:	431a      	orrs	r2, r3
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	029b      	lsls	r3, r3, #10
 8007938:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800793c:	431a      	orrs	r2, r3
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007946:	431a      	orrs	r2, r3
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	0a9b      	lsrs	r3, r3, #10
 800794c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007950:	431a      	orrs	r2, r3
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	0b5b      	lsrs	r3, r3, #13
 8007956:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800795a:	431a      	orrs	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	091b      	lsrs	r3, r3, #4
 8007960:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007964:	431a      	orrs	r2, r3
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	019b      	lsls	r3, r3, #6
 800796a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800796e:	431a      	orrs	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007978:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	0b9b      	lsrs	r3, r3, #14
 800797e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007982:	431a      	orrs	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800798a:	431a      	orrs	r2, r3
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	095b      	lsrs	r3, r3, #5
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	431a      	orrs	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	0a9b      	lsrs	r3, r3, #10
 800799a:	f003 0310 	and.w	r3, r3, #16
 800799e:	431a      	orrs	r2, r3
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	08db      	lsrs	r3, r3, #3
 80079a4:	f003 0308 	and.w	r3, r3, #8
 80079a8:	431a      	orrs	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	0c9b      	lsrs	r3, r3, #18
 80079ae:	f003 0304 	and.w	r3, r3, #4
 80079b2:	431a      	orrs	r2, r3
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	0e9b      	lsrs	r3, r3, #26
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	ea42 0103 	orr.w	r1, r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	0e1b      	lsrs	r3, r3, #24
 80079c4:	f003 0201 	and.w	r2, r3, #1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	1d18      	adds	r0, r3, #4
 80079cc:	6078      	str	r0, [r7, #4]
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 80079ce:	430a      	orrs	r2, r1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 80079d0:	601a      	str	r2, [r3, #0]

        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	03db      	lsls	r3, r3, #15
 80079d6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	045b      	lsls	r3, r3, #17
 80079de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079e2:	431a      	orrs	r2, r3
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	029b      	lsls	r3, r3, #10
 80079e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079ec:	431a      	orrs	r2, r3
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	059b      	lsls	r3, r3, #22
 80079f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079f6:	431a      	orrs	r2, r3
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	089b      	lsrs	r3, r3, #2
 80079fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a00:	431a      	orrs	r2, r3
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a0a:	431a      	orrs	r2, r3
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	041b      	lsls	r3, r3, #16
 8007a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a14:	431a      	orrs	r2, r3
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	02db      	lsls	r3, r3, #11
 8007a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a1e:	431a      	orrs	r2, r3
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	099b      	lsrs	r3, r3, #6
 8007a2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a32:	431a      	orrs	r2, r3
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	03db      	lsls	r3, r3, #15
 8007a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	091b      	lsrs	r3, r3, #4
 8007a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a46:	431a      	orrs	r2, r3
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	089b      	lsrs	r3, r3, #2
 8007a4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a50:	431a      	orrs	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	021b      	lsls	r3, r3, #8
 8007a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a5a:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	0b99      	lsrs	r1, r3, #14
 8007a60:	f640 0308 	movw	r3, #2056	@ 0x808
 8007a64:	400b      	ands	r3, r1
 8007a66:	431a      	orrs	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	0a5b      	lsrs	r3, r3, #9
 8007a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a70:	431a      	orrs	r2, r3
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	01db      	lsls	r3, r3, #7
 8007a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a82:	431a      	orrs	r2, r3
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	09db      	lsrs	r3, r3, #7
 8007a88:	f003 0320 	and.w	r3, r3, #32
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	08db      	lsrs	r3, r3, #3
 8007a92:	f003 0311 	and.w	r3, r3, #17
 8007a96:	431a      	orrs	r2, r3
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	ea42 0103 	orr.w	r1, r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	0d5b      	lsrs	r3, r3, #21
 8007aa8:	f003 0202 	and.w	r2, r3, #2
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	1d18      	adds	r0, r3, #4
 8007ab0:	6078      	str	r0, [r7, #4]
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 8007ab2:	430a      	orrs	r2, r1
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8007ab4:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i++ )
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b0f      	cmp	r3, #15
 8007ac0:	f77f aee8 	ble.w	8007894 <mbedtls_des_setkey+0x1b8>
    }
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop

08007ad4 <mbedtls_des_setkey_enc>:

/*
 * DES key schedule (56-bit, encryption)
 */
int mbedtls_des_setkey_enc( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
    mbedtls_des_setkey( ctx->sk, key );
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7ff fdfa 	bl	80076dc <mbedtls_des_setkey>

    return( 0 );
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <mbedtls_des_setkey_dec>:

/*
 * DES key schedule (56-bit, decryption)
 */
int mbedtls_des_setkey_dec( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b086      	sub	sp, #24
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	6039      	str	r1, [r7, #0]
    int i;

    mbedtls_des_setkey( ctx->sk, key );
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff fdeb 	bl	80076dc <mbedtls_des_setkey>

    for( i = 0; i < 16; i += 2 )
 8007b06:	2300      	movs	r3, #0
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	e034      	b.n	8007b76 <mbedtls_des_setkey_dec+0x84>
    {
        SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b14:	613b      	str	r3, [r7, #16]
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f1c3 021e 	rsb	r2, r3, #30
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f1c3 021e 	rsb	r2, r3, #30
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6939      	ldr	r1, [r7, #16]
 8007b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007b38:	2300      	movs	r3, #0
 8007b3a:	613b      	str	r3, [r7, #16]
        SWAP( ctx->sk[i + 1], ctx->sk[31 - i] );
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f1c3 011f 	rsb	r1, r3, #31
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f1c3 021f 	rsb	r2, r3, #31
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68f9      	ldr	r1, [r7, #12]
 8007b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]
    for( i = 0; i < 16; i += 2 )
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	3302      	adds	r3, #2
 8007b74:	617b      	str	r3, [r7, #20]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2b0f      	cmp	r3, #15
 8007b7a:	ddc7      	ble.n	8007b0c <mbedtls_des_setkey_dec+0x1a>
    }

    return( 0 );
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <mbedtls_des_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)
int mbedtls_des_crypt_ecb( mbedtls_des_context *ctx,
                    const unsigned char input[8],
                    unsigned char output[8] )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b08b      	sub	sp, #44	@ 0x2c
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	61bb      	str	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE( input, 0 );
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	061a      	lsls	r2, r3, #24
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	041b      	lsls	r3, r3, #16
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	3302      	adds	r3, #2
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	021b      	lsls	r3, r3, #8
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	3203      	adds	r2, #3
 8007bb6:	7812      	ldrb	r2, [r2, #0]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	623b      	str	r3, [r7, #32]
    Y = MBEDTLS_GET_UINT32_BE( input, 4 );
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	061a      	lsls	r2, r3, #24
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	3305      	adds	r3, #5
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	3306      	adds	r3, #6
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	021b      	lsls	r3, r3, #8
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	3207      	adds	r2, #7
 8007bdc:	7812      	ldrb	r2, [r2, #0]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	61fb      	str	r3, [r7, #28]

    DES_IP( X, Y );
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	091a      	lsrs	r2, r3, #4
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	4053      	eors	r3, r2
 8007bea:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8007bee:	617b      	str	r3, [r7, #20]
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	4053      	eors	r3, r2
 8007bf6:	61fb      	str	r3, [r7, #28]
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	6a3a      	ldr	r2, [r7, #32]
 8007bfe:	4053      	eors	r3, r2
 8007c00:	623b      	str	r3, [r7, #32]
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	0c1a      	lsrs	r2, r3, #16
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	4053      	eors	r3, r2
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	4053      	eors	r3, r2
 8007c14:	61fb      	str	r3, [r7, #28]
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	041b      	lsls	r3, r3, #16
 8007c1a:	6a3a      	ldr	r2, [r7, #32]
 8007c1c:	4053      	eors	r3, r2
 8007c1e:	623b      	str	r3, [r7, #32]
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	089a      	lsrs	r2, r3, #2
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	4053      	eors	r3, r2
 8007c28:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	6a3a      	ldr	r2, [r7, #32]
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	4053      	eors	r3, r2
 8007c34:	623b      	str	r3, [r7, #32]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	4053      	eors	r3, r2
 8007c3e:	61fb      	str	r3, [r7, #28]
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	0a1a      	lsrs	r2, r3, #8
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	4053      	eors	r3, r2
 8007c48:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	6a3a      	ldr	r2, [r7, #32]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	4053      	eors	r3, r2
 8007c54:	623b      	str	r3, [r7, #32]
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	021b      	lsls	r3, r3, #8
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	4053      	eors	r3, r2
 8007c5e:	61fb      	str	r3, [r7, #28]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8007c66:	61fb      	str	r3, [r7, #28]
 8007c68:	6a3a      	ldr	r2, [r7, #32]
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4053      	eors	r3, r2
 8007c6e:	f003 33aa 	and.w	r3, r3, #2863311530	@ 0xaaaaaaaa
 8007c72:	617b      	str	r3, [r7, #20]
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	4053      	eors	r3, r2
 8007c7a:	61fb      	str	r3, [r7, #28]
 8007c7c:	6a3a      	ldr	r2, [r7, #32]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	4053      	eors	r3, r2
 8007c82:	623b      	str	r3, [r7, #32]
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8007c8a:	623b      	str	r3, [r7, #32]

    for( i = 0; i < 8; i++ )
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c90:	e0a6      	b.n	8007de0 <mbedtls_des_crypt_ecb+0x258>
    {
        DES_ROUND( Y, X );
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	1d1a      	adds	r2, r3, #4
 8007c96:	61ba      	str	r2, [r7, #24]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	4053      	eors	r3, r2
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ca6:	4a95      	ldr	r2, [pc, #596]	@ (8007efc <mbedtls_des_crypt_ecb+0x374>)
 8007ca8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	0a1b      	lsrs	r3, r3, #8
 8007cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cb4:	4992      	ldr	r1, [pc, #584]	@ (8007f00 <mbedtls_des_crypt_ecb+0x378>)
 8007cb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007cba:	405a      	eors	r2, r3
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	0c1b      	lsrs	r3, r3, #16
 8007cc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cc4:	498f      	ldr	r1, [pc, #572]	@ (8007f04 <mbedtls_des_crypt_ecb+0x37c>)
 8007cc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007cca:	405a      	eors	r2, r3
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	0e1b      	lsrs	r3, r3, #24
 8007cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cd4:	498c      	ldr	r1, [pc, #560]	@ (8007f08 <mbedtls_des_crypt_ecb+0x380>)
 8007cd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007cda:	4053      	eors	r3, r2
 8007cdc:	6a3a      	ldr	r2, [r7, #32]
 8007cde:	4053      	eors	r3, r2
 8007ce0:	623b      	str	r3, [r7, #32]
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	1d1a      	adds	r2, r3, #4
 8007ce6:	61ba      	str	r2, [r7, #24]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	ea4f 1333 	mov.w	r3, r3, ror #4
 8007cf0:	4053      	eors	r3, r2
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cfa:	4a84      	ldr	r2, [pc, #528]	@ (8007f0c <mbedtls_des_crypt_ecb+0x384>)
 8007cfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	0a1b      	lsrs	r3, r3, #8
 8007d04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d08:	4981      	ldr	r1, [pc, #516]	@ (8007f10 <mbedtls_des_crypt_ecb+0x388>)
 8007d0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d0e:	405a      	eors	r2, r3
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	0c1b      	lsrs	r3, r3, #16
 8007d14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d18:	497e      	ldr	r1, [pc, #504]	@ (8007f14 <mbedtls_des_crypt_ecb+0x38c>)
 8007d1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d1e:	405a      	eors	r2, r3
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	0e1b      	lsrs	r3, r3, #24
 8007d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d28:	497b      	ldr	r1, [pc, #492]	@ (8007f18 <mbedtls_des_crypt_ecb+0x390>)
 8007d2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d2e:	4053      	eors	r3, r2
 8007d30:	6a3a      	ldr	r2, [r7, #32]
 8007d32:	4053      	eors	r3, r2
 8007d34:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	1d1a      	adds	r2, r3, #4
 8007d3a:	61ba      	str	r2, [r7, #24]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6a3a      	ldr	r2, [r7, #32]
 8007d40:	4053      	eors	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d4a:	4a6c      	ldr	r2, [pc, #432]	@ (8007efc <mbedtls_des_crypt_ecb+0x374>)
 8007d4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	0a1b      	lsrs	r3, r3, #8
 8007d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d58:	4969      	ldr	r1, [pc, #420]	@ (8007f00 <mbedtls_des_crypt_ecb+0x378>)
 8007d5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d5e:	405a      	eors	r2, r3
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	0c1b      	lsrs	r3, r3, #16
 8007d64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d68:	4966      	ldr	r1, [pc, #408]	@ (8007f04 <mbedtls_des_crypt_ecb+0x37c>)
 8007d6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d6e:	405a      	eors	r2, r3
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	0e1b      	lsrs	r3, r3, #24
 8007d74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d78:	4963      	ldr	r1, [pc, #396]	@ (8007f08 <mbedtls_des_crypt_ecb+0x380>)
 8007d7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d7e:	4053      	eors	r3, r2
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	4053      	eors	r3, r2
 8007d84:	61fb      	str	r3, [r7, #28]
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	1d1a      	adds	r2, r3, #4
 8007d8a:	61ba      	str	r2, [r7, #24]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	ea4f 1333 	mov.w	r3, r3, ror #4
 8007d94:	4053      	eors	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8007f0c <mbedtls_des_crypt_ecb+0x384>)
 8007da0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	0a1b      	lsrs	r3, r3, #8
 8007da8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dac:	4958      	ldr	r1, [pc, #352]	@ (8007f10 <mbedtls_des_crypt_ecb+0x388>)
 8007dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007db2:	405a      	eors	r2, r3
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	0c1b      	lsrs	r3, r3, #16
 8007db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dbc:	4955      	ldr	r1, [pc, #340]	@ (8007f14 <mbedtls_des_crypt_ecb+0x38c>)
 8007dbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007dc2:	405a      	eors	r2, r3
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	0e1b      	lsrs	r3, r3, #24
 8007dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dcc:	4952      	ldr	r1, [pc, #328]	@ (8007f18 <mbedtls_des_crypt_ecb+0x390>)
 8007dce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007dd2:	4053      	eors	r3, r2
 8007dd4:	69fa      	ldr	r2, [r7, #28]
 8007dd6:	4053      	eors	r3, r2
 8007dd8:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	3301      	adds	r3, #1
 8007dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de2:	2b07      	cmp	r3, #7
 8007de4:	f77f af55 	ble.w	8007c92 <mbedtls_des_crypt_ecb+0x10a>
    }

    DES_FP( Y, X );
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	ea4f 0373 	mov.w	r3, r3, ror #1
 8007dee:	61fb      	str	r3, [r7, #28]
 8007df0:	69fa      	ldr	r2, [r7, #28]
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	4053      	eors	r3, r2
 8007df6:	f003 33aa 	and.w	r3, r3, #2863311530	@ 0xaaaaaaaa
 8007dfa:	617b      	str	r3, [r7, #20]
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	4053      	eors	r3, r2
 8007e02:	61fb      	str	r3, [r7, #28]
 8007e04:	6a3a      	ldr	r2, [r7, #32]
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	4053      	eors	r3, r2
 8007e0a:	623b      	str	r3, [r7, #32]
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	ea4f 0373 	mov.w	r3, r3, ror #1
 8007e12:	623b      	str	r3, [r7, #32]
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	0a1a      	lsrs	r2, r3, #8
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	4053      	eors	r3, r2
 8007e1c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8007e20:	617b      	str	r3, [r7, #20]
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	4053      	eors	r3, r2
 8007e28:	61fb      	str	r3, [r7, #28]
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	6a3a      	ldr	r2, [r7, #32]
 8007e30:	4053      	eors	r3, r2
 8007e32:	623b      	str	r3, [r7, #32]
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	089a      	lsrs	r2, r3, #2
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	4053      	eors	r3, r2
 8007e3c:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8007e40:	617b      	str	r3, [r7, #20]
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	4053      	eors	r3, r2
 8007e48:	61fb      	str	r3, [r7, #28]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	6a3a      	ldr	r2, [r7, #32]
 8007e50:	4053      	eors	r3, r2
 8007e52:	623b      	str	r3, [r7, #32]
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	0c1a      	lsrs	r2, r3, #16
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	4053      	eors	r3, r2
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	617b      	str	r3, [r7, #20]
 8007e60:	6a3a      	ldr	r2, [r7, #32]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	4053      	eors	r3, r2
 8007e66:	623b      	str	r3, [r7, #32]
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	041b      	lsls	r3, r3, #16
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	4053      	eors	r3, r2
 8007e70:	61fb      	str	r3, [r7, #28]
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	091a      	lsrs	r2, r3, #4
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	4053      	eors	r3, r2
 8007e7a:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	6a3a      	ldr	r2, [r7, #32]
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	4053      	eors	r3, r2
 8007e86:	623b      	str	r3, [r7, #32]
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	011b      	lsls	r3, r3, #4
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	4053      	eors	r3, r2
 8007e90:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_BE( Y, output, 0 );
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	0e1b      	lsrs	r3, r3, #24
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	0c1a      	lsrs	r2, r3, #16
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	b2d2      	uxtb	r2, r2
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	0a1a      	lsrs	r2, r3, #8
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3302      	adds	r3, #2
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	701a      	strb	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3303      	adds	r3, #3
 8007eb8:	69fa      	ldr	r2, [r7, #28]
 8007eba:	b2d2      	uxtb	r2, r2
 8007ebc:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_BE( X, output, 4 );
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	0e1a      	lsrs	r2, r3, #24
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	701a      	strb	r2, [r3, #0]
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	0c1a      	lsrs	r2, r3, #16
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	3305      	adds	r3, #5
 8007ed2:	b2d2      	uxtb	r2, r2
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	0a1a      	lsrs	r2, r3, #8
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3306      	adds	r3, #6
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	701a      	strb	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3307      	adds	r3, #7
 8007ee6:	6a3a      	ldr	r2, [r7, #32]
 8007ee8:	b2d2      	uxtb	r2, r2
 8007eea:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	372c      	adds	r7, #44	@ 0x2c
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	080086cc 	.word	0x080086cc
 8007f00:	080084cc 	.word	0x080084cc
 8007f04:	080082cc 	.word	0x080082cc
 8007f08:	080080cc 	.word	0x080080cc
 8007f0c:	080085cc 	.word	0x080085cc
 8007f10:	080083cc 	.word	0x080083cc
 8007f14:	080081cc 	.word	0x080081cc
 8007f18:	08007fcc 	.word	0x08007fcc

08007f1c <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <mbedtls_platform_zeroize+0x1c>
        memset_func( buf, 0, len );
 8007f2c:	4b04      	ldr	r3, [pc, #16]	@ (8007f40 <mbedtls_platform_zeroize+0x24>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	2100      	movs	r1, #0
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	4798      	blx	r3
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000010 	.word	0x20000010

08007f44 <memset>:
 8007f44:	4402      	add	r2, r0
 8007f46:	4603      	mov	r3, r0
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d100      	bne.n	8007f4e <memset+0xa>
 8007f4c:	4770      	bx	lr
 8007f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f52:	e7f9      	b.n	8007f48 <memset+0x4>

08007f54 <__libc_init_array>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	4d0d      	ldr	r5, [pc, #52]	@ (8007f8c <__libc_init_array+0x38>)
 8007f58:	4c0d      	ldr	r4, [pc, #52]	@ (8007f90 <__libc_init_array+0x3c>)
 8007f5a:	1b64      	subs	r4, r4, r5
 8007f5c:	10a4      	asrs	r4, r4, #2
 8007f5e:	2600      	movs	r6, #0
 8007f60:	42a6      	cmp	r6, r4
 8007f62:	d109      	bne.n	8007f78 <__libc_init_array+0x24>
 8007f64:	4d0b      	ldr	r5, [pc, #44]	@ (8007f94 <__libc_init_array+0x40>)
 8007f66:	4c0c      	ldr	r4, [pc, #48]	@ (8007f98 <__libc_init_array+0x44>)
 8007f68:	f000 f818 	bl	8007f9c <_init>
 8007f6c:	1b64      	subs	r4, r4, r5
 8007f6e:	10a4      	asrs	r4, r4, #2
 8007f70:	2600      	movs	r6, #0
 8007f72:	42a6      	cmp	r6, r4
 8007f74:	d105      	bne.n	8007f82 <__libc_init_array+0x2e>
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f7c:	4798      	blx	r3
 8007f7e:	3601      	adds	r6, #1
 8007f80:	e7ee      	b.n	8007f60 <__libc_init_array+0xc>
 8007f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f86:	4798      	blx	r3
 8007f88:	3601      	adds	r6, #1
 8007f8a:	e7f2      	b.n	8007f72 <__libc_init_array+0x1e>
 8007f8c:	08008854 	.word	0x08008854
 8007f90:	08008854 	.word	0x08008854
 8007f94:	08008854 	.word	0x08008854
 8007f98:	08008858 	.word	0x08008858

08007f9c <_init>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	bf00      	nop
 8007fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa2:	bc08      	pop	{r3}
 8007fa4:	469e      	mov	lr, r3
 8007fa6:	4770      	bx	lr

08007fa8 <_fini>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	bf00      	nop
 8007fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fae:	bc08      	pop	{r3}
 8007fb0:	469e      	mov	lr, r3
 8007fb2:	4770      	bx	lr
