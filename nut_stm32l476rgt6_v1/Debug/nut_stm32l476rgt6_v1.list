
nut_stm32l476rgt6_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  08008758  08008758  00009758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009020  08009020  0000b014  2**0
                  CONTENTS
  4 .ARM          00000008  08009020  08009020  0000a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009028  08009028  0000b014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009028  08009028  0000a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800902c  0800902c  0000a02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08009030  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025dc  20000014  08009044  0000b014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025f0  08009044  0000b5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b34  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c7b  00000000  00000000  0001fb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  000227f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e18  00000000  00000000  000239e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002873e  00000000  00000000  000247f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018158  00000000  00000000  0004cf36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4067  00000000  00000000  0006508e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001590f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b30  00000000  00000000  00159138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0015dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008740 	.word	0x08008740

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08008740 	.word	0x08008740

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a11      	ldr	r2, [pc, #68]	@ (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d11b      	bne.n	8000502 <HAL_UART_RxCpltCallback+0x4a>
		if (flag_cmd_payload == 0) { // command phase
 80004ca:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <HAL_UART_RxCpltCallback+0x58>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d114      	bne.n	80004fc <HAL_UART_RxCpltCallback+0x44>
			payload_len = (rx_buffer[6] << 8) + rx_buffer[7]; // compute payload length
 80004d2:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <HAL_UART_RxCpltCallback+0x5c>)
 80004d4:	799b      	ldrb	r3, [r3, #6]
 80004d6:	021b      	lsls	r3, r3, #8
 80004d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <HAL_UART_RxCpltCallback+0x5c>)
 80004da:	79d2      	ldrb	r2, [r2, #7]
 80004dc:	4413      	add	r3, r2
 80004de:	461a      	mov	r2, r3
 80004e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000518 <HAL_UART_RxCpltCallback+0x60>)
 80004e2:	601a      	str	r2, [r3, #0]
			flag_cmd_payload = 1; // wait for payload
 80004e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000510 <HAL_UART_RxCpltCallback+0x58>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, rx_buffer + CMD_LEN, payload_len); // receive payload
 80004ea:	490c      	ldr	r1, [pc, #48]	@ (800051c <HAL_UART_RxCpltCallback+0x64>)
 80004ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000518 <HAL_UART_RxCpltCallback+0x60>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	461a      	mov	r2, r3
 80004f4:	480a      	ldr	r0, [pc, #40]	@ (8000520 <HAL_UART_RxCpltCallback+0x68>)
 80004f6:	f004 fd87 	bl	8005008 <HAL_UART_Receive_IT>
//			HAL_UART_Receive_IT(&huart1, rx_buffer + CMD_LEN, CMD_LEN); // receive payload
		} else { // payload phase
			flag_uart = 1;
		}
	}
}
 80004fa:	e002      	b.n	8000502 <HAL_UART_RxCpltCallback+0x4a>
			flag_uart = 1;
 80004fc:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <HAL_UART_RxCpltCallback+0x6c>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40013800 	.word	0x40013800
 8000510:	2000019c 	.word	0x2000019c
 8000514:	200001a4 	.word	0x200001a4
 8000518:	200001a0 	.word	0x200001a0
 800051c:	200001ac 	.word	0x200001ac
 8000520:	20000110 	.word	0x20000110
 8000524:	20000198 	.word	0x20000198

08000528 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI2) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a05      	ldr	r2, [pc, #20]	@ (800054c <HAL_SPI_TxCpltCallback+0x24>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d104      	bne.n	8000544 <HAL_SPI_TxCpltCallback+0x1c>
		HAL_SPI_Receive_IT(&hspi2, rx_buffer, CMD_LEN);
 800053a:	2208      	movs	r2, #8
 800053c:	4904      	ldr	r1, [pc, #16]	@ (8000550 <HAL_SPI_TxCpltCallback+0x28>)
 800053e:	4805      	ldr	r0, [pc, #20]	@ (8000554 <HAL_SPI_TxCpltCallback+0x2c>)
 8000540:	f003 fe18 	bl	8004174 <HAL_SPI_Receive_IT>
	}
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40003800 	.word	0x40003800
 8000550:	200001a4 	.word	0x200001a4
 8000554:	200000ac 	.word	0x200000ac

08000558 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI2) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a11      	ldr	r2, [pc, #68]	@ (80005ac <HAL_SPI_RxCpltCallback+0x54>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d11b      	bne.n	80005a2 <HAL_SPI_RxCpltCallback+0x4a>
		if (flag_cmd_payload == 0) { // command phase
 800056a:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <HAL_SPI_RxCpltCallback+0x58>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d114      	bne.n	800059c <HAL_SPI_RxCpltCallback+0x44>
			payload_len = (rx_buffer[6] << 8) + rx_buffer[7]; // compute payload length
 8000572:	4b10      	ldr	r3, [pc, #64]	@ (80005b4 <HAL_SPI_RxCpltCallback+0x5c>)
 8000574:	799b      	ldrb	r3, [r3, #6]
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	4a0e      	ldr	r2, [pc, #56]	@ (80005b4 <HAL_SPI_RxCpltCallback+0x5c>)
 800057a:	79d2      	ldrb	r2, [r2, #7]
 800057c:	4413      	add	r3, r2
 800057e:	461a      	mov	r2, r3
 8000580:	4b0d      	ldr	r3, [pc, #52]	@ (80005b8 <HAL_SPI_RxCpltCallback+0x60>)
 8000582:	601a      	str	r2, [r3, #0]
			flag_cmd_payload = 1; // wait for payload
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <HAL_SPI_RxCpltCallback+0x58>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Receive_IT(&hspi2, rx_buffer + CMD_LEN, payload_len);
 800058a:	490c      	ldr	r1, [pc, #48]	@ (80005bc <HAL_SPI_RxCpltCallback+0x64>)
 800058c:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <HAL_SPI_RxCpltCallback+0x60>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	b29b      	uxth	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	480a      	ldr	r0, [pc, #40]	@ (80005c0 <HAL_SPI_RxCpltCallback+0x68>)
 8000596:	f003 fded 	bl	8004174 <HAL_SPI_Receive_IT>
		} else { // payload phase
			flag_spi = 1;

		}
	}
}
 800059a:	e002      	b.n	80005a2 <HAL_SPI_RxCpltCallback+0x4a>
			flag_spi = 1;
 800059c:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <HAL_SPI_RxCpltCallback+0x6c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40003800 	.word	0x40003800
 80005b0:	2000019c 	.word	0x2000019c
 80005b4:	200001a4 	.word	0x200001a4
 80005b8:	200001a0 	.word	0x200001a0
 80005bc:	200001ac 	.word	0x200001ac
 80005c0:	200000ac 	.word	0x200000ac
 80005c4:	20000199 	.word	0x20000199

080005c8 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI2) {
		;
	}

}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <HAL_I2C_SlaveRxCpltCallback>:
//        HAL_I2C_Slave_Transmit_IT(&hi2c1, txBuffer, TX_BUFFER_SIZE);
//    }
//}

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
//    for (uint8_t i = 0; i < RX_BUFFER_SIZE; i++)
//    {
//        // 处理接收到的数据
//        // 例如：将数据存储到某个变量或执行某些操作
//    }
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    // 处理发�?�完�?
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fd7b 	bl	8001102 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f8c6 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f9e6 	bl	80009e0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000614:	f000 f906 	bl	8000824 <MX_CAN1_Init>
  MX_I2C2_Init();
 8000618:	f000 f938 	bl	800088c <MX_I2C2_Init>
  MX_SPI2_Init();
 800061c:	f000 f976 	bl	800090c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f9ae 	bl	8000980 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  flag_uart = 0;
 8000624:	4b4e      	ldr	r3, [pc, #312]	@ (8000760 <main+0x15c>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
  	flag_spi = 0;
 800062a:	4b4e      	ldr	r3, [pc, #312]	@ (8000764 <main+0x160>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
  	flag_i2c = 0;
 8000630:	4b4d      	ldr	r3, [pc, #308]	@ (8000768 <main+0x164>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
  	flag_can = 0;
 8000636:	4b4d      	ldr	r3, [pc, #308]	@ (800076c <main+0x168>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
  	flag_cmd_payload = 0;
 800063c:	4b4c      	ldr	r3, [pc, #304]	@ (8000770 <main+0x16c>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]

  	HAL_UART_Receive_IT(&huart1, rx_buffer, CMD_LEN);
 8000642:	2208      	movs	r2, #8
 8000644:	494b      	ldr	r1, [pc, #300]	@ (8000774 <main+0x170>)
 8000646:	484c      	ldr	r0, [pc, #304]	@ (8000778 <main+0x174>)
 8000648:	f004 fcde 	bl	8005008 <HAL_UART_Receive_IT>
  	HAL_SPI_Receive_IT(&hspi2, rx_buffer, CMD_LEN);
 800064c:	2208      	movs	r2, #8
 800064e:	4949      	ldr	r1, [pc, #292]	@ (8000774 <main+0x170>)
 8000650:	484a      	ldr	r0, [pc, #296]	@ (800077c <main+0x178>)
 8000652:	f003 fd8f 	bl	8004174 <HAL_SPI_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	mbedtls_aes_init(&aes_ctx);
 8000656:	484a      	ldr	r0, [pc, #296]	@ (8000780 <main+0x17c>)
 8000658:	f006 fa34 	bl	8006ac4 <mbedtls_aes_init>
	mbedtls_des_init(&des_ctx);
 800065c:	4849      	ldr	r0, [pc, #292]	@ (8000784 <main+0x180>)
 800065e:	f007 fc02 	bl	8007e66 <mbedtls_des_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flag_uart || flag_spi || flag_i2c || flag_can) {
 8000662:	4b3f      	ldr	r3, [pc, #252]	@ (8000760 <main+0x15c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d10b      	bne.n	8000682 <main+0x7e>
 800066a:	4b3e      	ldr	r3, [pc, #248]	@ (8000764 <main+0x160>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d107      	bne.n	8000682 <main+0x7e>
 8000672:	4b3d      	ldr	r3, [pc, #244]	@ (8000768 <main+0x164>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d103      	bne.n	8000682 <main+0x7e>
 800067a:	4b3c      	ldr	r3, [pc, #240]	@ (800076c <main+0x168>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0ef      	beq.n	8000662 <main+0x5e>
	  			SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000682:	4b41      	ldr	r3, [pc, #260]	@ (8000788 <main+0x184>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a40      	ldr	r2, [pc, #256]	@ (8000788 <main+0x184>)
 8000688:	f023 0302 	bic.w	r3, r3, #2
 800068c:	6013      	str	r3, [r2, #0]

	  			LED_ON;
 800068e:	2200      	movs	r2, #0
 8000690:	2140      	movs	r1, #64	@ 0x40
 8000692:	483e      	ldr	r0, [pc, #248]	@ (800078c <main+0x188>)
 8000694:	f001 f9ee 	bl	8001a74 <HAL_GPIO_WritePin>
	  			USER_IO_SET;
 8000698:	2201      	movs	r2, #1
 800069a:	2104      	movs	r1, #4
 800069c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a0:	f001 f9e8 	bl	8001a74 <HAL_GPIO_WritePin>

	  			process_cmd();
 80006a4:	f000 fa1e 	bl	8000ae4 <process_cmd>

	  			USER_IO_CLR;
 80006a8:	2200      	movs	r2, #0
 80006aa:	2104      	movs	r1, #4
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b0:	f001 f9e0 	bl	8001a74 <HAL_GPIO_WritePin>
	  			LED_OFF;
 80006b4:	2201      	movs	r2, #1
 80006b6:	2140      	movs	r1, #64	@ 0x40
 80006b8:	4834      	ldr	r0, [pc, #208]	@ (800078c <main+0x188>)
 80006ba:	f001 f9db 	bl	8001a74 <HAL_GPIO_WritePin>
	  			SysTick->CTRL &= SysTick_CTRL_TICKINT_Msk;
 80006be:	4b32      	ldr	r3, [pc, #200]	@ (8000788 <main+0x184>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a31      	ldr	r2, [pc, #196]	@ (8000788 <main+0x184>)
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	6013      	str	r3, [r2, #0]

	  			tx_buffer[0] = (status & 0xff00) >> 8;
 80006ca:	4b31      	ldr	r3, [pc, #196]	@ (8000790 <main+0x18c>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000794 <main+0x190>)
 80006d6:	701a      	strb	r2, [r3, #0]
	  			tx_buffer[1] = status & 0xff;
 80006d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000790 <main+0x18c>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b2d      	ldr	r3, [pc, #180]	@ (8000794 <main+0x190>)
 80006e0:	705a      	strb	r2, [r3, #1]
	  			tx_buffer[2] = 0;
 80006e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000794 <main+0x190>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	709a      	strb	r2, [r3, #2]
	  			tx_buffer[3] = 0;
 80006e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <main+0x190>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	70da      	strb	r2, [r3, #3]
	  			tx_buffer[4] = (payload_len & 0xff00) >> 8;
 80006ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <main+0x194>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <main+0x190>)
 80006f8:	711a      	strb	r2, [r3, #4]
	  			tx_buffer[5] = payload_len & 0xff;
 80006fa:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <main+0x194>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <main+0x190>)
 8000702:	715a      	strb	r2, [r3, #5]

	  			flag_cmd_payload = 0;
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <main+0x16c>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
	  			if (flag_uart) {
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <main+0x15c>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d013      	beq.n	800073a <main+0x136>
	  				HAL_UART_Transmit(&huart1, tx_buffer, 6 + payload_len, 0xffff);
 8000712:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <main+0x194>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	b29b      	uxth	r3, r3
 8000718:	3306      	adds	r3, #6
 800071a:	b29a      	uxth	r2, r3
 800071c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000720:	491c      	ldr	r1, [pc, #112]	@ (8000794 <main+0x190>)
 8000722:	4815      	ldr	r0, [pc, #84]	@ (8000778 <main+0x174>)
 8000724:	f004 fbe7 	bl	8004ef6 <HAL_UART_Transmit>
	  				flag_uart = 0;
 8000728:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <main+0x15c>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
	  				HAL_UART_Receive_IT(&huart1, rx_buffer, CMD_LEN);
 800072e:	2208      	movs	r2, #8
 8000730:	4910      	ldr	r1, [pc, #64]	@ (8000774 <main+0x170>)
 8000732:	4811      	ldr	r0, [pc, #68]	@ (8000778 <main+0x174>)
 8000734:	f004 fc68 	bl	8005008 <HAL_UART_Receive_IT>
 8000738:	e793      	b.n	8000662 <main+0x5e>
	  			} else if (flag_spi) {
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <main+0x160>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d08f      	beq.n	8000662 <main+0x5e>
	  //				HAL_SPI_Transmit(&hspi1, tx_buffer, 6 + payload_len, HAL_MAX_DELAY);
	  				HAL_SPI_Transmit_IT(&hspi2, tx_buffer, 6 + payload_len);
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <main+0x194>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	b29b      	uxth	r3, r3
 8000748:	3306      	adds	r3, #6
 800074a:	b29b      	uxth	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	4911      	ldr	r1, [pc, #68]	@ (8000794 <main+0x190>)
 8000750:	480a      	ldr	r0, [pc, #40]	@ (800077c <main+0x178>)
 8000752:	f003 fc87 	bl	8004064 <HAL_SPI_Transmit_IT>
	  				flag_spi = 0;
 8000756:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <main+0x160>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
	  if (flag_uart || flag_spi || flag_i2c || flag_can) {
 800075c:	e781      	b.n	8000662 <main+0x5e>
 800075e:	bf00      	nop
 8000760:	20000198 	.word	0x20000198
 8000764:	20000199 	.word	0x20000199
 8000768:	2000019a 	.word	0x2000019a
 800076c:	2000019b 	.word	0x2000019b
 8000770:	2000019c 	.word	0x2000019c
 8000774:	200001a4 	.word	0x200001a4
 8000778:	20000110 	.word	0x20000110
 800077c:	200000ac 	.word	0x200000ac
 8000780:	20000228 	.word	0x20000228
 8000784:	20000340 	.word	0x20000340
 8000788:	e000e010 	.word	0xe000e010
 800078c:	48000400 	.word	0x48000400
 8000790:	20000224 	.word	0x20000224
 8000794:	200001e4 	.word	0x200001e4
 8000798:	200001a0 	.word	0x200001a0

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b096      	sub	sp, #88	@ 0x58
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2244      	movs	r2, #68	@ 0x44
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f007 ff9c 	bl	80086e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007c2:	f002 f899 	bl	80028f8 <HAL_PWREx_ControlVoltageScaling>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007cc:	f000 fa78 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d0:	2301      	movs	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007da:	2300      	movs	r3, #0
 80007dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 f8de 	bl	80029a4 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80007ee:	f000 fa67 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007f6:	2302      	movs	r3, #2
 80007f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f002 fca6 	bl	800315c <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000816:	f000 fa53 	bl	8000cc0 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3758      	adds	r7, #88	@ 0x58
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_CAN1_Init+0x60>)
 800082a:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <MX_CAN1_Init+0x64>)
 800082c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000830:	2210      	movs	r2, #16
 8000832:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_CAN1_Init+0x60>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000840:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800084c:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <MX_CAN1_Init+0x60>)
 800084e:	2200      	movs	r2, #0
 8000850:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <MX_CAN1_Init+0x60>)
 800085a:	2200      	movs	r2, #0
 800085c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_CAN1_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000872:	f000 fcbb 	bl	80011ec <HAL_CAN_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 fa20 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000030 	.word	0x20000030
 8000888:	40006400 	.word	0x40006400

0800088c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <MX_I2C2_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	@ (8000904 <MX_I2C2_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 8000896:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_I2C2_Init+0x74>)
 8000898:	4a1b      	ldr	r2, [pc, #108]	@ (8000908 <MX_I2C2_Init+0x7c>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <MX_I2C2_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a2:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <MX_I2C2_Init+0x74>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <MX_I2C2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_I2C2_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_I2C2_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_I2C2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_I2C2_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008c6:	480e      	ldr	r0, [pc, #56]	@ (8000900 <MX_I2C2_Init+0x74>)
 80008c8:	f001 f8ec 	bl	8001aa4 <HAL_I2C_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008d2:	f000 f9f5 	bl	8000cc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4809      	ldr	r0, [pc, #36]	@ (8000900 <MX_I2C2_Init+0x74>)
 80008da:	f001 ff68 	bl	80027ae <HAL_I2CEx_ConfigAnalogFilter>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 f9ec 	bl	8000cc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_I2C2_Init+0x74>)
 80008ec:	f001 ffaa 	bl	8002844 <HAL_I2CEx_ConfigDigitalFilter>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 f9e3 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000058 	.word	0x20000058
 8000904:	40005800 	.word	0x40005800
 8000908:	00201d2b 	.word	0x00201d2b

0800090c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000910:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_SPI2_Init+0x6c>)
 8000912:	4a1a      	ldr	r2, [pc, #104]	@ (800097c <MX_SPI2_Init+0x70>)
 8000914:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_SPI2_Init+0x6c>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800091c:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_SPI2_Init+0x6c>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_SPI2_Init+0x6c>)
 8000924:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000928:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092a:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_SPI2_Init+0x6c>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_SPI2_Init+0x6c>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <MX_SPI2_Init+0x6c>)
 8000938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800093c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_SPI2_Init+0x6c>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_SPI2_Init+0x6c>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_SPI2_Init+0x6c>)
 800094c:	2200      	movs	r2, #0
 800094e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_SPI2_Init+0x6c>)
 8000952:	2207      	movs	r2, #7
 8000954:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_SPI2_Init+0x6c>)
 8000958:	2200      	movs	r2, #0
 800095a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_SPI2_Init+0x6c>)
 800095e:	2200      	movs	r2, #0
 8000960:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_SPI2_Init+0x6c>)
 8000964:	f003 fada 	bl	8003f1c <HAL_SPI_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 800096e:	f000 f9a7 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000ac 	.word	0x200000ac
 800097c:	40003800 	.word	0x40003800

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 8000986:	4a15      	ldr	r2, [pc, #84]	@ (80009dc <MX_USART1_UART_Init+0x5c>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098a:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_USART1_UART_Init+0x58>)
 80009c4:	f004 fa49 	bl	8004e5a <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 f977 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000110 	.word	0x20000110
 80009dc:	40013800 	.word	0x40013800

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	4b38      	ldr	r3, [pc, #224]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a37      	ldr	r2, [pc, #220]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b35      	ldr	r3, [pc, #212]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b32      	ldr	r3, [pc, #200]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	4a31      	ldr	r2, [pc, #196]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	4a25      	ldr	r2, [pc, #148]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2104      	movs	r1, #4
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5e:	f001 f809 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000a68:	481c      	ldr	r0, [pc, #112]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a6a:	f001 f803 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2140      	movs	r1, #64	@ 0x40
 8000a72:	481b      	ldr	r0, [pc, #108]	@ (8000ae0 <MX_GPIO_Init+0x100>)
 8000a74:	f000 fffe 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a92:	f000 fe45 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000a96:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480b      	ldr	r0, [pc, #44]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000ab0:	f000 fe36 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ab4:	2340      	movs	r3, #64	@ 0x40
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_GPIO_Init+0x100>)
 8000acc:	f000 fe28 	bl	8001720 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	48000400 	.word	0x48000400

08000ae4 <process_cmd>:

/* USER CODE BEGIN 4 */
void process_cmd() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	if (rx_buffer[0] == 0x01 && rx_buffer[1] == 0x00) { // Set AES encrypt Key
 8000ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8000c9c <process_cmd+0x1b8>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d111      	bne.n	8000b14 <process_cmd+0x30>
 8000af0:	4b6a      	ldr	r3, [pc, #424]	@ (8000c9c <process_cmd+0x1b8>)
 8000af2:	785b      	ldrb	r3, [r3, #1]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10d      	bne.n	8000b14 <process_cmd+0x30>
		mbedtls_aes_setkey_enc(&aes_ctx, rx_buffer + CMD_LEN, key_length);
 8000af8:	4969      	ldr	r1, [pc, #420]	@ (8000ca0 <process_cmd+0x1bc>)
 8000afa:	4b6a      	ldr	r3, [pc, #424]	@ (8000ca4 <process_cmd+0x1c0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	4869      	ldr	r0, [pc, #420]	@ (8000ca8 <process_cmd+0x1c4>)
 8000b02:	f005 ffff 	bl	8006b04 <mbedtls_aes_setkey_enc>
		status = 0;
 8000b06:	4b69      	ldr	r3, [pc, #420]	@ (8000cac <process_cmd+0x1c8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	801a      	strh	r2, [r3, #0]
		payload_len = 0;
 8000b0c:	4b68      	ldr	r3, [pc, #416]	@ (8000cb0 <process_cmd+0x1cc>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e0c0      	b.n	8000c96 <process_cmd+0x1b2>
	} else if (rx_buffer[0] == 0x01 && rx_buffer[1] == 0x01) { // Set AES decrypt Key
 8000b14:	4b61      	ldr	r3, [pc, #388]	@ (8000c9c <process_cmd+0x1b8>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d111      	bne.n	8000b40 <process_cmd+0x5c>
 8000b1c:	4b5f      	ldr	r3, [pc, #380]	@ (8000c9c <process_cmd+0x1b8>)
 8000b1e:	785b      	ldrb	r3, [r3, #1]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d10d      	bne.n	8000b40 <process_cmd+0x5c>
		mbedtls_aes_setkey_dec(&aes_ctx, rx_buffer + CMD_LEN, key_length);
 8000b24:	495e      	ldr	r1, [pc, #376]	@ (8000ca0 <process_cmd+0x1bc>)
 8000b26:	4b5f      	ldr	r3, [pc, #380]	@ (8000ca4 <process_cmd+0x1c0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	485e      	ldr	r0, [pc, #376]	@ (8000ca8 <process_cmd+0x1c4>)
 8000b2e:	f006 f9dd 	bl	8006eec <mbedtls_aes_setkey_dec>
		status = 0;
 8000b32:	4b5e      	ldr	r3, [pc, #376]	@ (8000cac <process_cmd+0x1c8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	801a      	strh	r2, [r3, #0]
		payload_len = 0;
 8000b38:	4b5d      	ldr	r3, [pc, #372]	@ (8000cb0 <process_cmd+0x1cc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e0aa      	b.n	8000c96 <process_cmd+0x1b2>
	} else if (rx_buffer[0] == 0x01 && rx_buffer[1] == 0x02) { // AES Encryption
 8000b40:	4b56      	ldr	r3, [pc, #344]	@ (8000c9c <process_cmd+0x1b8>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d11a      	bne.n	8000b7e <process_cmd+0x9a>
 8000b48:	4b54      	ldr	r3, [pc, #336]	@ (8000c9c <process_cmd+0x1b8>)
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d116      	bne.n	8000b7e <process_cmd+0x9a>
		NUT_IO1_SET;
 8000b50:	2201      	movs	r2, #1
 8000b52:	2180      	movs	r1, #128	@ 0x80
 8000b54:	4857      	ldr	r0, [pc, #348]	@ (8000cb4 <process_cmd+0x1d0>)
 8000b56:	f000 ff8d 	bl	8001a74 <HAL_GPIO_WritePin>
		mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_ENCRYPT,
 8000b5a:	4a51      	ldr	r2, [pc, #324]	@ (8000ca0 <process_cmd+0x1bc>)
 8000b5c:	4b56      	ldr	r3, [pc, #344]	@ (8000cb8 <process_cmd+0x1d4>)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	4851      	ldr	r0, [pc, #324]	@ (8000ca8 <process_cmd+0x1c4>)
 8000b62:	f007 f965 	bl	8007e30 <mbedtls_aes_crypt_ecb>
				rx_buffer + CMD_LEN, tx_buffer + STA_LEN);
		NUT_IO1_CLR;
 8000b66:	2200      	movs	r2, #0
 8000b68:	2180      	movs	r1, #128	@ 0x80
 8000b6a:	4852      	ldr	r0, [pc, #328]	@ (8000cb4 <process_cmd+0x1d0>)
 8000b6c:	f000 ff82 	bl	8001a74 <HAL_GPIO_WritePin>
		status = 0;
 8000b70:	4b4e      	ldr	r3, [pc, #312]	@ (8000cac <process_cmd+0x1c8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	801a      	strh	r2, [r3, #0]
		payload_len = 16;
 8000b76:	4b4e      	ldr	r3, [pc, #312]	@ (8000cb0 <process_cmd+0x1cc>)
 8000b78:	2210      	movs	r2, #16
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	e08b      	b.n	8000c96 <process_cmd+0x1b2>
	} else if (rx_buffer[0] == 0x01 && rx_buffer[1] == 0x03) { // AES Decryption
 8000b7e:	4b47      	ldr	r3, [pc, #284]	@ (8000c9c <process_cmd+0x1b8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d11a      	bne.n	8000bbc <process_cmd+0xd8>
 8000b86:	4b45      	ldr	r3, [pc, #276]	@ (8000c9c <process_cmd+0x1b8>)
 8000b88:	785b      	ldrb	r3, [r3, #1]
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d116      	bne.n	8000bbc <process_cmd+0xd8>
		NUT_IO1_SET;
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2180      	movs	r1, #128	@ 0x80
 8000b92:	4848      	ldr	r0, [pc, #288]	@ (8000cb4 <process_cmd+0x1d0>)
 8000b94:	f000 ff6e 	bl	8001a74 <HAL_GPIO_WritePin>
		mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_DECRYPT,
 8000b98:	4a41      	ldr	r2, [pc, #260]	@ (8000ca0 <process_cmd+0x1bc>)
 8000b9a:	4b47      	ldr	r3, [pc, #284]	@ (8000cb8 <process_cmd+0x1d4>)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4842      	ldr	r0, [pc, #264]	@ (8000ca8 <process_cmd+0x1c4>)
 8000ba0:	f007 f946 	bl	8007e30 <mbedtls_aes_crypt_ecb>
				rx_buffer + CMD_LEN, tx_buffer + STA_LEN);
		NUT_IO1_CLR;
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2180      	movs	r1, #128	@ 0x80
 8000ba8:	4842      	ldr	r0, [pc, #264]	@ (8000cb4 <process_cmd+0x1d0>)
 8000baa:	f000 ff63 	bl	8001a74 <HAL_GPIO_WritePin>
		status = 0;
 8000bae:	4b3f      	ldr	r3, [pc, #252]	@ (8000cac <process_cmd+0x1c8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	801a      	strh	r2, [r3, #0]
		payload_len = 16;
 8000bb4:	4b3e      	ldr	r3, [pc, #248]	@ (8000cb0 <process_cmd+0x1cc>)
 8000bb6:	2210      	movs	r2, #16
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	e06c      	b.n	8000c96 <process_cmd+0x1b2>
	} else if (rx_buffer[0] == 0x02 && rx_buffer[1] == 0x00) { // Set DES encryption key
 8000bbc:	4b37      	ldr	r3, [pc, #220]	@ (8000c9c <process_cmd+0x1b8>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d10f      	bne.n	8000be4 <process_cmd+0x100>
 8000bc4:	4b35      	ldr	r3, [pc, #212]	@ (8000c9c <process_cmd+0x1b8>)
 8000bc6:	785b      	ldrb	r3, [r3, #1]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10b      	bne.n	8000be4 <process_cmd+0x100>
		mbedtls_des_setkey_enc(&des_ctx, rx_buffer + CMD_LEN);
 8000bcc:	4b34      	ldr	r3, [pc, #208]	@ (8000ca0 <process_cmd+0x1bc>)
 8000bce:	4619      	mov	r1, r3
 8000bd0:	483a      	ldr	r0, [pc, #232]	@ (8000cbc <process_cmd+0x1d8>)
 8000bd2:	f007 fb51 	bl	8008278 <mbedtls_des_setkey_enc>
		status = 0;
 8000bd6:	4b35      	ldr	r3, [pc, #212]	@ (8000cac <process_cmd+0x1c8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	801a      	strh	r2, [r3, #0]
		payload_len = 0;
 8000bdc:	4b34      	ldr	r3, [pc, #208]	@ (8000cb0 <process_cmd+0x1cc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	e058      	b.n	8000c96 <process_cmd+0x1b2>
	} else if (rx_buffer[0] == 0x02 && rx_buffer[1] == 0x01) { // Set DES decryption key
 8000be4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c9c <process_cmd+0x1b8>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d10f      	bne.n	8000c0c <process_cmd+0x128>
 8000bec:	4b2b      	ldr	r3, [pc, #172]	@ (8000c9c <process_cmd+0x1b8>)
 8000bee:	785b      	ldrb	r3, [r3, #1]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d10b      	bne.n	8000c0c <process_cmd+0x128>
		mbedtls_des_setkey_dec(&des_ctx, rx_buffer + CMD_LEN);
 8000bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca0 <process_cmd+0x1bc>)
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4830      	ldr	r0, [pc, #192]	@ (8000cbc <process_cmd+0x1d8>)
 8000bfa:	f007 fb4c 	bl	8008296 <mbedtls_des_setkey_dec>
		status = 0;
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8000cac <process_cmd+0x1c8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	801a      	strh	r2, [r3, #0]
		payload_len = 0;
 8000c04:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <process_cmd+0x1cc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e044      	b.n	8000c96 <process_cmd+0x1b2>
	} else if (rx_buffer[0] == 0x02 && rx_buffer[1] == 0x02) { // DES Encryption
 8000c0c:	4b23      	ldr	r3, [pc, #140]	@ (8000c9c <process_cmd+0x1b8>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d11a      	bne.n	8000c4a <process_cmd+0x166>
 8000c14:	4b21      	ldr	r3, [pc, #132]	@ (8000c9c <process_cmd+0x1b8>)
 8000c16:	785b      	ldrb	r3, [r3, #1]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d116      	bne.n	8000c4a <process_cmd+0x166>
		NUT_IO1_SET;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2180      	movs	r1, #128	@ 0x80
 8000c20:	4824      	ldr	r0, [pc, #144]	@ (8000cb4 <process_cmd+0x1d0>)
 8000c22:	f000 ff27 	bl	8001a74 <HAL_GPIO_WritePin>
		mbedtls_des_crypt_ecb(&des_ctx, rx_buffer + CMD_LEN,
 8000c26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <process_cmd+0x1bc>)
 8000c28:	4a23      	ldr	r2, [pc, #140]	@ (8000cb8 <process_cmd+0x1d4>)
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4823      	ldr	r0, [pc, #140]	@ (8000cbc <process_cmd+0x1d8>)
 8000c2e:	f007 fb7d 	bl	800832c <mbedtls_des_crypt_ecb>
				tx_buffer + STA_LEN);
		NUT_IO1_CLR;
 8000c32:	2200      	movs	r2, #0
 8000c34:	2180      	movs	r1, #128	@ 0x80
 8000c36:	481f      	ldr	r0, [pc, #124]	@ (8000cb4 <process_cmd+0x1d0>)
 8000c38:	f000 ff1c 	bl	8001a74 <HAL_GPIO_WritePin>
		status = 0;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <process_cmd+0x1c8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	801a      	strh	r2, [r3, #0]
		payload_len = 8;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <process_cmd+0x1cc>)
 8000c44:	2208      	movs	r2, #8
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	e025      	b.n	8000c96 <process_cmd+0x1b2>
	} else if (rx_buffer[0] == 0x02 && rx_buffer[1] == 0x03) {
 8000c4a:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <process_cmd+0x1b8>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d11a      	bne.n	8000c88 <process_cmd+0x1a4>
 8000c52:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <process_cmd+0x1b8>)
 8000c54:	785b      	ldrb	r3, [r3, #1]
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d116      	bne.n	8000c88 <process_cmd+0x1a4>
		NUT_IO1_SET;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2180      	movs	r1, #128	@ 0x80
 8000c5e:	4815      	ldr	r0, [pc, #84]	@ (8000cb4 <process_cmd+0x1d0>)
 8000c60:	f000 ff08 	bl	8001a74 <HAL_GPIO_WritePin>
		mbedtls_des_crypt_ecb(&des_ctx, rx_buffer + CMD_LEN,
 8000c64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <process_cmd+0x1bc>)
 8000c66:	4a14      	ldr	r2, [pc, #80]	@ (8000cb8 <process_cmd+0x1d4>)
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4814      	ldr	r0, [pc, #80]	@ (8000cbc <process_cmd+0x1d8>)
 8000c6c:	f007 fb5e 	bl	800832c <mbedtls_des_crypt_ecb>
				tx_buffer + STA_LEN);
		NUT_IO1_CLR;
 8000c70:	2200      	movs	r2, #0
 8000c72:	2180      	movs	r1, #128	@ 0x80
 8000c74:	480f      	ldr	r0, [pc, #60]	@ (8000cb4 <process_cmd+0x1d0>)
 8000c76:	f000 fefd 	bl	8001a74 <HAL_GPIO_WritePin>
		status = 0;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <process_cmd+0x1c8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	801a      	strh	r2, [r3, #0]
		payload_len = 8;
 8000c80:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <process_cmd+0x1cc>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e006      	b.n	8000c96 <process_cmd+0x1b2>
	} else {
		status = 0x8000;
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <process_cmd+0x1c8>)
 8000c8a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c8e:	801a      	strh	r2, [r3, #0]
		payload_len = 0;
 8000c90:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <process_cmd+0x1cc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
	}
	return;
 8000c96:	bf00      	nop
}
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200001a4 	.word	0x200001a4
 8000ca0:	200001ac 	.word	0x200001ac
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000228 	.word	0x20000228
 8000cac:	20000224 	.word	0x20000224
 8000cb0:	200001a0 	.word	0x200001a0
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	200001ea 	.word	0x200001ea
 8000cbc:	20000340 	.word	0x20000340

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <Error_Handler+0x8>

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <HAL_MspInit+0x44>)
 8000cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d10 <HAL_MspInit+0x44>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <HAL_MspInit+0x44>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <HAL_MspInit+0x44>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cee:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <HAL_MspInit+0x44>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_MspInit+0x44>)
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a18      	ldr	r2, [pc, #96]	@ (8000d94 <HAL_CAN_MspInit+0x80>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d129      	bne.n	8000d8a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <HAL_CAN_MspInit+0x84>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3a:	4a17      	ldr	r2, [pc, #92]	@ (8000d98 <HAL_CAN_MspInit+0x84>)
 8000d3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_CAN_MspInit+0x84>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_CAN_MspInit+0x84>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	4a11      	ldr	r2, [pc, #68]	@ (8000d98 <HAL_CAN_MspInit+0x84>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <HAL_CAN_MspInit+0x84>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d66:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d78:	2309      	movs	r3, #9
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d86:	f000 fccb 	bl	8001720 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	@ 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40006400 	.word	0x40006400
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0ac      	sub	sp, #176	@ 0xb0
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2288      	movs	r2, #136	@ 0x88
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f007 fc93 	bl	80086e8 <memset>
  if(hi2c->Instance==I2C2)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a29      	ldr	r2, [pc, #164]	@ (8000e6c <HAL_I2C_MspInit+0xd0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d14b      	bne.n	8000e64 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000dcc:	2380      	movs	r3, #128	@ 0x80
 8000dce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 fbe3 	bl	80035a4 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000de4:	f7ff ff6c 	bl	8000cc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <HAL_I2C_MspInit+0xd4>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dec:	4a20      	ldr	r2, [pc, #128]	@ (8000e70 <HAL_I2C_MspInit+0xd4>)
 8000dee:	f043 0302 	orr.w	r3, r3, #2
 8000df2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e70 <HAL_I2C_MspInit+0xd4>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e00:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e08:	2312      	movs	r3, #18
 8000e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e24:	4619      	mov	r1, r3
 8000e26:	4813      	ldr	r0, [pc, #76]	@ (8000e74 <HAL_I2C_MspInit+0xd8>)
 8000e28:	f000 fc7a 	bl	8001720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e2c:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <HAL_I2C_MspInit+0xd4>)
 8000e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e30:	4a0f      	ldr	r2, [pc, #60]	@ (8000e70 <HAL_I2C_MspInit+0xd4>)
 8000e32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e38:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <HAL_I2C_MspInit+0xd4>)
 8000e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2021      	movs	r0, #33	@ 0x21
 8000e4a:	f000 fba6 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000e4e:	2021      	movs	r0, #33	@ 0x21
 8000e50:	f000 fbbf 	bl	80015d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	2022      	movs	r0, #34	@ 0x22
 8000e5a:	f000 fb9e 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000e5e:	2022      	movs	r0, #34	@ 0x22
 8000e60:	f000 fbb7 	bl	80015d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000e64:	bf00      	nop
 8000e66:	37b0      	adds	r7, #176	@ 0xb0
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40005800 	.word	0x40005800
 8000e70:	40021000 	.word	0x40021000
 8000e74:	48000400 	.word	0x48000400

08000e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1b      	ldr	r2, [pc, #108]	@ (8000f04 <HAL_SPI_MspInit+0x8c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d130      	bne.n	8000efc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <HAL_SPI_MspInit+0x90>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8000f08 <HAL_SPI_MspInit+0x90>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ea6:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <HAL_SPI_MspInit+0x90>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <HAL_SPI_MspInit+0x90>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <HAL_SPI_MspInit+0x90>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebe:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_SPI_MspInit+0x90>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000eca:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000edc:	2305      	movs	r3, #5
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <HAL_SPI_MspInit+0x94>)
 8000ee8:	f000 fc1a 	bl	8001720 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2024      	movs	r0, #36	@ 0x24
 8000ef2:	f000 fb52 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ef6:	2024      	movs	r0, #36	@ 0x24
 8000ef8:	f000 fb6b 	bl	80015d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	@ 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40003800 	.word	0x40003800
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000400 	.word	0x48000400

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ac      	sub	sp, #176	@ 0xb0
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2288      	movs	r2, #136	@ 0x88
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f007 fbd9 	bl	80086e8 <memset>
  if(huart->Instance==USART1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a26      	ldr	r2, [pc, #152]	@ (8000fd4 <HAL_UART_MspInit+0xc4>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d144      	bne.n	8000fca <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f44:	2300      	movs	r3, #0
 8000f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 fb29 	bl	80035a4 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f58:	f7ff feb2 	bl	8000cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <HAL_UART_MspInit+0xc8>)
 8000f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f60:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd8 <HAL_UART_MspInit+0xc8>)
 8000f62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f66:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f68:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <HAL_UART_MspInit+0xc8>)
 8000f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <HAL_UART_MspInit+0xc8>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f78:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <HAL_UART_MspInit+0xc8>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f80:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_UART_MspInit+0xc8>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f8c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f000 fbb3 	bl	8001720 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2025      	movs	r0, #37	@ 0x25
 8000fc0:	f000 faeb 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fc4:	2025      	movs	r0, #37	@ 0x25
 8000fc6:	f000 fb04 	bl	80015d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000fca:	bf00      	nop
 8000fcc:	37b0      	adds	r7, #176	@ 0xb0
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40013800 	.word	0x40013800
 8000fd8:	40021000 	.word	0x40021000

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001032:	f000 f8bb 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <I2C2_EV_IRQHandler+0x10>)
 8001042:	f000 fdca 	bl	8001bda <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000058 	.word	0x20000058

08001050 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <I2C2_ER_IRQHandler+0x10>)
 8001056:	f000 fdda 	bl	8001c0e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000058 	.word	0x20000058

08001064 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <SPI2_IRQHandler+0x10>)
 800106a:	f003 f9d7 	bl	800441c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200000ac 	.word	0x200000ac

08001078 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <USART1_IRQHandler+0x10>)
 800107e:	f004 f80f 	bl	80050a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000110 	.word	0x20000110

0800108c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <SystemInit+0x20>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <SystemInit+0x20>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b4:	f7ff ffea 	bl	800108c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	@ (80010ec <LoopForever+0x6>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	@ (80010f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <LoopForever+0xe>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	@ (80010fc <LoopForever+0x16>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010de:	f007 fb0b 	bl	80086f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e2:	f7ff fa8f 	bl	8000604 <main>

080010e6 <LoopForever>:

LoopForever:
    b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010f4:	08009030 	.word	0x08009030
  ldr r2, =_sbss
 80010f8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010fc:	200025f0 	.word	0x200025f0

08001100 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_2_IRQHandler>

08001102 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110c:	2003      	movs	r0, #3
 800110e:	f000 fa39 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001112:	200f      	movs	r0, #15
 8001114:	f000 f80e 	bl	8001134 <HAL_InitTick>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e001      	b.n	8001128 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001124:	f7ff fdd2 	bl	8000ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001128:	79fb      	ldrb	r3, [r7, #7]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001140:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <HAL_InitTick+0x6c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d023      	beq.n	8001190 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_InitTick+0x70>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <HAL_InitTick+0x6c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fa45 	bl	80015ee <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10f      	bne.n	800118a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d809      	bhi.n	8001184 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 fa0f 	bl	800159a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800117c:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_InitTick+0x74>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e007      	b.n	8001194 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e004      	b.n	8001194 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e001      	b.n	8001194 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000000c 	.word	0x2000000c
 80011a4:	20000004 	.word	0x20000004
 80011a8:	20000008 	.word	0x20000008

080011ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_IncTick+0x20>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <HAL_IncTick+0x24>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_IncTick+0x24>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	200003c0 	.word	0x200003c0

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200003c0 	.word	0x200003c0

080011ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0ed      	b.n	80013da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fd82 	bl	8000d14 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001220:	f7ff ffd8 	bl	80011d4 <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001226:	e012      	b.n	800124e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001228:	f7ff ffd4 	bl	80011d4 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b0a      	cmp	r3, #10
 8001234:	d90b      	bls.n	800124e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2205      	movs	r2, #5
 8001246:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0c5      	b.n	80013da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0e5      	beq.n	8001228 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0202 	bic.w	r2, r2, #2
 800126a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800126c:	f7ff ffb2 	bl	80011d4 <HAL_GetTick>
 8001270:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001272:	e012      	b.n	800129a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001274:	f7ff ffae 	bl	80011d4 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b0a      	cmp	r3, #10
 8001280:	d90b      	bls.n	800129a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001286:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2205      	movs	r2, #5
 8001292:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e09f      	b.n	80013da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1e5      	bne.n	8001274 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7e1b      	ldrb	r3, [r3, #24]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d108      	bne.n	80012c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e007      	b.n	80012d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e5b      	ldrb	r3, [r3, #25]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d108      	bne.n	80012ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e007      	b.n	80012fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7e9b      	ldrb	r3, [r3, #26]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d108      	bne.n	8001316 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0220 	orr.w	r2, r2, #32
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e007      	b.n	8001326 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0220 	bic.w	r2, r2, #32
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7edb      	ldrb	r3, [r3, #27]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d108      	bne.n	8001340 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0210 	bic.w	r2, r2, #16
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	e007      	b.n	8001350 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0210 	orr.w	r2, r2, #16
 800134e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7f1b      	ldrb	r3, [r3, #28]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d108      	bne.n	800136a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0208 	orr.w	r2, r2, #8
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e007      	b.n	800137a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0208 	bic.w	r2, r2, #8
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7f5b      	ldrb	r3, [r3, #29]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d108      	bne.n	8001394 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0204 	orr.w	r2, r2, #4
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e007      	b.n	80013a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0204 	bic.w	r2, r2, #4
 80013a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	ea42 0103 	orr.w	r1, r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4907      	ldr	r1, [pc, #28]	@ (8001480 <__NVIC_EnableIRQ+0x38>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	@ (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	@ (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	@ 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	@ 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f7ff ff8e 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff29 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff3e 	bl	800142c <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff8e 	bl	80014d8 <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5d 	bl	8001484 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff31 	bl	8001448 <__NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffa2 	bl	8001540 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001606:	b480      	push	{r7}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d008      	beq.n	8001630 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2204      	movs	r2, #4
 8001622:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e022      	b.n	8001676 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 020e 	bic.w	r2, r2, #14
 800163e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001654:	f003 021c 	and.w	r2, r3, #28
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f202 	lsl.w	r2, r1, r2
 8001662:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d005      	beq.n	80016a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2204      	movs	r2, #4
 800169e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e029      	b.n	80016fa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 020e 	bic.w	r2, r2, #14
 80016b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	f003 021c 	and.w	r2, r3, #28
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f202 	lsl.w	r2, r1, r2
 80016d8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
    }
  }
  return status;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001712:	b2db      	uxtb	r3, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172e:	e17f      	b.n	8001a30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8171 	beq.w	8001a2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d005      	beq.n	8001760 <HAL_GPIO_Init+0x40>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 0201 	and.w	r2, r3, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d118      	bne.n	8001800 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017d4:	2201      	movs	r2, #1
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	08db      	lsrs	r3, r3, #3
 80017ea:	f003 0201 	and.w	r2, r3, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b03      	cmp	r3, #3
 800180a:	d017      	beq.n	800183c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d123      	bne.n	8001890 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	08da      	lsrs	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3208      	adds	r2, #8
 8001850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	220f      	movs	r2, #15
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	6939      	ldr	r1, [r7, #16]
 800188c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0203 	and.w	r2, r3, #3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80ac 	beq.w	8001a2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a50 <HAL_GPIO_Init+0x330>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001a50 <HAL_GPIO_Init+0x330>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80018de:	4b5c      	ldr	r3, [pc, #368]	@ (8001a50 <HAL_GPIO_Init+0x330>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ea:	4a5a      	ldr	r2, [pc, #360]	@ (8001a54 <HAL_GPIO_Init+0x334>)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001914:	d025      	beq.n	8001962 <HAL_GPIO_Init+0x242>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4f      	ldr	r2, [pc, #316]	@ (8001a58 <HAL_GPIO_Init+0x338>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <HAL_GPIO_Init+0x23e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4e      	ldr	r2, [pc, #312]	@ (8001a5c <HAL_GPIO_Init+0x33c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x23a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4d      	ldr	r2, [pc, #308]	@ (8001a60 <HAL_GPIO_Init+0x340>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x236>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4c      	ldr	r2, [pc, #304]	@ (8001a64 <HAL_GPIO_Init+0x344>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x232>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4b      	ldr	r2, [pc, #300]	@ (8001a68 <HAL_GPIO_Init+0x348>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x22e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4a      	ldr	r2, [pc, #296]	@ (8001a6c <HAL_GPIO_Init+0x34c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x22a>
 8001946:	2306      	movs	r3, #6
 8001948:	e00c      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800194a:	2307      	movs	r3, #7
 800194c:	e00a      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800194e:	2305      	movs	r3, #5
 8001950:	e008      	b.n	8001964 <HAL_GPIO_Init+0x244>
 8001952:	2304      	movs	r3, #4
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x244>
 8001956:	2303      	movs	r3, #3
 8001958:	e004      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800195a:	2302      	movs	r3, #2
 800195c:	e002      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x244>
 8001962:	2300      	movs	r3, #0
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	f002 0203 	and.w	r2, r2, #3
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	4093      	lsls	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001974:	4937      	ldr	r1, [pc, #220]	@ (8001a54 <HAL_GPIO_Init+0x334>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001982:	4b3b      	ldr	r3, [pc, #236]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019a6:	4a32      	ldr	r2, [pc, #200]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ac:	4b30      	ldr	r3, [pc, #192]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019d0:	4a27      	ldr	r2, [pc, #156]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019d6:	4b26      	ldr	r3, [pc, #152]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a24:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <HAL_GPIO_Init+0x350>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f47f ae78 	bne.w	8001730 <HAL_GPIO_Init+0x10>
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010000 	.word	0x40010000
 8001a58:	48000400 	.word	0x48000400
 8001a5c:	48000800 	.word	0x48000800
 8001a60:	48000c00 	.word	0x48000c00
 8001a64:	48001000 	.word	0x48001000
 8001a68:	48001400 	.word	0x48001400
 8001a6c:	48001800 	.word	0x48001800
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e08d      	b.n	8001bd2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff f966 	bl	8000d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2224      	movs	r2, #36	@ 0x24
 8001ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001af4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d107      	bne.n	8001b1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	e006      	b.n	8001b2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d108      	bne.n	8001b46 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	e007      	b.n	8001b56 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69d9      	ldr	r1, [r3, #28]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1a      	ldr	r2, [r3, #32]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	4798      	blx	r3
  }
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00f      	beq.n	8001c50 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00a      	beq.n	8001c50 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00f      	beq.n	8001c7a <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00a      	beq.n	8001c7a <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c68:	f043 0208 	orr.w	r2, r3, #8
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c78:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00f      	beq.n	8001ca4 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f043 0202 	orr.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ca2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 030b 	and.w	r3, r3, #11
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001cb4:	68f9      	ldr	r1, [r7, #12]
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fbc2 	bl	8002440 <I2C_ITError>
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <I2C_Slave_ISR_IT+0x24>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e0e2      	b.n	8001f06 <I2C_Slave_ISR_IT+0x1ea>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001d5c:	6939      	ldr	r1, [r7, #16]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f9b6 	bl	80020d0 <I2C_ITSlaveCplt>
 8001d64:	e0ca      	b.n	8001efc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d04b      	beq.n	8001e08 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d046      	beq.n	8001e08 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d128      	bne.n	8001dd6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b28      	cmp	r3, #40	@ 0x28
 8001d8e:	d108      	bne.n	8001da2 <I2C_Slave_ISR_IT+0x86>
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d96:	d104      	bne.n	8001da2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d98:	6939      	ldr	r1, [r7, #16]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fafc 	bl	8002398 <I2C_ITListenCplt>
 8001da0:	e031      	b.n	8001e06 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b29      	cmp	r3, #41	@ 0x29
 8001dac:	d10e      	bne.n	8001dcc <I2C_Slave_ISR_IT+0xb0>
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001db4:	d00a      	beq.n	8001dcc <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2210      	movs	r2, #16
 8001dbc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 fc55 	bl	800266e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f926 	bl	8002016 <I2C_ITSlaveSeqCplt>
 8001dca:	e01c      	b.n	8001e06 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001dd4:	e08f      	b.n	8001ef6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2210      	movs	r2, #16
 8001ddc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	f043 0204 	orr.w	r2, r3, #4
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <I2C_Slave_ISR_IT+0xdc>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001df6:	d17e      	bne.n	8001ef6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 fb1e 	bl	8002440 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001e04:	e077      	b.n	8001ef6 <I2C_Slave_ISR_IT+0x1da>
 8001e06:	e076      	b.n	8001ef6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d02f      	beq.n	8001e72 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d02a      	beq.n	8001e72 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d018      	beq.n	8001e58 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d14b      	bne.n	8001efa <I2C_Slave_ISR_IT+0x1de>
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e68:	d047      	beq.n	8001efa <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f8d3 	bl	8002016 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001e70:	e043      	b.n	8001efa <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d009      	beq.n	8001e90 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001e86:	6939      	ldr	r1, [r7, #16]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f840 	bl	8001f0e <I2C_ITAddrCplt>
 8001e8e:	e035      	b.n	8001efc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d030      	beq.n	8001efc <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d02b      	beq.n	8001efc <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d018      	beq.n	8001ee0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001ede:	e00d      	b.n	8001efc <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ee6:	d002      	beq.n	8001eee <I2C_Slave_ISR_IT+0x1d2>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f891 	bl	8002016 <I2C_ITSlaveSeqCplt>
 8001ef4:	e002      	b.n	8001efc <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001ef6:	bf00      	nop
 8001ef8:	e000      	b.n	8001efc <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001efa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001f24:	2b28      	cmp	r3, #40	@ 0x28
 8001f26:	d16a      	bne.n	8001ffe <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	0c1b      	lsrs	r3, r3, #16
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	0c1b      	lsrs	r3, r3, #16
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001f46:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f54:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001f62:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d138      	bne.n	8001fde <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001f6c:	897b      	ldrh	r3, [r7, #10]
 8001f6e:	09db      	lsrs	r3, r3, #7
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	89bb      	ldrh	r3, [r7, #12]
 8001f74:	4053      	eors	r3, r2
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	f003 0306 	and.w	r3, r3, #6
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d11c      	bne.n	8001fba <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001f80:	897b      	ldrh	r3, [r7, #10]
 8001f82:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d13b      	bne.n	800200e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001fac:	89ba      	ldrh	r2, [r7, #12]
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fe86 	bl	8001cc4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001fb8:	e029      	b.n	800200e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001fba:	893b      	ldrh	r3, [r7, #8]
 8001fbc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001fbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fb95 	bl	80026f2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001fd0:	89ba      	ldrh	r2, [r7, #12]
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fe74 	bl	8001cc4 <HAL_I2C_AddrCallback>
}
 8001fdc:	e017      	b.n	800200e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001fde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fb85 	bl	80026f2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ff0:	89ba      	ldrh	r2, [r7, #12]
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fe64 	bl	8001cc4 <HAL_I2C_AddrCallback>
}
 8001ffc:	e007      	b.n	800200e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2208      	movs	r2, #8
 8002004:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e00c      	b.n	8002064 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002062:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b29      	cmp	r3, #41	@ 0x29
 800206e:	d112      	bne.n	8002096 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2228      	movs	r2, #40	@ 0x28
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2221      	movs	r2, #33	@ 0x21
 800207c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800207e:	2101      	movs	r1, #1
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fb36 	bl	80026f2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe faae 	bl	80005f0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002094:	e017      	b.n	80020c6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b2a      	cmp	r3, #42	@ 0x2a
 80020a0:	d111      	bne.n	80020c6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2228      	movs	r2, #40	@ 0x28
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2222      	movs	r2, #34	@ 0x22
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80020b0:	2102      	movs	r1, #2
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fb1d 	bl	80026f2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe fa8b 	bl	80005dc <HAL_I2C_SlaveRxCpltCallback>
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020f2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2220      	movs	r2, #32
 80020fa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020fc:	7afb      	ldrb	r3, [r7, #11]
 80020fe:	2b21      	cmp	r3, #33	@ 0x21
 8002100:	d002      	beq.n	8002108 <I2C_ITSlaveCplt+0x38>
 8002102:	7afb      	ldrb	r3, [r7, #11]
 8002104:	2b29      	cmp	r3, #41	@ 0x29
 8002106:	d108      	bne.n	800211a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002108:	f248 0101 	movw	r1, #32769	@ 0x8001
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 faf0 	bl	80026f2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2221      	movs	r2, #33	@ 0x21
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
 8002118:	e019      	b.n	800214e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800211a:	7afb      	ldrb	r3, [r7, #11]
 800211c:	2b22      	cmp	r3, #34	@ 0x22
 800211e:	d002      	beq.n	8002126 <I2C_ITSlaveCplt+0x56>
 8002120:	7afb      	ldrb	r3, [r7, #11]
 8002122:	2b2a      	cmp	r3, #42	@ 0x2a
 8002124:	d108      	bne.n	8002138 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002126:	f248 0102 	movw	r1, #32770	@ 0x8002
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fae1 	bl	80026f2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2222      	movs	r2, #34	@ 0x22
 8002134:	631a      	str	r2, [r3, #48]	@ 0x30
 8002136:	e00a      	b.n	800214e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002138:	7afb      	ldrb	r3, [r7, #11]
 800213a:	2b28      	cmp	r3, #40	@ 0x28
 800213c:	d107      	bne.n	800214e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800213e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fad5 	bl	80026f2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800215c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b89      	ldr	r3, [pc, #548]	@ (8002390 <I2C_ITSlaveCplt+0x2c0>)
 800216a:	400b      	ands	r3, r1
 800216c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fa7d 	bl	800266e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d013      	beq.n	80021a6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800218c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01f      	beq.n	80021d6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021a4:	e017      	b.n	80021d6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d012      	beq.n	80021d6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021be:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f023 0304 	bic.w	r3, r3, #4
 80021e6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00c      	beq.n	8002222 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002230:	f043 0204 	orr.w	r2, r3, #4
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d049      	beq.n	80022d6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002248:	2b00      	cmp	r3, #0
 800224a:	d044      	beq.n	80022d6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d128      	bne.n	80022a8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b28      	cmp	r3, #40	@ 0x28
 8002260:	d108      	bne.n	8002274 <I2C_ITSlaveCplt+0x1a4>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002268:	d104      	bne.n	8002274 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800226a:	6979      	ldr	r1, [r7, #20]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f893 	bl	8002398 <I2C_ITListenCplt>
 8002272:	e030      	b.n	80022d6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b29      	cmp	r3, #41	@ 0x29
 800227e:	d10e      	bne.n	800229e <I2C_ITSlaveCplt+0x1ce>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002286:	d00a      	beq.n	800229e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2210      	movs	r2, #16
 800228e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f9ec 	bl	800266e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff febd 	bl	8002016 <I2C_ITSlaveSeqCplt>
 800229c:	e01b      	b.n	80022d6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2210      	movs	r2, #16
 80022a4:	61da      	str	r2, [r3, #28]
 80022a6:	e016      	b.n	80022d6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2210      	movs	r2, #16
 80022ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b4:	f043 0204 	orr.w	r2, r3, #4
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <I2C_ITSlaveCplt+0x1fa>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022c8:	d105      	bne.n	80022d6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	4619      	mov	r1, r3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f8b5 	bl	8002440 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d010      	beq.n	800230e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f8a4 	bl	8002440 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b28      	cmp	r3, #40	@ 0x28
 8002302:	d141      	bne.n	8002388 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002304:	6979      	ldr	r1, [r7, #20]
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f846 	bl	8002398 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800230c:	e03c      	b.n	8002388 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002316:	d014      	beq.n	8002342 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff fe7c 	bl	8002016 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1c      	ldr	r2, [pc, #112]	@ (8002394 <I2C_ITSlaveCplt+0x2c4>)
 8002322:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff fcd0 	bl	8001ce0 <HAL_I2C_ListenCpltCallback>
}
 8002340:	e022      	b.n	8002388 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b22      	cmp	r3, #34	@ 0x22
 800234c:	d10e      	bne.n	800236c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2220      	movs	r2, #32
 8002352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7fe f939 	bl	80005dc <HAL_I2C_SlaveRxCpltCallback>
}
 800236a:	e00d      	b.n	8002388 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe f934 	bl	80005f0 <HAL_I2C_SlaveTxCpltCallback>
}
 8002388:	bf00      	nop
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	fe00e800 	.word	0xfe00e800
 8002394:	ffff0000 	.word	0xffff0000

08002398 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a25      	ldr	r2, [pc, #148]	@ (800243c <I2C_ITListenCplt+0xa4>)
 80023a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d022      	beq.n	8002414 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d012      	beq.n	8002414 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240c:	f043 0204 	orr.w	r2, r3, #4
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002414:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f96a 	bl	80026f2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2210      	movs	r2, #16
 8002424:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fc56 	bl	8001ce0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	ffff0000 	.word	0xffff0000

08002440 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002450:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a6d      	ldr	r2, [pc, #436]	@ (8002614 <I2C_ITError+0x1d4>)
 800245e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b28      	cmp	r3, #40	@ 0x28
 8002476:	d005      	beq.n	8002484 <I2C_ITError+0x44>
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b29      	cmp	r3, #41	@ 0x29
 800247c:	d002      	beq.n	8002484 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	2b2a      	cmp	r3, #42	@ 0x2a
 8002482:	d10b      	bne.n	800249c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002484:	2103      	movs	r1, #3
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f933 	bl	80026f2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2228      	movs	r2, #40	@ 0x28
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a60      	ldr	r2, [pc, #384]	@ (8002618 <I2C_ITError+0x1d8>)
 8002498:	635a      	str	r2, [r3, #52]	@ 0x34
 800249a:	e030      	b.n	80024fe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800249c:	f248 0103 	movw	r1, #32771	@ 0x8003
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f926 	bl	80026f2 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f8e1 	bl	800266e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b60      	cmp	r3, #96	@ 0x60
 80024b6:	d01f      	beq.n	80024f8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d114      	bne.n	80024f8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d109      	bne.n	80024f0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2210      	movs	r2, #16
 80024e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e8:	f043 0204 	orr.w	r2, r3, #4
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2220      	movs	r2, #32
 80024f6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002508:	2b00      	cmp	r3, #0
 800250a:	d039      	beq.n	8002580 <I2C_ITError+0x140>
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b11      	cmp	r3, #17
 8002510:	d002      	beq.n	8002518 <I2C_ITError+0xd8>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b21      	cmp	r3, #33	@ 0x21
 8002516:	d133      	bne.n	8002580 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002522:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002526:	d107      	bne.n	8002538 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002536:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff f8e1 	bl	8001704 <HAL_DMA_GetState>
 8002542:	4603      	mov	r3, r0
 8002544:	2b01      	cmp	r3, #1
 8002546:	d017      	beq.n	8002578 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254c:	4a33      	ldr	r2, [pc, #204]	@ (800261c <I2C_ITError+0x1dc>)
 800254e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f890 	bl	8001682 <HAL_DMA_Abort_IT>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d04d      	beq.n	8002604 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002572:	4610      	mov	r0, r2
 8002574:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002576:	e045      	b.n	8002604 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f851 	bl	8002620 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800257e:	e041      	b.n	8002604 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d039      	beq.n	80025fc <I2C_ITError+0x1bc>
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b12      	cmp	r3, #18
 800258c:	d002      	beq.n	8002594 <I2C_ITError+0x154>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b22      	cmp	r3, #34	@ 0x22
 8002592:	d133      	bne.n	80025fc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800259e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025a2:	d107      	bne.n	80025b4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff f8a3 	bl	8001704 <HAL_DMA_GetState>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d017      	beq.n	80025f4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c8:	4a14      	ldr	r2, [pc, #80]	@ (800261c <I2C_ITError+0x1dc>)
 80025ca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff f852 	bl	8001682 <HAL_DMA_Abort_IT>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d011      	beq.n	8002608 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025ee:	4610      	mov	r0, r2
 80025f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025f2:	e009      	b.n	8002608 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f813 	bl	8002620 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025fa:	e005      	b.n	8002608 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f80f 	bl	8002620 <I2C_TreatErrorCallback>
  }
}
 8002602:	e002      	b.n	800260a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002604:	bf00      	nop
 8002606:	e000      	b.n	800260a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002608:	bf00      	nop
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	ffff0000 	.word	0xffff0000
 8002618:	08001d1d 	.word	0x08001d1d
 800261c:	080026b7 	.word	0x080026b7

08002620 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b60      	cmp	r3, #96	@ 0x60
 8002632:	d10e      	bne.n	8002652 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fb5c 	bl	8001d08 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002650:	e009      	b.n	8002666 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff fb47 	bl	8001cf4 <HAL_I2C_ErrorCallback>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b02      	cmp	r3, #2
 8002682:	d103      	bne.n	800268c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2200      	movs	r2, #0
 800268a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d007      	beq.n	80026aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	619a      	str	r2, [r3, #24]
  }
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d0:	2200      	movs	r2, #0
 80026d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e0:	2200      	movs	r2, #0
 80026e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f7ff ff9b 	bl	8002620 <I2C_TreatErrorCallback>
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00f      	beq.n	800272c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002712:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002720:	2b28      	cmp	r3, #40	@ 0x28
 8002722:	d003      	beq.n	800272c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800272a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00f      	beq.n	8002756 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800273c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800274a:	2b28      	cmp	r3, #40	@ 0x28
 800274c:	d003      	beq.n	8002756 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002754:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002756:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800275a:	2b00      	cmp	r3, #0
 800275c:	da03      	bge.n	8002766 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002764:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	2b10      	cmp	r3, #16
 800276a:	d103      	bne.n	8002774 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002772:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	2b20      	cmp	r3, #32
 8002778:	d103      	bne.n	8002782 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f043 0320 	orr.w	r3, r3, #32
 8002780:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002782:	887b      	ldrh	r3, [r7, #2]
 8002784:	2b40      	cmp	r3, #64	@ 0x40
 8002786:	d103      	bne.n	8002790 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800278e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6819      	ldr	r1, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	43da      	mvns	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	400a      	ands	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d138      	bne.n	8002836 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e032      	b.n	8002838 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2224      	movs	r2, #36	@ 0x24
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002800:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6819      	ldr	r1, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002836:	2302      	movs	r3, #2
  }
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b20      	cmp	r3, #32
 8002858:	d139      	bne.n	80028ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002864:	2302      	movs	r3, #2
 8002866:	e033      	b.n	80028d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	@ 0x24
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002896:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028ce:	2302      	movs	r3, #2
  }
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028e0:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40007000 	.word	0x40007000

080028f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002906:	d130      	bne.n	800296a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002908:	4b23      	ldr	r3, [pc, #140]	@ (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002914:	d038      	beq.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002916:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800291e:	4a1e      	ldr	r2, [pc, #120]	@ (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002920:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002924:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002926:	4b1d      	ldr	r3, [pc, #116]	@ (800299c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2232      	movs	r2, #50	@ 0x32
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	4a1b      	ldr	r2, [pc, #108]	@ (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9b      	lsrs	r3, r3, #18
 8002938:	3301      	adds	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800293c:	e002      	b.n	8002944 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3b01      	subs	r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002944:	4b14      	ldr	r3, [pc, #80]	@ (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002950:	d102      	bne.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f2      	bne.n	800293e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002958:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002964:	d110      	bne.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e00f      	b.n	800298a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800296a:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002976:	d007      	beq.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002978:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002980:	4a05      	ldr	r2, [pc, #20]	@ (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002986:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40007000 	.word	0x40007000
 800299c:	20000004 	.word	0x20000004
 80029a0:	431bde83 	.word	0x431bde83

080029a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e3ca      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b6:	4b97      	ldr	r3, [pc, #604]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c0:	4b94      	ldr	r3, [pc, #592]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80e4 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_RCC_OscConfig+0x4a>
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b0c      	cmp	r3, #12
 80029e2:	f040 808b 	bne.w	8002afc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	f040 8087 	bne.w	8002afc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ee:	4b89      	ldr	r3, [pc, #548]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_RCC_OscConfig+0x62>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e3a2      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	4b82      	ldr	r3, [pc, #520]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d004      	beq.n	8002a20 <HAL_RCC_OscConfig+0x7c>
 8002a16:	4b7f      	ldr	r3, [pc, #508]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a1e:	e005      	b.n	8002a2c <HAL_RCC_OscConfig+0x88>
 8002a20:	4b7c      	ldr	r3, [pc, #496]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d223      	bcs.n	8002a78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fd55 	bl	80034e4 <RCC_SetFlashLatencyFromMSIRange>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e383      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a44:	4b73      	ldr	r3, [pc, #460]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a72      	ldr	r2, [pc, #456]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b70      	ldr	r3, [pc, #448]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	496d      	ldr	r1, [pc, #436]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a62:	4b6c      	ldr	r3, [pc, #432]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	4968      	ldr	r1, [pc, #416]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
 8002a76:	e025      	b.n	8002ac4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a78:	4b66      	ldr	r3, [pc, #408]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a65      	ldr	r2, [pc, #404]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	f043 0308 	orr.w	r3, r3, #8
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b63      	ldr	r3, [pc, #396]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4960      	ldr	r1, [pc, #384]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a96:	4b5f      	ldr	r3, [pc, #380]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	495b      	ldr	r1, [pc, #364]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fd15 	bl	80034e4 <RCC_SetFlashLatencyFromMSIRange>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e343      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac4:	f000 fc4a 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b52      	ldr	r3, [pc, #328]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	4950      	ldr	r1, [pc, #320]	@ (8002c18 <HAL_RCC_OscConfig+0x274>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae0:	4a4e      	ldr	r2, [pc, #312]	@ (8002c1c <HAL_RCC_OscConfig+0x278>)
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ae4:	4b4e      	ldr	r3, [pc, #312]	@ (8002c20 <HAL_RCC_OscConfig+0x27c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fb23 	bl	8001134 <HAL_InitTick>
 8002aee:	4603      	mov	r3, r0
 8002af0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d052      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	e327      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d032      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b04:	4b43      	ldr	r3, [pc, #268]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a42      	ldr	r2, [pc, #264]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b10:	f7fe fb60 	bl	80011d4 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b18:	f7fe fb5c 	bl	80011d4 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e310      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b36:	4b37      	ldr	r3, [pc, #220]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a36      	ldr	r2, [pc, #216]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b3c:	f043 0308 	orr.w	r3, r3, #8
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b34      	ldr	r3, [pc, #208]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	4931      	ldr	r1, [pc, #196]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b54:	4b2f      	ldr	r3, [pc, #188]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	492c      	ldr	r1, [pc, #176]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
 8002b68:	e01a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a29      	ldr	r2, [pc, #164]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b76:	f7fe fb2d 	bl	80011d4 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b7e:	f7fe fb29 	bl	80011d4 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e2dd      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b90:	4b20      	ldr	r3, [pc, #128]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x1da>
 8002b9c:	e000      	b.n	8002ba0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d074      	beq.n	8002c96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d005      	beq.n	8002bbe <HAL_RCC_OscConfig+0x21a>
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b0c      	cmp	r3, #12
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d064      	beq.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d160      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e2ba      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x24a>
 8002be0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0b      	ldr	r2, [pc, #44]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e026      	b.n	8002c3c <HAL_RCC_OscConfig+0x298>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bf6:	d115      	bne.n	8002c24 <HAL_RCC_OscConfig+0x280>
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a05      	ldr	r2, [pc, #20]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b03      	ldr	r3, [pc, #12]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a02      	ldr	r2, [pc, #8]	@ (8002c14 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e014      	b.n	8002c3c <HAL_RCC_OscConfig+0x298>
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
 8002c18:	08008758 	.word	0x08008758
 8002c1c:	20000004 	.word	0x20000004
 8002c20:	20000008 	.word	0x20000008
 8002c24:	4ba0      	ldr	r3, [pc, #640]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a9f      	ldr	r2, [pc, #636]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4b9d      	ldr	r3, [pc, #628]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a9c      	ldr	r2, [pc, #624]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fac6 	bl	80011d4 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fac2 	bl	80011d4 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	@ 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e276      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5e:	4b92      	ldr	r3, [pc, #584]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x2a8>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fab2 	bl	80011d4 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe faae 	bl	80011d4 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	@ 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e262      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c86:	4b88      	ldr	r3, [pc, #544]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2d0>
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d060      	beq.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x310>
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d119      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d116      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb4:	4b7c      	ldr	r3, [pc, #496]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_OscConfig+0x328>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e23f      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b76      	ldr	r3, [pc, #472]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	4973      	ldr	r1, [pc, #460]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce0:	e040      	b.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d023      	beq.n	8002d32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cea:	4b6f      	ldr	r3, [pc, #444]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6e      	ldr	r2, [pc, #440]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fa6d 	bl	80011d4 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7fe fa69 	bl	80011d4 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e21d      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d10:	4b65      	ldr	r3, [pc, #404]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4b62      	ldr	r3, [pc, #392]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	495f      	ldr	r1, [pc, #380]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
 8002d30:	e018      	b.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b5d      	ldr	r3, [pc, #372]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5c      	ldr	r2, [pc, #368]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe fa49 	bl	80011d4 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe fa45 	bl	80011d4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e1f9      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d58:	4b53      	ldr	r3, [pc, #332]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d03c      	beq.n	8002dea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01c      	beq.n	8002db2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fe fa24 	bl	80011d4 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe fa20 	bl	80011d4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1d4      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da2:	4b41      	ldr	r3, [pc, #260]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ef      	beq.n	8002d90 <HAL_RCC_OscConfig+0x3ec>
 8002db0:	e01b      	b.n	8002dea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db8:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fe fa07 	bl	80011d4 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dca:	f7fe fa03 	bl	80011d4 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e1b7      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ddc:	4b32      	ldr	r3, [pc, #200]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ef      	bne.n	8002dca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80a6 	beq.w	8002f44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10d      	bne.n	8002e24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	4b27      	ldr	r3, [pc, #156]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	4a26      	ldr	r2, [pc, #152]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e14:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e20:	2301      	movs	r3, #1
 8002e22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e24:	4b21      	ldr	r3, [pc, #132]	@ (8002eac <HAL_RCC_OscConfig+0x508>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d118      	bne.n	8002e62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e30:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <HAL_RCC_OscConfig+0x508>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1d      	ldr	r2, [pc, #116]	@ (8002eac <HAL_RCC_OscConfig+0x508>)
 8002e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3c:	f7fe f9ca 	bl	80011d4 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e44:	f7fe f9c6 	bl	80011d4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e17a      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e56:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <HAL_RCC_OscConfig+0x508>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d108      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4d8>
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e7a:	e029      	b.n	8002ed0 <HAL_RCC_OscConfig+0x52c>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d115      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x50c>
 8002e84:	4b08      	ldr	r3, [pc, #32]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8a:	4a07      	ldr	r2, [pc, #28]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e94:	4b04      	ldr	r3, [pc, #16]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9a:	4a03      	ldr	r2, [pc, #12]	@ (8002ea8 <HAL_RCC_OscConfig+0x504>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ea4:	e014      	b.n	8002ed0 <HAL_RCC_OscConfig+0x52c>
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	4b9c      	ldr	r3, [pc, #624]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb6:	4a9b      	ldr	r2, [pc, #620]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ec0:	4b98      	ldr	r3, [pc, #608]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec6:	4a97      	ldr	r2, [pc, #604]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d016      	beq.n	8002f06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe f97c 	bl	80011d4 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe f978 	bl	80011d4 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e12a      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ed      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x53c>
 8002f04:	e015      	b.n	8002f32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fe f965 	bl	80011d4 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe f961 	bl	80011d4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e113      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f24:	4b7f      	ldr	r3, [pc, #508]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ed      	bne.n	8002f0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f32:	7ffb      	ldrb	r3, [r7, #31]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f38:	4b7a      	ldr	r3, [pc, #488]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3c:	4a79      	ldr	r2, [pc, #484]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80fe 	beq.w	800314a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	f040 80d0 	bne.w	80030f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f58:	4b72      	ldr	r3, [pc, #456]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 0203 	and.w	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d130      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	3b01      	subs	r3, #1
 8002f78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d127      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d11f      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f98:	2a07      	cmp	r2, #7
 8002f9a:	bf14      	ite	ne
 8002f9c:	2201      	movne	r2, #1
 8002f9e:	2200      	moveq	r2, #0
 8002fa0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d113      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb0:	085b      	lsrs	r3, r3, #1
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d109      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d06e      	beq.n	80030ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d069      	beq.n	80030a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fd4:	4b53      	ldr	r3, [pc, #332]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fe0:	4b50      	ldr	r3, [pc, #320]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0ad      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ff0:	4b4c      	ldr	r3, [pc, #304]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8002ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ffa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ffc:	f7fe f8ea 	bl	80011d4 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe f8e6 	bl	80011d4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e09a      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003016:	4b43      	ldr	r3, [pc, #268]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003022:	4b40      	ldr	r3, [pc, #256]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	4b40      	ldr	r3, [pc, #256]	@ (8003128 <HAL_RCC_OscConfig+0x784>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003032:	3a01      	subs	r2, #1
 8003034:	0112      	lsls	r2, r2, #4
 8003036:	4311      	orrs	r1, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800303c:	0212      	lsls	r2, r2, #8
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003044:	0852      	lsrs	r2, r2, #1
 8003046:	3a01      	subs	r2, #1
 8003048:	0552      	lsls	r2, r2, #21
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003050:	0852      	lsrs	r2, r2, #1
 8003052:	3a01      	subs	r2, #1
 8003054:	0652      	lsls	r2, r2, #25
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800305c:	0912      	lsrs	r2, r2, #4
 800305e:	0452      	lsls	r2, r2, #17
 8003060:	430a      	orrs	r2, r1
 8003062:	4930      	ldr	r1, [pc, #192]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8003064:	4313      	orrs	r3, r2
 8003066:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003068:	4b2e      	ldr	r3, [pc, #184]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2d      	ldr	r2, [pc, #180]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 800306e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003072:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003074:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a2a      	ldr	r2, [pc, #168]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800307e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003080:	f7fe f8a8 	bl	80011d4 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe f8a4 	bl	80011d4 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e058      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309a:	4b22      	ldr	r3, [pc, #136]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a6:	e050      	b.n	800314a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e04f      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d148      	bne.n	800314a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a19      	ldr	r2, [pc, #100]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 80030be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030c4:	4b17      	ldr	r3, [pc, #92]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a16      	ldr	r2, [pc, #88]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 80030ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030d0:	f7fe f880 	bl	80011d4 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe f87c 	bl	80011d4 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e030      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x734>
 80030f6:	e028      	b.n	800314a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d023      	beq.n	8003146 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fe:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a08      	ldr	r2, [pc, #32]	@ (8003124 <HAL_RCC_OscConfig+0x780>)
 8003104:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7fe f863 	bl	80011d4 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003110:	e00c      	b.n	800312c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003112:	f7fe f85f 	bl	80011d4 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d905      	bls.n	800312c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e013      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
 8003124:	40021000 	.word	0x40021000
 8003128:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312c:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <HAL_RCC_OscConfig+0x7b0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ec      	bne.n	8003112 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003138:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_RCC_OscConfig+0x7b0>)
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4905      	ldr	r1, [pc, #20]	@ (8003154 <HAL_RCC_OscConfig+0x7b0>)
 800313e:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <HAL_RCC_OscConfig+0x7b4>)
 8003140:	4013      	ands	r3, r2
 8003142:	60cb      	str	r3, [r1, #12]
 8003144:	e001      	b.n	800314a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	feeefffc 	.word	0xfeeefffc

0800315c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0e7      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003170:	4b75      	ldr	r3, [pc, #468]	@ (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d910      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b72      	ldr	r3, [pc, #456]	@ (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 0207 	bic.w	r2, r3, #7
 8003186:	4970      	ldr	r1, [pc, #448]	@ (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b6e      	ldr	r3, [pc, #440]	@ (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0cf      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d010      	beq.n	80031ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	4b66      	ldr	r3, [pc, #408]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d908      	bls.n	80031ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031bc:	4b63      	ldr	r3, [pc, #396]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4960      	ldr	r1, [pc, #384]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d04c      	beq.n	8003274 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e2:	4b5a      	ldr	r3, [pc, #360]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d121      	bne.n	8003232 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0a6      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fa:	4b54      	ldr	r3, [pc, #336]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d115      	bne.n	8003232 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e09a      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003212:	4b4e      	ldr	r3, [pc, #312]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e08e      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003222:	4b4a      	ldr	r3, [pc, #296]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e086      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003232:	4b46      	ldr	r3, [pc, #280]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f023 0203 	bic.w	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4943      	ldr	r1, [pc, #268]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	4313      	orrs	r3, r2
 8003242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003244:	f7fd ffc6 	bl	80011d4 <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	e00a      	b.n	8003262 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324c:	f7fd ffc2 	bl	80011d4 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e06e      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003262:	4b3a      	ldr	r3, [pc, #232]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 020c 	and.w	r2, r3, #12
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	429a      	cmp	r2, r3
 8003272:	d1eb      	bne.n	800324c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	4b31      	ldr	r3, [pc, #196]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800328c:	429a      	cmp	r2, r3
 800328e:	d208      	bcs.n	80032a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003290:	4b2e      	ldr	r3, [pc, #184]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	492b      	ldr	r1, [pc, #172]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a2:	4b29      	ldr	r3, [pc, #164]	@ (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d210      	bcs.n	80032d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b0:	4b25      	ldr	r3, [pc, #148]	@ (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 0207 	bic.w	r2, r3, #7
 80032b8:	4923      	ldr	r1, [pc, #140]	@ (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c0:	4b21      	ldr	r3, [pc, #132]	@ (8003348 <HAL_RCC_ClockConfig+0x1ec>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e036      	b.n	8003340 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032de:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4918      	ldr	r1, [pc, #96]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fc:	4b13      	ldr	r3, [pc, #76]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4910      	ldr	r1, [pc, #64]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003310:	f000 f824 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	490b      	ldr	r1, [pc, #44]	@ (8003350 <HAL_RCC_ClockConfig+0x1f4>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
 800332c:	4a09      	ldr	r2, [pc, #36]	@ (8003354 <HAL_RCC_ClockConfig+0x1f8>)
 800332e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003330:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <HAL_RCC_ClockConfig+0x1fc>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd fefd 	bl	8001134 <HAL_InitTick>
 800333a:	4603      	mov	r3, r0
 800333c:	72fb      	strb	r3, [r7, #11]

  return status;
 800333e:	7afb      	ldrb	r3, [r7, #11]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40022000 	.word	0x40022000
 800334c:	40021000 	.word	0x40021000
 8003350:	08008758 	.word	0x08008758
 8003354:	20000004 	.word	0x20000004
 8003358:	20000008 	.word	0x20000008

0800335c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	@ 0x24
 8003360:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336a:	4b3e      	ldr	r3, [pc, #248]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003374:	4b3b      	ldr	r3, [pc, #236]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x34>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d121      	bne.n	80033ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d11e      	bne.n	80033ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003390:	4b34      	ldr	r3, [pc, #208]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d107      	bne.n	80033ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800339c:	4b31      	ldr	r3, [pc, #196]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	e005      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10d      	bne.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d102      	bne.n	80033da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033d4:	4b25      	ldr	r3, [pc, #148]	@ (800346c <HAL_RCC_GetSysClockFreq+0x110>)
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	e004      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033e0:	4b23      	ldr	r3, [pc, #140]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x114>)
 80033e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b0c      	cmp	r3, #12
 80033e8:	d134      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d003      	beq.n	8003402 <HAL_RCC_GetSysClockFreq+0xa6>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d003      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0xac>
 8003400:	e005      	b.n	800340e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003402:	4b1a      	ldr	r3, [pc, #104]	@ (800346c <HAL_RCC_GetSysClockFreq+0x110>)
 8003404:	617b      	str	r3, [r7, #20]
      break;
 8003406:	e005      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003408:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x114>)
 800340a:	617b      	str	r3, [r7, #20]
      break;
 800340c:	e002      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	617b      	str	r3, [r7, #20]
      break;
 8003412:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003414:	4b13      	ldr	r3, [pc, #76]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	3301      	adds	r3, #1
 8003420:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003422:	4b10      	ldr	r3, [pc, #64]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	fb03 f202 	mul.w	r2, r3, r2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800343a:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	0e5b      	lsrs	r3, r3, #25
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	3301      	adds	r3, #1
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003454:	69bb      	ldr	r3, [r7, #24]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3724      	adds	r7, #36	@ 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	08008770 	.word	0x08008770
 800346c:	00f42400 	.word	0x00f42400
 8003470:	007a1200 	.word	0x007a1200

08003474 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003478:	4b03      	ldr	r3, [pc, #12]	@ (8003488 <HAL_RCC_GetHCLKFreq+0x14>)
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000004 	.word	0x20000004

0800348c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003490:	f7ff fff0 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 8003494:	4602      	mov	r2, r0
 8003496:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	4904      	ldr	r1, [pc, #16]	@ (80034b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034a2:	5ccb      	ldrb	r3, [r1, r3]
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	08008768 	.word	0x08008768

080034b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034bc:	f7ff ffda 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	0adb      	lsrs	r3, r3, #11
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4904      	ldr	r1, [pc, #16]	@ (80034e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	08008768 	.word	0x08008768

080034e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034f0:	4b2a      	ldr	r3, [pc, #168]	@ (800359c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034fc:	f7ff f9ee 	bl	80028dc <HAL_PWREx_GetVoltageRange>
 8003500:	6178      	str	r0, [r7, #20]
 8003502:	e014      	b.n	800352e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003504:	4b25      	ldr	r3, [pc, #148]	@ (800359c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003508:	4a24      	ldr	r2, [pc, #144]	@ (800359c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800350e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003510:	4b22      	ldr	r3, [pc, #136]	@ (800359c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800351c:	f7ff f9de 	bl	80028dc <HAL_PWREx_GetVoltageRange>
 8003520:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003522:	4b1e      	ldr	r3, [pc, #120]	@ (800359c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	4a1d      	ldr	r2, [pc, #116]	@ (800359c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800352c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003534:	d10b      	bne.n	800354e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b80      	cmp	r3, #128	@ 0x80
 800353a:	d919      	bls.n	8003570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003540:	d902      	bls.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003542:	2302      	movs	r3, #2
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	e013      	b.n	8003570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003548:	2301      	movs	r3, #1
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	e010      	b.n	8003570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b80      	cmp	r3, #128	@ 0x80
 8003552:	d902      	bls.n	800355a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003554:	2303      	movs	r3, #3
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	e00a      	b.n	8003570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b80      	cmp	r3, #128	@ 0x80
 800355e:	d102      	bne.n	8003566 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003560:	2302      	movs	r3, #2
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e004      	b.n	8003570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b70      	cmp	r3, #112	@ 0x70
 800356a:	d101      	bne.n	8003570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800356c:	2301      	movs	r3, #1
 800356e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003570:	4b0b      	ldr	r3, [pc, #44]	@ (80035a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 0207 	bic.w	r2, r3, #7
 8003578:	4909      	ldr	r1, [pc, #36]	@ (80035a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003580:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	429a      	cmp	r2, r3
 800358c:	d001      	beq.n	8003592 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	40022000 	.word	0x40022000

080035a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035ac:	2300      	movs	r3, #0
 80035ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035b0:	2300      	movs	r3, #0
 80035b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d041      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035c8:	d02a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035ce:	d824      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035d4:	d008      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035da:	d81e      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e4:	d010      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035e6:	e018      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035e8:	4b86      	ldr	r3, [pc, #536]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a85      	ldr	r2, [pc, #532]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035f4:	e015      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3304      	adds	r3, #4
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fabb 	bl	8003b78 <RCCEx_PLLSAI1_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003606:	e00c      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3320      	adds	r3, #32
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fba6 	bl	8003d60 <RCCEx_PLLSAI2_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003618:	e003      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	74fb      	strb	r3, [r7, #19]
      break;
 800361e:	e000      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003628:	4b76      	ldr	r3, [pc, #472]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003636:	4973      	ldr	r1, [pc, #460]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800363e:	e001      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d041      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003654:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003658:	d02a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800365a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800365e:	d824      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003660:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003664:	d008      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800366a:	d81e      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003674:	d010      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003676:	e018      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003678:	4b62      	ldr	r3, [pc, #392]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4a61      	ldr	r2, [pc, #388]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003682:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003684:	e015      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3304      	adds	r3, #4
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fa73 	bl	8003b78 <RCCEx_PLLSAI1_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003696:	e00c      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3320      	adds	r3, #32
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fb5e 	bl	8003d60 <RCCEx_PLLSAI2_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	74fb      	strb	r3, [r7, #19]
      break;
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b2:	7cfb      	ldrb	r3, [r7, #19]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036b8:	4b52      	ldr	r3, [pc, #328]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036c6:	494f      	ldr	r1, [pc, #316]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80036ce:	e001      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80a0 	beq.w	8003822 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036e6:	4b47      	ldr	r3, [pc, #284]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036f6:	2300      	movs	r3, #0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fc:	4b41      	ldr	r3, [pc, #260]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003700:	4a40      	ldr	r2, [pc, #256]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003706:	6593      	str	r3, [r2, #88]	@ 0x58
 8003708:	4b3e      	ldr	r3, [pc, #248]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003714:	2301      	movs	r3, #1
 8003716:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003718:	4b3b      	ldr	r3, [pc, #236]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a3a      	ldr	r2, [pc, #232]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800371e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003722:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003724:	f7fd fd56 	bl	80011d4 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800372a:	e009      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372c:	f7fd fd52 	bl	80011d4 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d902      	bls.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	74fb      	strb	r3, [r7, #19]
        break;
 800373e:	e005      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003740:	4b31      	ldr	r3, [pc, #196]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ef      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d15c      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003752:	4b2c      	ldr	r3, [pc, #176]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003758:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800375c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01f      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	d019      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003770:	4b24      	ldr	r3, [pc, #144]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800377c:	4b21      	ldr	r3, [pc, #132]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003782:	4a20      	ldr	r2, [pc, #128]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800378c:	4b1d      	ldr	r3, [pc, #116]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003792:	4a1c      	ldr	r2, [pc, #112]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800379c:	4a19      	ldr	r2, [pc, #100]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7fd fd11 	bl	80011d4 <HAL_GetTick>
 80037b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b4:	e00b      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fd fd0d 	bl	80011d4 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d902      	bls.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	74fb      	strb	r3, [r7, #19]
            break;
 80037cc:	e006      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ec      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10c      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e2:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037f2:	4904      	ldr	r1, [pc, #16]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80037fa:	e009      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
 80037fe:	74bb      	strb	r3, [r7, #18]
 8003800:	e006      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003810:	7c7b      	ldrb	r3, [r7, #17]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d105      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003816:	4b9e      	ldr	r3, [pc, #632]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381a:	4a9d      	ldr	r2, [pc, #628]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003820:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800382e:	4b98      	ldr	r3, [pc, #608]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003834:	f023 0203 	bic.w	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	4994      	ldr	r1, [pc, #592]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003850:	4b8f      	ldr	r3, [pc, #572]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003856:	f023 020c 	bic.w	r2, r3, #12
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385e:	498c      	ldr	r1, [pc, #560]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003872:	4b87      	ldr	r3, [pc, #540]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003878:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	4983      	ldr	r1, [pc, #524]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003894:	4b7e      	ldr	r3, [pc, #504]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	497b      	ldr	r1, [pc, #492]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038b6:	4b76      	ldr	r3, [pc, #472]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c4:	4972      	ldr	r1, [pc, #456]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038d8:	4b6d      	ldr	r3, [pc, #436]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e6:	496a      	ldr	r1, [pc, #424]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038fa:	4b65      	ldr	r3, [pc, #404]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003908:	4961      	ldr	r1, [pc, #388]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800391c:	4b5c      	ldr	r3, [pc, #368]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003922:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392a:	4959      	ldr	r1, [pc, #356]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800393e:	4b54      	ldr	r3, [pc, #336]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003944:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394c:	4950      	ldr	r1, [pc, #320]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003960:	4b4b      	ldr	r3, [pc, #300]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396e:	4948      	ldr	r1, [pc, #288]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003982:	4b43      	ldr	r3, [pc, #268]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003988:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003990:	493f      	ldr	r1, [pc, #252]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d028      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039b2:	4937      	ldr	r1, [pc, #220]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039c2:	d106      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c4:	4b32      	ldr	r3, [pc, #200]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a31      	ldr	r2, [pc, #196]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ce:	60d3      	str	r3, [r2, #12]
 80039d0:	e011      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039da:	d10c      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	2101      	movs	r1, #1
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f8c8 	bl	8003b78 <RCCEx_PLLSAI1_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039ec:	7cfb      	ldrb	r3, [r7, #19]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039f2:	7cfb      	ldrb	r3, [r7, #19]
 80039f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d028      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a02:	4b23      	ldr	r3, [pc, #140]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a08:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a10:	491f      	ldr	r1, [pc, #124]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a20:	d106      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a22:	4b1b      	ldr	r3, [pc, #108]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	4a1a      	ldr	r2, [pc, #104]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a2c:	60d3      	str	r3, [r2, #12]
 8003a2e:	e011      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2101      	movs	r1, #1
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 f899 	bl	8003b78 <RCCEx_PLLSAI1_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02b      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a60:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a6e:	4908      	ldr	r1, [pc, #32]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a7e:	d109      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a80:	4b03      	ldr	r3, [pc, #12]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4a02      	ldr	r2, [pc, #8]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a8a:	60d3      	str	r3, [r2, #12]
 8003a8c:	e014      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 f867 	bl	8003b78 <RCCEx_PLLSAI1_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d02f      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ad2:	4928      	ldr	r1, [pc, #160]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ade:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ae2:	d10d      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	2102      	movs	r1, #2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 f844 	bl	8003b78 <RCCEx_PLLSAI1_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d014      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	74bb      	strb	r3, [r7, #18]
 8003afe:	e011      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3320      	adds	r3, #32
 8003b0e:	2102      	movs	r1, #2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f925 	bl	8003d60 <RCCEx_PLLSAI2_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1a:	7cfb      	ldrb	r3, [r7, #19]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
 8003b22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b30:	4b10      	ldr	r3, [pc, #64]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b36:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b3e:	490d      	ldr	r1, [pc, #52]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b52:	4b08      	ldr	r3, [pc, #32]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b62:	4904      	ldr	r1, [pc, #16]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000

08003b78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b86:	4b75      	ldr	r3, [pc, #468]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d018      	beq.n	8003bc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b92:	4b72      	ldr	r3, [pc, #456]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0203 	and.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d10d      	bne.n	8003bbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003baa:	4b6c      	ldr	r3, [pc, #432]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d047      	beq.n	8003c4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
 8003bc2:	e044      	b.n	8003c4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d018      	beq.n	8003bfe <RCCEx_PLLSAI1_Config+0x86>
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d825      	bhi.n	8003c1c <RCCEx_PLLSAI1_Config+0xa4>
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d002      	beq.n	8003bda <RCCEx_PLLSAI1_Config+0x62>
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d009      	beq.n	8003bec <RCCEx_PLLSAI1_Config+0x74>
 8003bd8:	e020      	b.n	8003c1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bda:	4b60      	ldr	r3, [pc, #384]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11d      	bne.n	8003c22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bea:	e01a      	b.n	8003c22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bec:	4b5b      	ldr	r3, [pc, #364]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d116      	bne.n	8003c26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfc:	e013      	b.n	8003c26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bfe:	4b57      	ldr	r3, [pc, #348]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10f      	bne.n	8003c2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c0a:	4b54      	ldr	r3, [pc, #336]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c1a:	e006      	b.n	8003c2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c20:	e004      	b.n	8003c2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c22:	bf00      	nop
 8003c24:	e002      	b.n	8003c2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c26:	bf00      	nop
 8003c28:	e000      	b.n	8003c2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10d      	bne.n	8003c4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c32:	4b4a      	ldr	r3, [pc, #296]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6819      	ldr	r1, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	430b      	orrs	r3, r1
 8003c48:	4944      	ldr	r1, [pc, #272]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d17d      	bne.n	8003d50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c54:	4b41      	ldr	r3, [pc, #260]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a40      	ldr	r2, [pc, #256]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c60:	f7fd fab8 	bl	80011d4 <HAL_GetTick>
 8003c64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c66:	e009      	b.n	8003c7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c68:	f7fd fab4 	bl	80011d4 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d902      	bls.n	8003c7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	73fb      	strb	r3, [r7, #15]
        break;
 8003c7a:	e005      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c7c:	4b37      	ldr	r3, [pc, #220]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ef      	bne.n	8003c68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d160      	bne.n	8003d50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d111      	bne.n	8003cb8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c94:	4b31      	ldr	r3, [pc, #196]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6892      	ldr	r2, [r2, #8]
 8003ca4:	0211      	lsls	r1, r2, #8
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68d2      	ldr	r2, [r2, #12]
 8003caa:	0912      	lsrs	r2, r2, #4
 8003cac:	0452      	lsls	r2, r2, #17
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	492a      	ldr	r1, [pc, #168]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	610b      	str	r3, [r1, #16]
 8003cb6:	e027      	b.n	8003d08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d112      	bne.n	8003ce4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cbe:	4b27      	ldr	r3, [pc, #156]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003cc6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6892      	ldr	r2, [r2, #8]
 8003cce:	0211      	lsls	r1, r2, #8
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6912      	ldr	r2, [r2, #16]
 8003cd4:	0852      	lsrs	r2, r2, #1
 8003cd6:	3a01      	subs	r2, #1
 8003cd8:	0552      	lsls	r2, r2, #21
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	491f      	ldr	r1, [pc, #124]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	610b      	str	r3, [r1, #16]
 8003ce2:	e011      	b.n	8003d08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003cec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6892      	ldr	r2, [r2, #8]
 8003cf4:	0211      	lsls	r1, r2, #8
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6952      	ldr	r2, [r2, #20]
 8003cfa:	0852      	lsrs	r2, r2, #1
 8003cfc:	3a01      	subs	r2, #1
 8003cfe:	0652      	lsls	r2, r2, #25
 8003d00:	430a      	orrs	r2, r1
 8003d02:	4916      	ldr	r1, [pc, #88]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d08:	4b14      	ldr	r3, [pc, #80]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a13      	ldr	r2, [pc, #76]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d14:	f7fd fa5e 	bl	80011d4 <HAL_GetTick>
 8003d18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d1a:	e009      	b.n	8003d30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d1c:	f7fd fa5a 	bl	80011d4 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d902      	bls.n	8003d30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d2e:	e005      	b.n	8003d3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d30:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ef      	beq.n	8003d1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d42:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	4904      	ldr	r1, [pc, #16]	@ (8003d5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000

08003d60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d018      	beq.n	8003dac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d7a:	4b67      	ldr	r3, [pc, #412]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0203 	and.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d10d      	bne.n	8003da6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d92:	4b61      	ldr	r3, [pc, #388]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
       ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d047      	beq.n	8003e36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
 8003daa:	e044      	b.n	8003e36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d018      	beq.n	8003de6 <RCCEx_PLLSAI2_Config+0x86>
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d825      	bhi.n	8003e04 <RCCEx_PLLSAI2_Config+0xa4>
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d002      	beq.n	8003dc2 <RCCEx_PLLSAI2_Config+0x62>
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d009      	beq.n	8003dd4 <RCCEx_PLLSAI2_Config+0x74>
 8003dc0:	e020      	b.n	8003e04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dc2:	4b55      	ldr	r3, [pc, #340]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d11d      	bne.n	8003e0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd2:	e01a      	b.n	8003e0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dd4:	4b50      	ldr	r3, [pc, #320]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d116      	bne.n	8003e0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de4:	e013      	b.n	8003e0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003de6:	4b4c      	ldr	r3, [pc, #304]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10f      	bne.n	8003e12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003df2:	4b49      	ldr	r3, [pc, #292]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e02:	e006      	b.n	8003e12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
      break;
 8003e08:	e004      	b.n	8003e14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e002      	b.n	8003e14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e000      	b.n	8003e14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e12:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10d      	bne.n	8003e36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6819      	ldr	r1, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	4939      	ldr	r1, [pc, #228]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d167      	bne.n	8003f0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e3c:	4b36      	ldr	r3, [pc, #216]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a35      	ldr	r2, [pc, #212]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e48:	f7fd f9c4 	bl	80011d4 <HAL_GetTick>
 8003e4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e4e:	e009      	b.n	8003e64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e50:	f7fd f9c0 	bl	80011d4 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d902      	bls.n	8003e64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	73fb      	strb	r3, [r7, #15]
        break;
 8003e62:	e005      	b.n	8003e70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e64:	4b2c      	ldr	r3, [pc, #176]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ef      	bne.n	8003e50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d14a      	bne.n	8003f0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d111      	bne.n	8003ea0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e7c:	4b26      	ldr	r3, [pc, #152]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6892      	ldr	r2, [r2, #8]
 8003e8c:	0211      	lsls	r1, r2, #8
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68d2      	ldr	r2, [r2, #12]
 8003e92:	0912      	lsrs	r2, r2, #4
 8003e94:	0452      	lsls	r2, r2, #17
 8003e96:	430a      	orrs	r2, r1
 8003e98:	491f      	ldr	r1, [pc, #124]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	614b      	str	r3, [r1, #20]
 8003e9e:	e011      	b.n	8003ec4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ea8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6892      	ldr	r2, [r2, #8]
 8003eb0:	0211      	lsls	r1, r2, #8
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6912      	ldr	r2, [r2, #16]
 8003eb6:	0852      	lsrs	r2, r2, #1
 8003eb8:	3a01      	subs	r2, #1
 8003eba:	0652      	lsls	r2, r2, #25
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	4916      	ldr	r1, [pc, #88]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ec4:	4b14      	ldr	r3, [pc, #80]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a13      	ldr	r2, [pc, #76]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ece:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fd f980 	bl	80011d4 <HAL_GetTick>
 8003ed4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ed6:	e009      	b.n	8003eec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ed8:	f7fd f97c 	bl	80011d4 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d902      	bls.n	8003eec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	73fb      	strb	r3, [r7, #15]
          break;
 8003eea:	e005      	b.n	8003ef8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eec:	4b0a      	ldr	r3, [pc, #40]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ef      	beq.n	8003ed8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003efe:	4b06      	ldr	r3, [pc, #24]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	4904      	ldr	r1, [pc, #16]	@ (8003f18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000

08003f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e095      	b.n	800405a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d108      	bne.n	8003f48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f3e:	d009      	beq.n	8003f54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	61da      	str	r2, [r3, #28]
 8003f46:	e005      	b.n	8003f54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fc ff82 	bl	8000e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f94:	d902      	bls.n	8003f9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e002      	b.n	8003fa2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fa0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003faa:	d007      	beq.n	8003fbc <HAL_SPI_Init+0xa0>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fb4:	d002      	beq.n	8003fbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffe:	ea42 0103 	orr.w	r1, r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004006:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	0c1b      	lsrs	r3, r3, #16
 8004018:	f003 0204 	and.w	r2, r3, #4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004038:	ea42 0103 	orr.w	r1, r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_SPI_Transmit_IT+0x1a>
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06d      	b.n	800415e <HAL_SPI_Transmit_IT+0xfa>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b01      	cmp	r3, #1
 800408c:	d001      	beq.n	8004092 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800408e:	2302      	movs	r3, #2
 8004090:	e065      	b.n	800415e <HAL_SPI_Transmit_IT+0xfa>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_SPI_Transmit_IT+0x3c>
 800409c:	2302      	movs	r3, #2
 800409e:	e05e      	b.n	800415e <HAL_SPI_Transmit_IT+0xfa>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2203      	movs	r2, #3
 80040ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040ec:	d903      	bls.n	80040f6 <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a1e      	ldr	r2, [pc, #120]	@ (800416c <HAL_SPI_Transmit_IT+0x108>)
 80040f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80040f4:	e002      	b.n	80040fc <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004170 <HAL_SPI_Transmit_IT+0x10c>)
 80040fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004104:	d10f      	bne.n	8004126 <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004114:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004124:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004130:	2b40      	cmp	r3, #64	@ 0x40
 8004132:	d007      	beq.n	8004144 <HAL_SPI_Transmit_IT+0xe0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004142:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800415a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	0800493b 	.word	0x0800493b
 8004170:	080048f5 	.word	0x080048f5

08004174 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d001      	beq.n	8004192 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
 8004190:	e092      	b.n	80042b8 <HAL_SPI_Receive_IT+0x144>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d110      	bne.n	80041bc <HAL_SPI_Receive_IT+0x48>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041a2:	d10b      	bne.n	80041bc <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2204      	movs	r2, #4
 80041a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f888 	bl	80042c8 <HAL_SPI_TransmitReceive_IT>
 80041b8:	4603      	mov	r3, r0
 80041ba:	e07d      	b.n	80042b8 <HAL_SPI_Receive_IT+0x144>
  }


  if ((pData == NULL) || (Size == 0U))
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_SPI_Receive_IT+0x54>
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e075      	b.n	80042b8 <HAL_SPI_Receive_IT+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_SPI_Receive_IT+0x66>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e06e      	b.n	80042b8 <HAL_SPI_Receive_IT+0x144>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2204      	movs	r2, #4
 80041e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	88fa      	ldrh	r2, [r7, #6]
 80041fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	88fa      	ldrh	r2, [r7, #6]
 8004202:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004226:	d90b      	bls.n	8004240 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004236:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a21      	ldr	r2, [pc, #132]	@ (80042c0 <HAL_SPI_Receive_IT+0x14c>)
 800423c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800423e:	e00a      	b.n	8004256 <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800424e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4a1c      	ldr	r2, [pc, #112]	@ (80042c4 <HAL_SPI_Receive_IT+0x150>)
 8004254:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800425e:	d10f      	bne.n	8004280 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800426e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800427e:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428a:	2b40      	cmp	r3, #64	@ 0x40
 800428c:	d007      	beq.n	800429e <HAL_SPI_Receive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800429c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80042b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	080048a9 	.word	0x080048a9
 80042c4:	08004859 	.word	0x08004859

080042c8 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042dc:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d00c      	beq.n	8004304 <HAL_SPI_TransmitReceive_IT+0x3c>
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042f0:	d106      	bne.n	8004300 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <HAL_SPI_TransmitReceive_IT+0x38>
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d001      	beq.n	8004304 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004300:	2302      	movs	r3, #2
 8004302:	e07d      	b.n	8004400 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_SPI_TransmitReceive_IT+0x4e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <HAL_SPI_TransmitReceive_IT+0x4e>
 8004310:	887b      	ldrh	r3, [r7, #2]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e072      	b.n	8004400 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_SPI_TransmitReceive_IT+0x60>
 8004324:	2302      	movs	r3, #2
 8004326:	e06b      	b.n	8004400 <HAL_SPI_TransmitReceive_IT+0x138>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b04      	cmp	r3, #4
 800433a:	d003      	beq.n	8004344 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2205      	movs	r2, #5
 8004340:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	887a      	ldrh	r2, [r7, #2]
 8004354:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	887a      	ldrh	r2, [r7, #2]
 800435a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	887a      	ldrh	r2, [r7, #2]
 8004366:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	887a      	ldrh	r2, [r7, #2]
 800436e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800437a:	d906      	bls.n	800438a <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a23      	ldr	r2, [pc, #140]	@ (800440c <HAL_SPI_TransmitReceive_IT+0x144>)
 8004380:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a22      	ldr	r2, [pc, #136]	@ (8004410 <HAL_SPI_TransmitReceive_IT+0x148>)
 8004386:	651a      	str	r2, [r3, #80]	@ 0x50
 8004388:	e005      	b.n	8004396 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4a21      	ldr	r2, [pc, #132]	@ (8004414 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800438e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4a21      	ldr	r2, [pc, #132]	@ (8004418 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004394:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800439e:	d802      	bhi.n	80043a6 <HAL_SPI_TransmitReceive_IT+0xde>
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d908      	bls.n	80043b8 <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	e007      	b.n	80043c8 <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043c6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	2b40      	cmp	r3, #64	@ 0x40
 80043d4:	d007      	beq.n	80043e6 <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043e4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80043fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	08004793 	.word	0x08004793
 8004410:	080047f9 	.word	0x080047f9
 8004414:	08004643 	.word	0x08004643
 8004418:	08004701 	.word	0x08004701

0800441c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10e      	bne.n	800445c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
    return;
 800445a:	e0ce      	b.n	80045fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_SPI_IRQHandler+0x5e>
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446c:	2b00      	cmp	r3, #0
 800446e:	d004      	beq.n	800447a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
    return;
 8004478:	e0bf      	b.n	80045fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <HAL_SPI_IRQHandler+0x7e>
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d105      	bne.n	800449a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80b0 	beq.w	80045fa <HAL_SPI_IRQHandler+0x1de>
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80aa 	beq.w	80045fa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d023      	beq.n	80044f8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d011      	beq.n	80044e0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c0:	f043 0204 	orr.w	r2, r3, #4
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	e00b      	b.n	80044f8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	693b      	ldr	r3, [r7, #16]
        return;
 80044f6:	e080      	b.n	80045fa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d014      	beq.n	800452c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004506:	f043 0201 	orr.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00c      	beq.n	8004550 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453a:	f043 0208 	orr.w	r2, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004554:	2b00      	cmp	r3, #0
 8004556:	d04f      	beq.n	80045f8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004566:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d104      	bne.n	8004584 <HAL_SPI_IRQHandler+0x168>
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d034      	beq.n	80045ee <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0203 	bic.w	r2, r2, #3
 8004592:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004598:	2b00      	cmp	r3, #0
 800459a:	d011      	beq.n	80045c0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a0:	4a17      	ldr	r2, [pc, #92]	@ (8004600 <HAL_SPI_IRQHandler+0x1e4>)
 80045a2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fd f86a 	bl	8001682 <HAL_DMA_Abort_IT>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d016      	beq.n	80045f6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004600 <HAL_SPI_IRQHandler+0x1e4>)
 80045ce:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fd f854 	bl	8001682 <HAL_DMA_Abort_IT>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80045ec:	e003      	b.n	80045f6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fb ffea 	bl	80005c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045f4:	e000      	b.n	80045f8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80045f6:	bf00      	nop
    return;
 80045f8:	bf00      	nop
  }
}
 80045fa:	3720      	adds	r7, #32
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	08004619 	.word	0x08004619

08004604 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7fb ffc7 	bl	80005c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d923      	bls.n	800469e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	b292      	uxth	r2, r2
 8004662:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	1c9a      	adds	r2, r3, #2
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b02      	subs	r3, #2
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d11f      	bne.n	80046cc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	e016      	b.n	80046cc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f103 020c 	add.w	r2, r3, #12
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10f      	bne.n	80046f8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046e6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fb00 	bl	8004cf8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	d912      	bls.n	8004738 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004716:	881a      	ldrh	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004722:	1c9a      	adds	r2, r3, #2
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b02      	subs	r3, #2
 8004730:	b29a      	uxth	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004736:	e012      	b.n	800475e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	7812      	ldrb	r2, [r2, #0]
 8004744:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d110      	bne.n	800478a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004776:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fab7 	bl	8004cf8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a4:	b292      	uxth	r2, r2
 80047a6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ac:	1c9a      	adds	r2, r3, #2
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10f      	bne.n	80047f0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047de:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fa84 	bl	8004cf8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004804:	881a      	ldrh	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004810:	1c9a      	adds	r2, r3, #2
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d110      	bne.n	8004850 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800483c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa54 	bl	8004cf8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f103 020c 	add.w	r2, r3, #12
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486c:	7812      	ldrb	r2, [r2, #0]
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d102      	bne.n	80048a0 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fa6e 	bl	8004d7c <SPI_CloseRx_ISR>
  }
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	b292      	uxth	r2, r2
 80048bc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	1c9a      	adds	r2, r3, #2
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fa48 	bl	8004d7c <SPI_CloseRx_ISR>
  }
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	7812      	ldrb	r2, [r2, #0]
 8004908:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fa55 	bl	8004ddc <SPI_CloseTx_ISR>
  }
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004946:	881a      	ldrh	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	1c9a      	adds	r2, r3, #2
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fa33 	bl	8004ddc <SPI_CloseTx_ISR>
  }
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004990:	f7fc fc20 	bl	80011d4 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	4413      	add	r3, r2
 800499e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049a0:	f7fc fc18 	bl	80011d4 <HAL_GetTick>
 80049a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049a6:	4b39      	ldr	r3, [pc, #228]	@ (8004a8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	015b      	lsls	r3, r3, #5
 80049ac:	0d1b      	lsrs	r3, r3, #20
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	fb02 f303 	mul.w	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049b6:	e054      	b.n	8004a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049be:	d050      	beq.n	8004a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049c0:	f7fc fc08 	bl	80011d4 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d902      	bls.n	80049d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d13d      	bne.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049ee:	d111      	bne.n	8004a14 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049f8:	d004      	beq.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a02:	d107      	bne.n	8004a14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a1c:	d10f      	bne.n	8004a3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e017      	b.n	8004a82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	bf0c      	ite	eq
 8004a72:	2301      	moveq	r3, #1
 8004a74:	2300      	movne	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d19b      	bne.n	80049b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000004 	.word	0x20000004

08004a90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	@ 0x28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004aa2:	f7fc fb97 	bl	80011d4 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	4413      	add	r3, r2
 8004ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004ab2:	f7fc fb8f 	bl	80011d4 <HAL_GetTick>
 8004ab6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	00da      	lsls	r2, r3, #3
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	0d1b      	lsrs	r3, r3, #20
 8004ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ad8:	e060      	b.n	8004b9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ae0:	d107      	bne.n	8004af2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d104      	bne.n	8004af2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d050      	beq.n	8004b9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004afa:	f7fc fb6b 	bl	80011d4 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d902      	bls.n	8004b10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d13d      	bne.n	8004b8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b28:	d111      	bne.n	8004b4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b32:	d004      	beq.n	8004b3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b3c:	d107      	bne.n	8004b4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b56:	d10f      	bne.n	8004b78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e010      	b.n	8004bae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d196      	bne.n	8004ada <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3728      	adds	r7, #40	@ 0x28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000004 	.word	0x20000004

08004bbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bd0:	d111      	bne.n	8004bf6 <SPI_EndRxTransaction+0x3a>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bda:	d004      	beq.n	8004be6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be4:	d107      	bne.n	8004bf6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bf4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2180      	movs	r1, #128	@ 0x80
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f7ff febd 	bl	8004980 <SPI_WaitFlagStateUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e023      	b.n	8004c64 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c24:	d11d      	bne.n	8004c62 <SPI_EndRxTransaction+0xa6>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c2e:	d004      	beq.n	8004c3a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c38:	d113      	bne.n	8004c62 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff ff22 	bl	8004a90 <SPI_WaitFifoStateUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c56:	f043 0220 	orr.w	r2, r3, #32
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e000      	b.n	8004c64 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7ff ff03 	bl	8004a90 <SPI_WaitFifoStateUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e027      	b.n	8004cf0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2180      	movs	r1, #128	@ 0x80
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff fe68 	bl	8004980 <SPI_WaitFlagStateUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cba:	f043 0220 	orr.w	r2, r3, #32
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e014      	b.n	8004cf0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff fedc 	bl	8004a90 <SPI_WaitFifoStateUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce2:	f043 0220 	orr.w	r2, r3, #32
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e000      	b.n	8004cf0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d00:	f7fc fa68 	bl	80011d4 <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0220 	bic.w	r2, r2, #32
 8004d14:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	2164      	movs	r1, #100	@ 0x64
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff ffa6 	bl	8004c6c <SPI_EndRxTxTransaction>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d115      	bne.n	8004d66 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d107      	bne.n	8004d56 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fb fc02 	bl	8000558 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004d54:	e00e      	b.n	8004d74 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff fc50 	bl	8004604 <HAL_SPI_TxRxCpltCallback>
}
 8004d64:	e006      	b.n	8004d74 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fb fc2a 	bl	80005c8 <HAL_SPI_ErrorCallback>
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d92:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004d94:	f7fc fa1e 	bl	80011d4 <HAL_GetTick>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2164      	movs	r1, #100	@ 0x64
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff ff0c 	bl	8004bbc <SPI_EndRxTransaction>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fb fbc6 	bl	8000558 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004dcc:	e002      	b.n	8004dd4 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fb fbfa 	bl	80005c8 <HAL_SPI_ErrorCallback>
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004de4:	f7fc f9f6 	bl	80011d4 <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004df8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	2164      	movs	r1, #100	@ 0x64
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff ff34 	bl	8004c6c <SPI_EndRxTxTransaction>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7fb fbbf 	bl	80005c8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004e4a:	e002      	b.n	8004e52 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7fb fb6b 	bl	8000528 <HAL_SPI_TxCpltCallback>
}
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e040      	b.n	8004eee <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7fc f847 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2224      	movs	r2, #36	@ 0x24
 8004e86:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fedb 	bl	8005c5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fc20 	bl	80056ec <UART_SetConfig>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e01b      	b.n	8004eee <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ec4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ed4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0201 	orr.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 ff5a 	bl	8005da0 <UART_CheckIdleState>
 8004eec:	4603      	mov	r3, r0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b08a      	sub	sp, #40	@ 0x28
 8004efa:	af02      	add	r7, sp, #8
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d177      	bne.n	8004ffe <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_UART_Transmit+0x24>
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e070      	b.n	8005000 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2221      	movs	r2, #33	@ 0x21
 8004f2a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f2c:	f7fc f952 	bl	80011d4 <HAL_GetTick>
 8004f30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	88fa      	ldrh	r2, [r7, #6]
 8004f36:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	88fa      	ldrh	r2, [r7, #6]
 8004f3e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f4a:	d108      	bne.n	8004f5e <HAL_UART_Transmit+0x68>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	e003      	b.n	8004f66 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f66:	e02f      	b.n	8004fc8 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2180      	movs	r1, #128	@ 0x80
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 ffbc 	bl	8005ef0 <UART_WaitOnFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d004      	beq.n	8004f88 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e03b      	b.n	8005000 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f9a:	b292      	uxth	r2, r2
 8004f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	e007      	b.n	8004fb6 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	781a      	ldrb	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1c9      	bne.n	8004f68 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2140      	movs	r1, #64	@ 0x40
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 ff86 	bl	8005ef0 <UART_WaitOnFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d004      	beq.n	8004ff4 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e005      	b.n	8005000 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e000      	b.n	8005000 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004ffe:	2302      	movs	r3, #2
  }
}
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	@ 0x28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800501c:	2b20      	cmp	r3, #32
 800501e:	d137      	bne.n	8005090 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_UART_Receive_IT+0x24>
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e030      	b.n	8005092 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a18      	ldr	r2, [pc, #96]	@ (800509c <HAL_UART_Receive_IT+0x94>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d01f      	beq.n	8005080 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d018      	beq.n	8005080 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	613b      	str	r3, [r7, #16]
   return(result);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	623b      	str	r3, [r7, #32]
 800506e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	69f9      	ldr	r1, [r7, #28]
 8005072:	6a3a      	ldr	r2, [r7, #32]
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	61bb      	str	r3, [r7, #24]
   return(result);
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e6      	bne.n	800504e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005080:	88fb      	ldrh	r3, [r7, #6]
 8005082:	461a      	mov	r2, r3
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 ffa0 	bl	8005fcc <UART_Start_Receive_IT>
 800508c:	4603      	mov	r3, r0
 800508e:	e000      	b.n	8005092 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
  }
}
 8005092:	4618      	mov	r0, r3
 8005094:	3728      	adds	r7, #40	@ 0x28
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40008000 	.word	0x40008000

080050a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b0ba      	sub	sp, #232	@ 0xe8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80050ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80050ce:	4013      	ands	r3, r2
 80050d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80050d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d115      	bne.n	8005108 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80050dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00f      	beq.n	8005108 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d009      	beq.n	8005108 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 82ca 	beq.w	8005692 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	4798      	blx	r3
      }
      return;
 8005106:	e2c4      	b.n	8005692 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 8117 	beq.w	8005340 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800511e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005122:	4b85      	ldr	r3, [pc, #532]	@ (8005338 <HAL_UART_IRQHandler+0x298>)
 8005124:	4013      	ands	r3, r2
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 810a 	beq.w	8005340 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800512c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d011      	beq.n	800515c <HAL_UART_IRQHandler+0xbc>
 8005138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800513c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2201      	movs	r2, #1
 800514a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005152:	f043 0201 	orr.w	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d011      	beq.n	800518c <HAL_UART_IRQHandler+0xec>
 8005168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2202      	movs	r2, #2
 800517a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005182:	f043 0204 	orr.w	r2, r3, #4
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800518c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d011      	beq.n	80051bc <HAL_UART_IRQHandler+0x11c>
 8005198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00b      	beq.n	80051bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2204      	movs	r2, #4
 80051aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051b2:	f043 0202 	orr.w	r2, r3, #2
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d017      	beq.n	80051f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80051d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2208      	movs	r2, #8
 80051e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ee:	f043 0208 	orr.w	r2, r3, #8
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005200:	2b00      	cmp	r3, #0
 8005202:	d012      	beq.n	800522a <HAL_UART_IRQHandler+0x18a>
 8005204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005208:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00c      	beq.n	800522a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005218:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005220:	f043 0220 	orr.w	r2, r3, #32
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8230 	beq.w	8005696 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00d      	beq.n	800525e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d007      	beq.n	800525e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005264:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005272:	2b40      	cmp	r3, #64	@ 0x40
 8005274:	d005      	beq.n	8005282 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800527a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800527e:	2b00      	cmp	r3, #0
 8005280:	d04f      	beq.n	8005322 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 ff68 	bl	8006158 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005292:	2b40      	cmp	r3, #64	@ 0x40
 8005294:	d141      	bne.n	800531a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80052c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80052ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80052da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1d9      	bne.n	8005296 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d013      	beq.n	8005312 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ee:	4a13      	ldr	r2, [pc, #76]	@ (800533c <HAL_UART_IRQHandler+0x29c>)
 80052f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fc f9c3 	bl	8001682 <HAL_DMA_Abort_IT>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d017      	beq.n	8005332 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800530c:	4610      	mov	r0, r2
 800530e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005310:	e00f      	b.n	8005332 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9d4 	bl	80056c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005318:	e00b      	b.n	8005332 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f9d0 	bl	80056c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005320:	e007      	b.n	8005332 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f9cc 	bl	80056c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005330:	e1b1      	b.n	8005696 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005332:	bf00      	nop
    return;
 8005334:	e1af      	b.n	8005696 <HAL_UART_IRQHandler+0x5f6>
 8005336:	bf00      	nop
 8005338:	04000120 	.word	0x04000120
 800533c:	08006221 	.word	0x08006221

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005344:	2b01      	cmp	r3, #1
 8005346:	f040 816a 	bne.w	800561e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800534a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8163 	beq.w	800561e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 815c 	beq.w	800561e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2210      	movs	r2, #16
 800536c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005378:	2b40      	cmp	r3, #64	@ 0x40
 800537a:	f040 80d4 	bne.w	8005526 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800538a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 80ad 	beq.w	80054ee <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800539a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800539e:	429a      	cmp	r2, r3
 80053a0:	f080 80a5 	bcs.w	80054ee <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f040 8086 	bne.w	80054cc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80053d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	461a      	mov	r2, r3
 80053e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80053ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80053ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80053f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1da      	bne.n	80053c0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3308      	adds	r3, #8
 8005410:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800541a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3308      	adds	r3, #8
 800542a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800542e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005432:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005436:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e1      	bne.n	800540a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3308      	adds	r3, #8
 800544c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800545c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3308      	adds	r3, #8
 8005466:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800546a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800546c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005470:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e3      	bne.n	8005446 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2220      	movs	r2, #32
 8005482:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800549a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800549c:	f023 0310 	bic.w	r3, r3, #16
 80054a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e4      	bne.n	800548c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fc f89d 	bl	8001606 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	4619      	mov	r1, r3
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f8f4 	bl	80056d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80054ec:	e0d5      	b.n	800569a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80054f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054f8:	429a      	cmp	r2, r3
 80054fa:	f040 80ce 	bne.w	800569a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b20      	cmp	r3, #32
 800550c:	f040 80c5 	bne.w	800569a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f8d8 	bl	80056d4 <HAL_UARTEx_RxEventCallback>
      return;
 8005524:	e0b9      	b.n	800569a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005532:	b29b      	uxth	r3, r3
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80ab 	beq.w	800569e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 80a6 	beq.w	800569e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005562:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005566:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005574:	647b      	str	r3, [r7, #68]	@ 0x44
 8005576:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800557a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e4      	bne.n	8005552 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3308      	adds	r3, #8
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	623b      	str	r3, [r7, #32]
   return(result);
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3308      	adds	r3, #8
 80055a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80055ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e3      	bne.n	8005588 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f023 0310 	bic.w	r3, r3, #16
 80055e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055f6:	61fb      	str	r3, [r7, #28]
 80055f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	69b9      	ldr	r1, [r7, #24]
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	617b      	str	r3, [r7, #20]
   return(result);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e4      	bne.n	80055d4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f85c 	bl	80056d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800561c:	e03f      	b.n	800569e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005622:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00e      	beq.n	8005648 <HAL_UART_IRQHandler+0x5a8>
 800562a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800562e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800563e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 ffe9 	bl	8006618 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005646:	e02d      	b.n	80056a4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00e      	beq.n	8005672 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01c      	beq.n	80056a2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4798      	blx	r3
    }
    return;
 8005670:	e017      	b.n	80056a2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d012      	beq.n	80056a4 <HAL_UART_IRQHandler+0x604>
 800567e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00c      	beq.n	80056a4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fdde 	bl	800624c <UART_EndTransmit_IT>
    return;
 8005690:	e008      	b.n	80056a4 <HAL_UART_IRQHandler+0x604>
      return;
 8005692:	bf00      	nop
 8005694:	e006      	b.n	80056a4 <HAL_UART_IRQHandler+0x604>
    return;
 8005696:	bf00      	nop
 8005698:	e004      	b.n	80056a4 <HAL_UART_IRQHandler+0x604>
      return;
 800569a:	bf00      	nop
 800569c:	e002      	b.n	80056a4 <HAL_UART_IRQHandler+0x604>
      return;
 800569e:	bf00      	nop
 80056a0:	e000      	b.n	80056a4 <HAL_UART_IRQHandler+0x604>
    return;
 80056a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80056a4:	37e8      	adds	r7, #232	@ 0xe8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop

080056ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f0:	b08a      	sub	sp, #40	@ 0x28
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	431a      	orrs	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	431a      	orrs	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	4313      	orrs	r3, r2
 8005712:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4ba4      	ldr	r3, [pc, #656]	@ (80059ac <UART_SetConfig+0x2c0>)
 800571c:	4013      	ands	r3, r2
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	6812      	ldr	r2, [r2, #0]
 8005722:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005724:	430b      	orrs	r3, r1
 8005726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a99      	ldr	r2, [pc, #612]	@ (80059b0 <UART_SetConfig+0x2c4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005754:	4313      	orrs	r3, r2
 8005756:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005768:	430a      	orrs	r2, r1
 800576a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a90      	ldr	r2, [pc, #576]	@ (80059b4 <UART_SetConfig+0x2c8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d126      	bne.n	80057c4 <UART_SetConfig+0xd8>
 8005776:	4b90      	ldr	r3, [pc, #576]	@ (80059b8 <UART_SetConfig+0x2cc>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	2b03      	cmp	r3, #3
 8005782:	d81b      	bhi.n	80057bc <UART_SetConfig+0xd0>
 8005784:	a201      	add	r2, pc, #4	@ (adr r2, 800578c <UART_SetConfig+0xa0>)
 8005786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578a:	bf00      	nop
 800578c:	0800579d 	.word	0x0800579d
 8005790:	080057ad 	.word	0x080057ad
 8005794:	080057a5 	.word	0x080057a5
 8005798:	080057b5 	.word	0x080057b5
 800579c:	2301      	movs	r3, #1
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057a2:	e116      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80057a4:	2302      	movs	r3, #2
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057aa:	e112      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80057ac:	2304      	movs	r3, #4
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b2:	e10e      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80057b4:	2308      	movs	r3, #8
 80057b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ba:	e10a      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80057bc:	2310      	movs	r3, #16
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c2:	e106      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a7c      	ldr	r2, [pc, #496]	@ (80059bc <UART_SetConfig+0x2d0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d138      	bne.n	8005840 <UART_SetConfig+0x154>
 80057ce:	4b7a      	ldr	r3, [pc, #488]	@ (80059b8 <UART_SetConfig+0x2cc>)
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d4:	f003 030c 	and.w	r3, r3, #12
 80057d8:	2b0c      	cmp	r3, #12
 80057da:	d82d      	bhi.n	8005838 <UART_SetConfig+0x14c>
 80057dc:	a201      	add	r2, pc, #4	@ (adr r2, 80057e4 <UART_SetConfig+0xf8>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	08005819 	.word	0x08005819
 80057e8:	08005839 	.word	0x08005839
 80057ec:	08005839 	.word	0x08005839
 80057f0:	08005839 	.word	0x08005839
 80057f4:	08005829 	.word	0x08005829
 80057f8:	08005839 	.word	0x08005839
 80057fc:	08005839 	.word	0x08005839
 8005800:	08005839 	.word	0x08005839
 8005804:	08005821 	.word	0x08005821
 8005808:	08005839 	.word	0x08005839
 800580c:	08005839 	.word	0x08005839
 8005810:	08005839 	.word	0x08005839
 8005814:	08005831 	.word	0x08005831
 8005818:	2300      	movs	r3, #0
 800581a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800581e:	e0d8      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005820:	2302      	movs	r3, #2
 8005822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005826:	e0d4      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005828:	2304      	movs	r3, #4
 800582a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800582e:	e0d0      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005830:	2308      	movs	r3, #8
 8005832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005836:	e0cc      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005838:	2310      	movs	r3, #16
 800583a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800583e:	e0c8      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a5e      	ldr	r2, [pc, #376]	@ (80059c0 <UART_SetConfig+0x2d4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d125      	bne.n	8005896 <UART_SetConfig+0x1aa>
 800584a:	4b5b      	ldr	r3, [pc, #364]	@ (80059b8 <UART_SetConfig+0x2cc>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005850:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005854:	2b30      	cmp	r3, #48	@ 0x30
 8005856:	d016      	beq.n	8005886 <UART_SetConfig+0x19a>
 8005858:	2b30      	cmp	r3, #48	@ 0x30
 800585a:	d818      	bhi.n	800588e <UART_SetConfig+0x1a2>
 800585c:	2b20      	cmp	r3, #32
 800585e:	d00a      	beq.n	8005876 <UART_SetConfig+0x18a>
 8005860:	2b20      	cmp	r3, #32
 8005862:	d814      	bhi.n	800588e <UART_SetConfig+0x1a2>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <UART_SetConfig+0x182>
 8005868:	2b10      	cmp	r3, #16
 800586a:	d008      	beq.n	800587e <UART_SetConfig+0x192>
 800586c:	e00f      	b.n	800588e <UART_SetConfig+0x1a2>
 800586e:	2300      	movs	r3, #0
 8005870:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005874:	e0ad      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005876:	2302      	movs	r3, #2
 8005878:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587c:	e0a9      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800587e:	2304      	movs	r3, #4
 8005880:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005884:	e0a5      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005886:	2308      	movs	r3, #8
 8005888:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800588c:	e0a1      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800588e:	2310      	movs	r3, #16
 8005890:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005894:	e09d      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a4a      	ldr	r2, [pc, #296]	@ (80059c4 <UART_SetConfig+0x2d8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d125      	bne.n	80058ec <UART_SetConfig+0x200>
 80058a0:	4b45      	ldr	r3, [pc, #276]	@ (80059b8 <UART_SetConfig+0x2cc>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80058ac:	d016      	beq.n	80058dc <UART_SetConfig+0x1f0>
 80058ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80058b0:	d818      	bhi.n	80058e4 <UART_SetConfig+0x1f8>
 80058b2:	2b80      	cmp	r3, #128	@ 0x80
 80058b4:	d00a      	beq.n	80058cc <UART_SetConfig+0x1e0>
 80058b6:	2b80      	cmp	r3, #128	@ 0x80
 80058b8:	d814      	bhi.n	80058e4 <UART_SetConfig+0x1f8>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <UART_SetConfig+0x1d8>
 80058be:	2b40      	cmp	r3, #64	@ 0x40
 80058c0:	d008      	beq.n	80058d4 <UART_SetConfig+0x1e8>
 80058c2:	e00f      	b.n	80058e4 <UART_SetConfig+0x1f8>
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ca:	e082      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80058cc:	2302      	movs	r3, #2
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d2:	e07e      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80058d4:	2304      	movs	r3, #4
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058da:	e07a      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80058dc:	2308      	movs	r3, #8
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e2:	e076      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80058e4:	2310      	movs	r3, #16
 80058e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ea:	e072      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a35      	ldr	r2, [pc, #212]	@ (80059c8 <UART_SetConfig+0x2dc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d12a      	bne.n	800594c <UART_SetConfig+0x260>
 80058f6:	4b30      	ldr	r3, [pc, #192]	@ (80059b8 <UART_SetConfig+0x2cc>)
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005900:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005904:	d01a      	beq.n	800593c <UART_SetConfig+0x250>
 8005906:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800590a:	d81b      	bhi.n	8005944 <UART_SetConfig+0x258>
 800590c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005910:	d00c      	beq.n	800592c <UART_SetConfig+0x240>
 8005912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005916:	d815      	bhi.n	8005944 <UART_SetConfig+0x258>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <UART_SetConfig+0x238>
 800591c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005920:	d008      	beq.n	8005934 <UART_SetConfig+0x248>
 8005922:	e00f      	b.n	8005944 <UART_SetConfig+0x258>
 8005924:	2300      	movs	r3, #0
 8005926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800592a:	e052      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800592c:	2302      	movs	r3, #2
 800592e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005932:	e04e      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005934:	2304      	movs	r3, #4
 8005936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800593a:	e04a      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800593c:	2308      	movs	r3, #8
 800593e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005942:	e046      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005944:	2310      	movs	r3, #16
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800594a:	e042      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a17      	ldr	r2, [pc, #92]	@ (80059b0 <UART_SetConfig+0x2c4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d13a      	bne.n	80059cc <UART_SetConfig+0x2e0>
 8005956:	4b18      	ldr	r3, [pc, #96]	@ (80059b8 <UART_SetConfig+0x2cc>)
 8005958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005960:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005964:	d01a      	beq.n	800599c <UART_SetConfig+0x2b0>
 8005966:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800596a:	d81b      	bhi.n	80059a4 <UART_SetConfig+0x2b8>
 800596c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005970:	d00c      	beq.n	800598c <UART_SetConfig+0x2a0>
 8005972:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005976:	d815      	bhi.n	80059a4 <UART_SetConfig+0x2b8>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <UART_SetConfig+0x298>
 800597c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005980:	d008      	beq.n	8005994 <UART_SetConfig+0x2a8>
 8005982:	e00f      	b.n	80059a4 <UART_SetConfig+0x2b8>
 8005984:	2300      	movs	r3, #0
 8005986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800598a:	e022      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800598c:	2302      	movs	r3, #2
 800598e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005992:	e01e      	b.n	80059d2 <UART_SetConfig+0x2e6>
 8005994:	2304      	movs	r3, #4
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800599a:	e01a      	b.n	80059d2 <UART_SetConfig+0x2e6>
 800599c:	2308      	movs	r3, #8
 800599e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059a2:	e016      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80059a4:	2310      	movs	r3, #16
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059aa:	e012      	b.n	80059d2 <UART_SetConfig+0x2e6>
 80059ac:	efff69f3 	.word	0xefff69f3
 80059b0:	40008000 	.word	0x40008000
 80059b4:	40013800 	.word	0x40013800
 80059b8:	40021000 	.word	0x40021000
 80059bc:	40004400 	.word	0x40004400
 80059c0:	40004800 	.word	0x40004800
 80059c4:	40004c00 	.word	0x40004c00
 80059c8:	40005000 	.word	0x40005000
 80059cc:	2310      	movs	r3, #16
 80059ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a9f      	ldr	r2, [pc, #636]	@ (8005c54 <UART_SetConfig+0x568>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d17a      	bne.n	8005ad2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d824      	bhi.n	8005a2e <UART_SetConfig+0x342>
 80059e4:	a201      	add	r2, pc, #4	@ (adr r2, 80059ec <UART_SetConfig+0x300>)
 80059e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ea:	bf00      	nop
 80059ec:	08005a11 	.word	0x08005a11
 80059f0:	08005a2f 	.word	0x08005a2f
 80059f4:	08005a19 	.word	0x08005a19
 80059f8:	08005a2f 	.word	0x08005a2f
 80059fc:	08005a1f 	.word	0x08005a1f
 8005a00:	08005a2f 	.word	0x08005a2f
 8005a04:	08005a2f 	.word	0x08005a2f
 8005a08:	08005a2f 	.word	0x08005a2f
 8005a0c:	08005a27 	.word	0x08005a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a10:	f7fd fd3c 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 8005a14:	61f8      	str	r0, [r7, #28]
        break;
 8005a16:	e010      	b.n	8005a3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a18:	4b8f      	ldr	r3, [pc, #572]	@ (8005c58 <UART_SetConfig+0x56c>)
 8005a1a:	61fb      	str	r3, [r7, #28]
        break;
 8005a1c:	e00d      	b.n	8005a3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a1e:	f7fd fc9d 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8005a22:	61f8      	str	r0, [r7, #28]
        break;
 8005a24:	e009      	b.n	8005a3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a2a:	61fb      	str	r3, [r7, #28]
        break;
 8005a2c:	e005      	b.n	8005a3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80fb 	beq.w	8005c38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	4613      	mov	r3, r2
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	4413      	add	r3, r2
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d305      	bcc.n	8005a5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d903      	bls.n	8005a66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a64:	e0e8      	b.n	8005c38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	461c      	mov	r4, r3
 8005a6c:	4615      	mov	r5, r2
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	022b      	lsls	r3, r5, #8
 8005a78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a7c:	0222      	lsls	r2, r4, #8
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	6849      	ldr	r1, [r1, #4]
 8005a82:	0849      	lsrs	r1, r1, #1
 8005a84:	2000      	movs	r0, #0
 8005a86:	4688      	mov	r8, r1
 8005a88:	4681      	mov	r9, r0
 8005a8a:	eb12 0a08 	adds.w	sl, r2, r8
 8005a8e:	eb43 0b09 	adc.w	fp, r3, r9
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aa0:	4650      	mov	r0, sl
 8005aa2:	4659      	mov	r1, fp
 8005aa4:	f7fa fb90 	bl	80001c8 <__aeabi_uldivmod>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4613      	mov	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ab6:	d308      	bcc.n	8005aca <UART_SetConfig+0x3de>
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005abe:	d204      	bcs.n	8005aca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	60da      	str	r2, [r3, #12]
 8005ac8:	e0b6      	b.n	8005c38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ad0:	e0b2      	b.n	8005c38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ada:	d15e      	bne.n	8005b9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005adc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d828      	bhi.n	8005b36 <UART_SetConfig+0x44a>
 8005ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8005aec <UART_SetConfig+0x400>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	08005b37 	.word	0x08005b37
 8005afc:	08005b27 	.word	0x08005b27
 8005b00:	08005b37 	.word	0x08005b37
 8005b04:	08005b37 	.word	0x08005b37
 8005b08:	08005b37 	.word	0x08005b37
 8005b0c:	08005b2f 	.word	0x08005b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b10:	f7fd fcbc 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 8005b14:	61f8      	str	r0, [r7, #28]
        break;
 8005b16:	e014      	b.n	8005b42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b18:	f7fd fcce 	bl	80034b8 <HAL_RCC_GetPCLK2Freq>
 8005b1c:	61f8      	str	r0, [r7, #28]
        break;
 8005b1e:	e010      	b.n	8005b42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b20:	4b4d      	ldr	r3, [pc, #308]	@ (8005c58 <UART_SetConfig+0x56c>)
 8005b22:	61fb      	str	r3, [r7, #28]
        break;
 8005b24:	e00d      	b.n	8005b42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b26:	f7fd fc19 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8005b2a:	61f8      	str	r0, [r7, #28]
        break;
 8005b2c:	e009      	b.n	8005b42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b32:	61fb      	str	r3, [r7, #28]
        break;
 8005b34:	e005      	b.n	8005b42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d077      	beq.n	8005c38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	005a      	lsls	r2, r3, #1
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	085b      	lsrs	r3, r3, #1
 8005b52:	441a      	add	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b0f      	cmp	r3, #15
 8005b62:	d916      	bls.n	8005b92 <UART_SetConfig+0x4a6>
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b6a:	d212      	bcs.n	8005b92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f023 030f 	bic.w	r3, r3, #15
 8005b74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	085b      	lsrs	r3, r3, #1
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	8afb      	ldrh	r3, [r7, #22]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	8afa      	ldrh	r2, [r7, #22]
 8005b8e:	60da      	str	r2, [r3, #12]
 8005b90:	e052      	b.n	8005c38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b98:	e04e      	b.n	8005c38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d827      	bhi.n	8005bf2 <UART_SetConfig+0x506>
 8005ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba8 <UART_SetConfig+0x4bc>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005bd5 	.word	0x08005bd5
 8005bb0:	08005bdd 	.word	0x08005bdd
 8005bb4:	08005bf3 	.word	0x08005bf3
 8005bb8:	08005be3 	.word	0x08005be3
 8005bbc:	08005bf3 	.word	0x08005bf3
 8005bc0:	08005bf3 	.word	0x08005bf3
 8005bc4:	08005bf3 	.word	0x08005bf3
 8005bc8:	08005beb 	.word	0x08005beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bcc:	f7fd fc5e 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 8005bd0:	61f8      	str	r0, [r7, #28]
        break;
 8005bd2:	e014      	b.n	8005bfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bd4:	f7fd fc70 	bl	80034b8 <HAL_RCC_GetPCLK2Freq>
 8005bd8:	61f8      	str	r0, [r7, #28]
        break;
 8005bda:	e010      	b.n	8005bfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8005c58 <UART_SetConfig+0x56c>)
 8005bde:	61fb      	str	r3, [r7, #28]
        break;
 8005be0:	e00d      	b.n	8005bfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005be2:	f7fd fbbb 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8005be6:	61f8      	str	r0, [r7, #28]
        break;
 8005be8:	e009      	b.n	8005bfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bee:	61fb      	str	r3, [r7, #28]
        break;
 8005bf0:	e005      	b.n	8005bfe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005bfc:	bf00      	nop
    }

    if (pclk != 0U)
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d019      	beq.n	8005c38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	085a      	lsrs	r2, r3, #1
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	441a      	add	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b0f      	cmp	r3, #15
 8005c1c:	d909      	bls.n	8005c32 <UART_SetConfig+0x546>
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c24:	d205      	bcs.n	8005c32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60da      	str	r2, [r3, #12]
 8005c30:	e002      	b.n	8005c38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3728      	adds	r7, #40	@ 0x28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c52:	bf00      	nop
 8005c54:	40008000 	.word	0x40008000
 8005c58:	00f42400 	.word	0x00f42400

08005c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01a      	beq.n	8005d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d5a:	d10a      	bne.n	8005d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	605a      	str	r2, [r3, #4]
  }
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b098      	sub	sp, #96	@ 0x60
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005db0:	f7fb fa10 	bl	80011d4 <HAL_GetTick>
 8005db4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d12e      	bne.n	8005e22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f88c 	bl	8005ef0 <UART_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d021      	beq.n	8005e22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005df2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e6      	bne.n	8005dde <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e062      	b.n	8005ee8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d149      	bne.n	8005ec4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f856 	bl	8005ef0 <UART_WaitOnFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d03c      	beq.n	8005ec4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	623b      	str	r3, [r7, #32]
   return(result);
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e6      	bne.n	8005e4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3308      	adds	r3, #8
 8005e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e9c:	61fa      	str	r2, [r7, #28]
 8005e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	69b9      	ldr	r1, [r7, #24]
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e5      	bne.n	8005e7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e011      	b.n	8005ee8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3758      	adds	r7, #88	@ 0x58
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	4613      	mov	r3, r2
 8005efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f00:	e04f      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d04b      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0a:	f7fb f963 	bl	80011d4 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d302      	bcc.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e04e      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d037      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b80      	cmp	r3, #128	@ 0x80
 8005f36:	d034      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b40      	cmp	r3, #64	@ 0x40
 8005f3c:	d031      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d110      	bne.n	8005f6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2208      	movs	r2, #8
 8005f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f8ff 	bl	8006158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2208      	movs	r2, #8
 8005f5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e029      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f7c:	d111      	bne.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f8e5 	bl	8006158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e00f      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4013      	ands	r3, r2
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	bf0c      	ite	eq
 8005fb2:	2301      	moveq	r3, #1
 8005fb4:	2300      	movne	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d0a0      	beq.n	8005f02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b097      	sub	sp, #92	@ 0x5c
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	88fa      	ldrh	r2, [r7, #6]
 8005fe4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	88fa      	ldrh	r2, [r7, #6]
 8005fec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ffe:	d10e      	bne.n	800601e <UART_Start_Receive_IT+0x52>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d105      	bne.n	8006014 <UART_Start_Receive_IT+0x48>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800600e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006012:	e02d      	b.n	8006070 <UART_Start_Receive_IT+0xa4>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	22ff      	movs	r2, #255	@ 0xff
 8006018:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800601c:	e028      	b.n	8006070 <UART_Start_Receive_IT+0xa4>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10d      	bne.n	8006042 <UART_Start_Receive_IT+0x76>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <UART_Start_Receive_IT+0x6c>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	22ff      	movs	r2, #255	@ 0xff
 8006032:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006036:	e01b      	b.n	8006070 <UART_Start_Receive_IT+0xa4>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	227f      	movs	r2, #127	@ 0x7f
 800603c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006040:	e016      	b.n	8006070 <UART_Start_Receive_IT+0xa4>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800604a:	d10d      	bne.n	8006068 <UART_Start_Receive_IT+0x9c>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d104      	bne.n	800605e <UART_Start_Receive_IT+0x92>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	227f      	movs	r2, #127	@ 0x7f
 8006058:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800605c:	e008      	b.n	8006070 <UART_Start_Receive_IT+0xa4>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	223f      	movs	r2, #63	@ 0x3f
 8006062:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006066:	e003      	b.n	8006070 <UART_Start_Receive_IT+0xa4>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2222      	movs	r2, #34	@ 0x22
 800607c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3308      	adds	r3, #8
 8006086:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800608a:	e853 3f00 	ldrex	r3, [r3]
 800608e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	657b      	str	r3, [r7, #84]	@ 0x54
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3308      	adds	r3, #8
 800609e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80060a0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80060a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80060a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060a8:	e841 2300 	strex	r3, r2, [r1]
 80060ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80060ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e5      	bne.n	8006080 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060bc:	d107      	bne.n	80060ce <UART_Start_Receive_IT+0x102>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d103      	bne.n	80060ce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4a21      	ldr	r2, [pc, #132]	@ (8006150 <UART_Start_Receive_IT+0x184>)
 80060ca:	669a      	str	r2, [r3, #104]	@ 0x68
 80060cc:	e002      	b.n	80060d4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a20      	ldr	r2, [pc, #128]	@ (8006154 <UART_Start_Receive_IT+0x188>)
 80060d2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d019      	beq.n	8006110 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80060f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80060fc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006100:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e6      	bne.n	80060dc <UART_Start_Receive_IT+0x110>
 800610e:	e018      	b.n	8006142 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	613b      	str	r3, [r7, #16]
   return(result);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f043 0320 	orr.w	r3, r3, #32
 8006124:	653b      	str	r3, [r7, #80]	@ 0x50
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800612e:	623b      	str	r3, [r7, #32]
 8006130:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	69f9      	ldr	r1, [r7, #28]
 8006134:	6a3a      	ldr	r2, [r7, #32]
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	61bb      	str	r3, [r7, #24]
   return(result);
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e6      	bne.n	8006110 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	375c      	adds	r7, #92	@ 0x5c
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	0800645d 	.word	0x0800645d
 8006154:	080062a1 	.word	0x080062a1

08006158 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b095      	sub	sp, #84	@ 0x54
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800617e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006180:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006184:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800618c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e6      	bne.n	8006160 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3308      	adds	r3, #8
 8006198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e5      	bne.n	8006192 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d118      	bne.n	8006200 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	60bb      	str	r3, [r7, #8]
   return(result);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f023 0310 	bic.w	r3, r3, #16
 80061e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	461a      	mov	r2, r3
 80061ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	6979      	ldr	r1, [r7, #20]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	613b      	str	r3, [r7, #16]
   return(result);
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e6      	bne.n	80061ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006214:	bf00      	nop
 8006216:	3754      	adds	r7, #84	@ 0x54
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f7ff fa3e 	bl	80056c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006244:	bf00      	nop
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	60bb      	str	r3, [r7, #8]
   return(result);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006268:	61fb      	str	r3, [r7, #28]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	61bb      	str	r3, [r7, #24]
 8006274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6979      	ldr	r1, [r7, #20]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	613b      	str	r3, [r7, #16]
   return(result);
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e6      	bne.n	8006254 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7ff fa0a 	bl	80056ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006298:	bf00      	nop
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b09c      	sub	sp, #112	@ 0x70
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062b8:	2b22      	cmp	r3, #34	@ 0x22
 80062ba:	f040 80be 	bne.w	800643a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80062c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062cc:	b2d9      	uxtb	r1, r3
 80062ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d8:	400a      	ands	r2, r1
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	f040 80a3 	bne.w	800644e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800631c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006326:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006328:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800632c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e6      	bne.n	8006308 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3308      	adds	r3, #8
 8006340:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800634a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800634c:	f023 0301 	bic.w	r3, r3, #1
 8006350:	667b      	str	r3, [r7, #100]	@ 0x64
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3308      	adds	r3, #8
 8006358:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800635a:	647a      	str	r2, [r7, #68]	@ 0x44
 800635c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006360:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e5      	bne.n	800633a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a34      	ldr	r2, [pc, #208]	@ (8006458 <UART_RxISR_8BIT+0x1b8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d01f      	beq.n	80063cc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d018      	beq.n	80063cc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	623b      	str	r3, [r7, #32]
   return(result);
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e6      	bne.n	800639a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d12e      	bne.n	8006432 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0310 	bic.w	r3, r3, #16
 80063ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063f8:	61fb      	str	r3, [r7, #28]
 80063fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	69b9      	ldr	r1, [r7, #24]
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	617b      	str	r3, [r7, #20]
   return(result);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e6      	bne.n	80063da <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b10      	cmp	r3, #16
 8006418:	d103      	bne.n	8006422 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2210      	movs	r2, #16
 8006420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff f952 	bl	80056d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006430:	e00d      	b.n	800644e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fa f840 	bl	80004b8 <HAL_UART_RxCpltCallback>
}
 8006438:	e009      	b.n	800644e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	8b1b      	ldrh	r3, [r3, #24]
 8006440:	b29a      	uxth	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0208 	orr.w	r2, r2, #8
 800644a:	b292      	uxth	r2, r2
 800644c:	831a      	strh	r2, [r3, #24]
}
 800644e:	bf00      	nop
 8006450:	3770      	adds	r7, #112	@ 0x70
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	40008000 	.word	0x40008000

0800645c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b09c      	sub	sp, #112	@ 0x70
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800646a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006474:	2b22      	cmp	r3, #34	@ 0x22
 8006476:	f040 80be 	bne.w	80065f6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006480:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006488:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800648a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800648e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006492:	4013      	ands	r3, r2
 8006494:	b29a      	uxth	r2, r3
 8006496:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006498:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649e:	1c9a      	adds	r2, r3, #2
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f040 80a3 	bne.w	800660a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80064d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80064e4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80064e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80064f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e6      	bne.n	80064c4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3308      	adds	r3, #8
 80064fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	663b      	str	r3, [r7, #96]	@ 0x60
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3308      	adds	r3, #8
 8006514:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006516:	643a      	str	r2, [r7, #64]	@ 0x40
 8006518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800651c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1e5      	bne.n	80064f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a34      	ldr	r2, [pc, #208]	@ (8006614 <UART_RxISR_16BIT+0x1b8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d01f      	beq.n	8006588 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d018      	beq.n	8006588 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	61fb      	str	r3, [r7, #28]
   return(result);
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800656a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006576:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800657a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800657c:	e841 2300 	strex	r3, r2, [r1]
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e6      	bne.n	8006556 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800658c:	2b01      	cmp	r3, #1
 800658e:	d12e      	bne.n	80065ee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f023 0310 	bic.w	r3, r3, #16
 80065aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6979      	ldr	r1, [r7, #20]
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	613b      	str	r3, [r7, #16]
   return(result);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e6      	bne.n	8006596 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	2b10      	cmp	r3, #16
 80065d4:	d103      	bne.n	80065de <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2210      	movs	r2, #16
 80065dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff f874 	bl	80056d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065ec:	e00d      	b.n	800660a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7f9 ff62 	bl	80004b8 <HAL_UART_RxCpltCallback>
}
 80065f4:	e009      	b.n	800660a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	8b1b      	ldrh	r3, [r3, #24]
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0208 	orr.w	r2, r2, #8
 8006606:	b292      	uxth	r2, r2
 8006608:	831a      	strh	r2, [r3, #24]
}
 800660a:	bf00      	nop
 800660c:	3770      	adds	r7, #112	@ 0x70
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	40008000 	.word	0x40008000

08006618 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 800662c:	b480      	push	{r7}
 800662e:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 8006632:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8006634:	2300      	movs	r3, #0
 8006636:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 800663a:	2301      	movs	r3, #1
 800663c:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8006640:	e02f      	b.n	80066a2 <aes_gen_tables+0x76>
    {
        pow[i] = x;
 8006642:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8006646:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800664a:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 800664e:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8006652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 8006656:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800665a:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800665e:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8006662:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8006666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = MBEDTLS_BYTE_0( x ^ XTIME( x ) );
 800666a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800666e:	b25a      	sxtb	r2, r3
 8006670:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	b25b      	sxtb	r3, r3
 8006678:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 800667c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8006680:	2900      	cmp	r1, #0
 8006682:	d001      	beq.n	8006688 <aes_gen_tables+0x5c>
 8006684:	211b      	movs	r1, #27
 8006686:	e000      	b.n	800668a <aes_gen_tables+0x5e>
 8006688:	2100      	movs	r1, #0
 800668a:	404b      	eors	r3, r1
 800668c:	b25b      	sxtb	r3, r3
 800668e:	4053      	eors	r3, r2
 8006690:	b25b      	sxtb	r3, r3
 8006692:	b2db      	uxtb	r3, r3
 8006694:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 256; i++ )
 8006698:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800669c:	3301      	adds	r3, #1
 800669e:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80066a2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80066a6:	2bff      	cmp	r3, #255	@ 0xff
 80066a8:	ddcb      	ble.n	8006642 <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80066aa:	2300      	movs	r3, #0
 80066ac:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80066b0:	2301      	movs	r3, #1
 80066b2:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 80066b6:	e01d      	b.n	80066f4 <aes_gen_tables+0xc8>
    {
        RCON[i] = (uint32_t) x;
 80066b8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80066bc:	49d6      	ldr	r1, [pc, #856]	@ (8006a18 <aes_gen_tables+0x3ec>)
 80066be:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80066c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = MBEDTLS_BYTE_0( XTIME( x ) );
 80066c6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	b25b      	sxtb	r3, r3
 80066ce:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80066d2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80066d6:	2a00      	cmp	r2, #0
 80066d8:	d001      	beq.n	80066de <aes_gen_tables+0xb2>
 80066da:	221b      	movs	r2, #27
 80066dc:	e000      	b.n	80066e0 <aes_gen_tables+0xb4>
 80066de:	2200      	movs	r2, #0
 80066e0:	4053      	eors	r3, r2
 80066e2:	b25b      	sxtb	r3, r3
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 10; i++ )
 80066ea:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80066ee:	3301      	adds	r3, #1
 80066f0:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80066f4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80066f8:	2b09      	cmp	r3, #9
 80066fa:	dddd      	ble.n	80066b8 <aes_gen_tables+0x8c>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 80066fc:	4bc7      	ldr	r3, [pc, #796]	@ (8006a1c <aes_gen_tables+0x3f0>)
 80066fe:	2263      	movs	r2, #99	@ 0x63
 8006700:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 8006702:	4bc7      	ldr	r3, [pc, #796]	@ (8006a20 <aes_gen_tables+0x3f4>)
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

    for( i = 1; i < 256; i++ )
 800670a:	2301      	movs	r3, #1
 800670c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8006710:	e07e      	b.n	8006810 <aes_gen_tables+0x1e4>
    {
        x = pow[255 - log[i]];
 8006712:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8006716:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800671a:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 800671e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006722:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8006726:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800672a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800672e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006732:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        y  = x; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8006736:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800673a:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 800673e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	b25a      	sxtb	r2, r3
 8006746:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800674a:	11db      	asrs	r3, r3, #7
 800674c:	b25b      	sxtb	r3, r3
 800674e:	4313      	orrs	r3, r2
 8006750:	b25b      	sxtb	r3, r3
 8006752:	b2db      	uxtb	r3, r3
 8006754:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8006758:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 800675c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8006760:	4053      	eors	r3, r2
 8006762:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8006766:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	b25a      	sxtb	r2, r3
 800676e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8006772:	11db      	asrs	r3, r3, #7
 8006774:	b25b      	sxtb	r3, r3
 8006776:	4313      	orrs	r3, r2
 8006778:	b25b      	sxtb	r3, r3
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8006780:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8006784:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8006788:	4053      	eors	r3, r2
 800678a:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 800678e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	b25a      	sxtb	r2, r3
 8006796:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800679a:	11db      	asrs	r3, r3, #7
 800679c:	b25b      	sxtb	r3, r3
 800679e:	4313      	orrs	r3, r2
 80067a0:	b25b      	sxtb	r3, r3
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 80067a8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80067ac:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80067b0:	4053      	eors	r3, r2
 80067b2:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 80067b6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	b25a      	sxtb	r2, r3
 80067be:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80067c2:	11db      	asrs	r3, r3, #7
 80067c4:	b25b      	sxtb	r3, r3
 80067c6:	4313      	orrs	r3, r2
 80067c8:	b25b      	sxtb	r3, r3
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y ^ 0x63;
 80067d0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80067d4:	f083 0363 	eor.w	r3, r3, #99	@ 0x63
 80067d8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80067dc:	4053      	eors	r3, r2
 80067de:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        FSb[i] = (unsigned char) x;
 80067e2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80067e6:	b2d9      	uxtb	r1, r3
 80067e8:	4a8c      	ldr	r2, [pc, #560]	@ (8006a1c <aes_gen_tables+0x3f0>)
 80067ea:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80067ee:	4413      	add	r3, r2
 80067f0:	460a      	mov	r2, r1
 80067f2:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 80067f4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80067f8:	b2d9      	uxtb	r1, r3
 80067fa:	4a89      	ldr	r2, [pc, #548]	@ (8006a20 <aes_gen_tables+0x3f4>)
 80067fc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8006800:	4413      	add	r3, r2
 8006802:	460a      	mov	r2, r1
 8006804:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 8006806:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800680a:	3301      	adds	r3, #1
 800680c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8006810:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006814:	2bff      	cmp	r3, #255	@ 0xff
 8006816:	f77f af7c 	ble.w	8006712 <aes_gen_tables+0xe6>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 800681a:	2300      	movs	r3, #0
 800681c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8006820:	e13b      	b.n	8006a9a <aes_gen_tables+0x46e>
    {
        x = FSb[i];
 8006822:	4a7e      	ldr	r2, [pc, #504]	@ (8006a1c <aes_gen_tables+0x3f0>)
 8006824:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006828:	4413      	add	r3, r2
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
        y = MBEDTLS_BYTE_0( XTIME( x ) );
 8006830:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	b25b      	sxtb	r3, r3
 8006838:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 800683c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8006840:	2a00      	cmp	r2, #0
 8006842:	d001      	beq.n	8006848 <aes_gen_tables+0x21c>
 8006844:	221b      	movs	r2, #27
 8006846:	e000      	b.n	800684a <aes_gen_tables+0x21e>
 8006848:	2200      	movs	r2, #0
 800684a:	4053      	eors	r3, r2
 800684c:	b25b      	sxtb	r3, r3
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        z = MBEDTLS_BYTE_0( y ^ x );
 8006854:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8006858:	b25a      	sxtb	r2, r3
 800685a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800685e:	b25b      	sxtb	r3, r3
 8006860:	4053      	eors	r3, r2
 8006862:	b25b      	sxtb	r3, r3
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 800686a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800686e:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 8006870:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8006874:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 8006876:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800687a:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 800687c:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 800687e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	@ 0x800
 8006882:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 8006884:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 8006886:	4967      	ldr	r1, [pc, #412]	@ (8006a24 <aes_gen_tables+0x3f8>)
 8006888:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800688c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 8006890:	4a64      	ldr	r2, [pc, #400]	@ (8006a24 <aes_gen_tables+0x3f8>)
 8006892:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689a:	ea4f 6233 	mov.w	r2, r3, ror #24
 800689e:	4962      	ldr	r1, [pc, #392]	@ (8006a28 <aes_gen_tables+0x3fc>)
 80068a0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80068a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 80068a8:	4a5f      	ldr	r2, [pc, #380]	@ (8006a28 <aes_gen_tables+0x3fc>)
 80068aa:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80068ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b2:	ea4f 6233 	mov.w	r2, r3, ror #24
 80068b6:	495d      	ldr	r1, [pc, #372]	@ (8006a2c <aes_gen_tables+0x400>)
 80068b8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80068bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 80068c0:	4a5a      	ldr	r2, [pc, #360]	@ (8006a2c <aes_gen_tables+0x400>)
 80068c2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80068c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ca:	ea4f 6233 	mov.w	r2, r3, ror #24
 80068ce:	4958      	ldr	r1, [pc, #352]	@ (8006a30 <aes_gen_tables+0x404>)
 80068d0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80068d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 80068d8:	4a51      	ldr	r2, [pc, #324]	@ (8006a20 <aes_gen_tables+0x3f4>)
 80068da:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80068de:	4413      	add	r3, r2
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80068e6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d020      	beq.n	8006930 <aes_gen_tables+0x304>
 80068ee:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80068f2:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80068f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068f8:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80068fc:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8006900:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8006904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006908:	441a      	add	r2, r3
 800690a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a34 <aes_gen_tables+0x408>)
 800690c:	fb83 1302 	smull	r1, r3, r3, r2
 8006910:	4413      	add	r3, r2
 8006912:	11d9      	asrs	r1, r3, #7
 8006914:	17d3      	asrs	r3, r2, #31
 8006916:	1ac9      	subs	r1, r1, r3
 8006918:	460b      	mov	r3, r1
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	1a5b      	subs	r3, r3, r1
 800691e:	1ad1      	subs	r1, r2, r3
 8006920:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8006924:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8006928:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800692c:	4618      	mov	r0, r3
 800692e:	e000      	b.n	8006932 <aes_gen_tables+0x306>
 8006930:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8006932:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8006936:	2b00      	cmp	r3, #0
 8006938:	d020      	beq.n	800697c <aes_gen_tables+0x350>
 800693a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800693e:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8006942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006944:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8006948:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800694c:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8006950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006954:	441a      	add	r2, r3
 8006956:	4b37      	ldr	r3, [pc, #220]	@ (8006a34 <aes_gen_tables+0x408>)
 8006958:	fb83 1302 	smull	r1, r3, r3, r2
 800695c:	4413      	add	r3, r2
 800695e:	11d9      	asrs	r1, r3, #7
 8006960:	17d3      	asrs	r3, r2, #31
 8006962:	1ac9      	subs	r1, r1, r3
 8006964:	460b      	mov	r3, r1
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	1a5b      	subs	r3, r3, r1
 800696a:	1ad1      	subs	r1, r2, r3
 800696c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8006970:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8006974:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	e000      	b.n	800697e <aes_gen_tables+0x352>
 800697c:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800697e:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8006980:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8006984:	2b00      	cmp	r3, #0
 8006986:	d020      	beq.n	80069ca <aes_gen_tables+0x39e>
 8006988:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800698c:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8006990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006992:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8006996:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800699a:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 800699e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069a2:	441a      	add	r2, r3
 80069a4:	4b23      	ldr	r3, [pc, #140]	@ (8006a34 <aes_gen_tables+0x408>)
 80069a6:	fb83 1302 	smull	r1, r3, r3, r2
 80069aa:	4413      	add	r3, r2
 80069ac:	11d9      	asrs	r1, r3, #7
 80069ae:	17d3      	asrs	r3, r2, #31
 80069b0:	1ac9      	subs	r1, r1, r3
 80069b2:	460b      	mov	r3, r1
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	1a5b      	subs	r3, r3, r1
 80069b8:	1ad1      	subs	r1, r2, r3
 80069ba:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80069be:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80069c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069c6:	041b      	lsls	r3, r3, #16
 80069c8:	e000      	b.n	80069cc <aes_gen_tables+0x3a0>
 80069ca:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80069cc:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80069ce:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d030      	beq.n	8006a38 <aes_gen_tables+0x40c>
 80069d6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80069da:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80069de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e0:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80069e4:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80069e8:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80069ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069f0:	441a      	add	r2, r3
 80069f2:	4b10      	ldr	r3, [pc, #64]	@ (8006a34 <aes_gen_tables+0x408>)
 80069f4:	fb83 1302 	smull	r1, r3, r3, r2
 80069f8:	4413      	add	r3, r2
 80069fa:	11d9      	asrs	r1, r3, #7
 80069fc:	17d3      	asrs	r3, r2, #31
 80069fe:	1ac9      	subs	r1, r1, r3
 8006a00:	460b      	mov	r3, r1
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	1a5b      	subs	r3, r3, r1
 8006a06:	1ad1      	subs	r1, r2, r3
 8006a08:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8006a0c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8006a10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a14:	061b      	lsls	r3, r3, #24
 8006a16:	e010      	b.n	8006a3a <aes_gen_tables+0x40e>
 8006a18:	200025c4 	.word	0x200025c4
 8006a1c:	200003c4 	.word	0x200003c4
 8006a20:	200014c4 	.word	0x200014c4
 8006a24:	200004c4 	.word	0x200004c4
 8006a28:	200008c4 	.word	0x200008c4
 8006a2c:	20000cc4 	.word	0x20000cc4
 8006a30:	200010c4 	.word	0x200010c4
 8006a34:	80808081 	.word	0x80808081
 8006a38:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8006a3a:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8006a3e:	491d      	ldr	r1, [pc, #116]	@ (8006ab4 <aes_gen_tables+0x488>)
 8006a40:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 8006a48:	4a1a      	ldr	r2, [pc, #104]	@ (8006ab4 <aes_gen_tables+0x488>)
 8006a4a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a52:	ea4f 6233 	mov.w	r2, r3, ror #24
 8006a56:	4918      	ldr	r1, [pc, #96]	@ (8006ab8 <aes_gen_tables+0x48c>)
 8006a58:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 8006a60:	4a15      	ldr	r2, [pc, #84]	@ (8006ab8 <aes_gen_tables+0x48c>)
 8006a62:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a6a:	ea4f 6233 	mov.w	r2, r3, ror #24
 8006a6e:	4913      	ldr	r1, [pc, #76]	@ (8006abc <aes_gen_tables+0x490>)
 8006a70:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 8006a78:	4a10      	ldr	r2, [pc, #64]	@ (8006abc <aes_gen_tables+0x490>)
 8006a7a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a82:	ea4f 6233 	mov.w	r2, r3, ror #24
 8006a86:	490e      	ldr	r1, [pc, #56]	@ (8006ac0 <aes_gen_tables+0x494>)
 8006a88:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 8006a90:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006a94:	3301      	adds	r3, #1
 8006a96:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8006a9a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8006a9e:	2bff      	cmp	r3, #255	@ 0xff
 8006aa0:	f77f aebf 	ble.w	8006822 <aes_gen_tables+0x1f6>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop
 8006aa8:	f607 0714 	addw	r7, r7, #2068	@ 0x814
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	200015c4 	.word	0x200015c4
 8006ab8:	200019c4 	.word	0x200019c4
 8006abc:	20001dc4 	.word	0x20001dc4
 8006ac0:	200021c4 	.word	0x200021c4

08006ac4 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8006acc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fe08 	bl	80086e8 <memset>
}
 8006ad8:	bf00      	nop
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8006aee:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fde4 	bl	80086c0 <mbedtls_platform_zeroize>
 8006af8:	e000      	b.n	8006afc <mbedtls_aes_free+0x1c>
        return;
 8006afa:	bf00      	nop
}
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b16:	d012      	beq.n	8006b3e <mbedtls_aes_setkey_enc+0x3a>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b1e:	d812      	bhi.n	8006b46 <mbedtls_aes_setkey_enc+0x42>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b80      	cmp	r3, #128	@ 0x80
 8006b24:	d003      	beq.n	8006b2e <mbedtls_aes_setkey_enc+0x2a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b2a:	d004      	beq.n	8006b36 <mbedtls_aes_setkey_enc+0x32>
 8006b2c:	e00b      	b.n	8006b46 <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	220a      	movs	r2, #10
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e00a      	b.n	8006b4c <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	220c      	movs	r2, #12
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	e006      	b.n	8006b4c <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	220e      	movs	r2, #14
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	e002      	b.n	8006b4c <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8006b46:	f06f 031f 	mvn.w	r3, #31
 8006b4a:	e1c7      	b.n	8006edc <mbedtls_aes_setkey_enc+0x3d8>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8006b4c:	4b8d      	ldr	r3, [pc, #564]	@ (8006d84 <mbedtls_aes_setkey_enc+0x280>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d104      	bne.n	8006b5e <mbedtls_aes_setkey_enc+0x5a>
    {
        aes_gen_tables();
 8006b54:	f7ff fd6a 	bl	800662c <aes_gen_tables>
        aes_init_done = 1;
 8006b58:	4b8a      	ldr	r3, [pc, #552]	@ (8006d84 <mbedtls_aes_setkey_enc+0x280>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3308      	adds	r3, #8
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	e027      	b.n	8006bc0 <mbedtls_aes_setkey_enc+0xbc>
    {
        RK[i] = MBEDTLS_GET_UINT32_LE( key, i << 2 );
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	4413      	add	r3, r2
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	3301      	adds	r3, #1
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	4413      	add	r3, r2
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	ea41 0203 	orr.w	r2, r1, r3
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	3302      	adds	r3, #2
 8006b94:	68b9      	ldr	r1, [r7, #8]
 8006b96:	440b      	add	r3, r1
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	041b      	lsls	r3, r3, #16
 8006b9c:	ea42 0103 	orr.w	r1, r2, r3
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	3303      	adds	r3, #3
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	4413      	add	r3, r2
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	061a      	lsls	r2, r3, #24
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	6938      	ldr	r0, [r7, #16]
 8006bb4:	4403      	add	r3, r0
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	095b      	lsrs	r3, r3, #5
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d3d2      	bcc.n	8006b70 <mbedtls_aes_setkey_enc+0x6c>
    }

    switch( ctx->nr )
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b0e      	cmp	r3, #14
 8006bd0:	f000 80d4 	beq.w	8006d7c <mbedtls_aes_setkey_enc+0x278>
 8006bd4:	2b0e      	cmp	r3, #14
 8006bd6:	f300 8180 	bgt.w	8006eda <mbedtls_aes_setkey_enc+0x3d6>
 8006bda:	2b0a      	cmp	r3, #10
 8006bdc:	d002      	beq.n	8006be4 <mbedtls_aes_setkey_enc+0xe0>
 8006bde:	2b0c      	cmp	r3, #12
 8006be0:	d05c      	beq.n	8006c9c <mbedtls_aes_setkey_enc+0x198>
 8006be2:	e17a      	b.n	8006eda <mbedtls_aes_setkey_enc+0x3d6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8006be4:	2300      	movs	r3, #0
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	e054      	b.n	8006c94 <mbedtls_aes_setkey_enc+0x190>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	4966      	ldr	r1, [pc, #408]	@ (8006d88 <mbedtls_aes_setkey_enc+0x284>)
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006bf6:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	320c      	adds	r2, #12
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	0a12      	lsrs	r2, r2, #8
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	4611      	mov	r1, r2
 8006c04:	4a61      	ldr	r2, [pc, #388]	@ (8006d8c <mbedtls_aes_setkey_enc+0x288>)
 8006c06:	5c52      	ldrb	r2, [r2, r1]
                RK[4]  = RK[0] ^ RCON[i] ^
 8006c08:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	330c      	adds	r3, #12
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	0c1b      	lsrs	r3, r3, #16
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	4619      	mov	r1, r3
 8006c16:	4b5d      	ldr	r3, [pc, #372]	@ (8006d8c <mbedtls_aes_setkey_enc+0x288>)
 8006c18:	5c5b      	ldrb	r3, [r3, r1]
 8006c1a:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 8006c1c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	330c      	adds	r3, #12
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	0e1b      	lsrs	r3, r3, #24
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4b58      	ldr	r3, [pc, #352]	@ (8006d8c <mbedtls_aes_setkey_enc+0x288>)
 8006c2c:	5c5b      	ldrb	r3, [r3, r1]
 8006c2e:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 8006c30:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[3] ) ] << 24 );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	330c      	adds	r3, #12
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4b53      	ldr	r3, [pc, #332]	@ (8006d8c <mbedtls_aes_setkey_enc+0x288>)
 8006c40:	5c9b      	ldrb	r3, [r3, r2]
 8006c42:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 8006c48:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8006c4a:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	6819      	ldr	r1, [r3, #0]
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	3310      	adds	r3, #16
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	3314      	adds	r3, #20
 8006c5c:	404a      	eors	r2, r1
 8006c5e:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	3308      	adds	r3, #8
 8006c64:	6819      	ldr	r1, [r3, #0]
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	3314      	adds	r3, #20
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	3318      	adds	r3, #24
 8006c70:	404a      	eors	r2, r1
 8006c72:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	330c      	adds	r3, #12
 8006c78:	6819      	ldr	r1, [r3, #0]
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	3318      	adds	r3, #24
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	331c      	adds	r3, #28
 8006c84:	404a      	eors	r2, r1
 8006c86:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	3310      	adds	r3, #16
 8006c92:	613b      	str	r3, [r7, #16]
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2b09      	cmp	r3, #9
 8006c98:	d9a7      	bls.n	8006bea <mbedtls_aes_setkey_enc+0xe6>
            }
            break;
 8006c9a:	e11e      	b.n	8006eda <mbedtls_aes_setkey_enc+0x3d6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	e068      	b.n	8006d74 <mbedtls_aes_setkey_enc+0x270>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	4938      	ldr	r1, [pc, #224]	@ (8006d88 <mbedtls_aes_setkey_enc+0x284>)
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006cae:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	3214      	adds	r2, #20
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	0a12      	lsrs	r2, r2, #8
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	4611      	mov	r1, r2
 8006cbc:	4a33      	ldr	r2, [pc, #204]	@ (8006d8c <mbedtls_aes_setkey_enc+0x288>)
 8006cbe:	5c52      	ldrb	r2, [r2, r1]
                RK[6]  = RK[0] ^ RCON[i] ^
 8006cc0:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	3314      	adds	r3, #20
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	0c1b      	lsrs	r3, r3, #16
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4b2f      	ldr	r3, [pc, #188]	@ (8006d8c <mbedtls_aes_setkey_enc+0x288>)
 8006cd0:	5c5b      	ldrb	r3, [r3, r1]
 8006cd2:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 8006cd4:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	3314      	adds	r3, #20
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	0e1b      	lsrs	r3, r3, #24
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d8c <mbedtls_aes_setkey_enc+0x288>)
 8006ce4:	5c5b      	ldrb	r3, [r3, r1]
 8006ce6:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 8006ce8:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[5] ) ] << 24 );
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	3314      	adds	r3, #20
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	4b25      	ldr	r3, [pc, #148]	@ (8006d8c <mbedtls_aes_setkey_enc+0x288>)
 8006cf8:	5c9b      	ldrb	r3, [r3, r2]
 8006cfa:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8006d00:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 8006d02:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	3304      	adds	r3, #4
 8006d08:	6819      	ldr	r1, [r3, #0]
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	3318      	adds	r3, #24
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	331c      	adds	r3, #28
 8006d14:	404a      	eors	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	6819      	ldr	r1, [r3, #0]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	331c      	adds	r3, #28
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	3320      	adds	r3, #32
 8006d28:	404a      	eors	r2, r1
 8006d2a:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	330c      	adds	r3, #12
 8006d30:	6819      	ldr	r1, [r3, #0]
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	3320      	adds	r3, #32
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	3324      	adds	r3, #36	@ 0x24
 8006d3c:	404a      	eors	r2, r1
 8006d3e:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	3310      	adds	r3, #16
 8006d44:	6819      	ldr	r1, [r3, #0]
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	3324      	adds	r3, #36	@ 0x24
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	3328      	adds	r3, #40	@ 0x28
 8006d50:	404a      	eors	r2, r1
 8006d52:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	3314      	adds	r3, #20
 8006d58:	6819      	ldr	r1, [r3, #0]
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	3328      	adds	r3, #40	@ 0x28
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	332c      	adds	r3, #44	@ 0x2c
 8006d64:	404a      	eors	r2, r1
 8006d66:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	3318      	adds	r3, #24
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2b07      	cmp	r3, #7
 8006d78:	d993      	bls.n	8006ca2 <mbedtls_aes_setkey_enc+0x19e>
            }
            break;
 8006d7a:	e0ae      	b.n	8006eda <mbedtls_aes_setkey_enc+0x3d6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	e0a6      	b.n	8006ed0 <mbedtls_aes_setkey_enc+0x3cc>
 8006d82:	bf00      	nop
 8006d84:	200025ec 	.word	0x200025ec
 8006d88:	200025c4 	.word	0x200025c4
 8006d8c:	200003c4 	.word	0x200003c4
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	4953      	ldr	r1, [pc, #332]	@ (8006ee4 <mbedtls_aes_setkey_enc+0x3e0>)
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d9c:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	321c      	adds	r2, #28
 8006da2:	6812      	ldr	r2, [r2, #0]
 8006da4:	0a12      	lsrs	r2, r2, #8
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	4611      	mov	r1, r2
 8006daa:	4a4f      	ldr	r2, [pc, #316]	@ (8006ee8 <mbedtls_aes_setkey_enc+0x3e4>)
 8006dac:	5c52      	ldrb	r2, [r2, r1]
                RK[8]  = RK[0] ^ RCON[i] ^
 8006dae:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	331c      	adds	r3, #28
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	0c1b      	lsrs	r3, r3, #16
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4b4a      	ldr	r3, [pc, #296]	@ (8006ee8 <mbedtls_aes_setkey_enc+0x3e4>)
 8006dbe:	5c5b      	ldrb	r3, [r3, r1]
 8006dc0:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 8006dc2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	331c      	adds	r3, #28
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	0e1b      	lsrs	r3, r3, #24
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4b45      	ldr	r3, [pc, #276]	@ (8006ee8 <mbedtls_aes_setkey_enc+0x3e4>)
 8006dd2:	5c5b      	ldrb	r3, [r3, r1]
 8006dd4:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 8006dd6:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[7] ) ] << 24 );
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	331c      	adds	r3, #28
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	4b40      	ldr	r3, [pc, #256]	@ (8006ee8 <mbedtls_aes_setkey_enc+0x3e4>)
 8006de6:	5c9b      	ldrb	r3, [r3, r2]
 8006de8:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8006dee:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 8006df0:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	3304      	adds	r3, #4
 8006df6:	6819      	ldr	r1, [r3, #0]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	3320      	adds	r3, #32
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3324      	adds	r3, #36	@ 0x24
 8006e02:	404a      	eors	r2, r1
 8006e04:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	6819      	ldr	r1, [r3, #0]
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	3324      	adds	r3, #36	@ 0x24
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	3328      	adds	r3, #40	@ 0x28
 8006e16:	404a      	eors	r2, r1
 8006e18:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	6819      	ldr	r1, [r3, #0]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	3328      	adds	r3, #40	@ 0x28
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	332c      	adds	r3, #44	@ 0x2c
 8006e2a:	404a      	eors	r2, r1
 8006e2c:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	3310      	adds	r3, #16
 8006e32:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	322c      	adds	r2, #44	@ 0x2c
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ee8 <mbedtls_aes_setkey_enc+0x3e4>)
 8006e40:	5c52      	ldrb	r2, [r2, r1]
                RK[12] = RK[4] ^
 8006e42:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	332c      	adds	r3, #44	@ 0x2c
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4b25      	ldr	r3, [pc, #148]	@ (8006ee8 <mbedtls_aes_setkey_enc+0x3e4>)
 8006e52:	5c5b      	ldrb	r3, [r3, r1]
 8006e54:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 8006e56:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	332c      	adds	r3, #44	@ 0x2c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	0c1b      	lsrs	r3, r3, #16
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	4619      	mov	r1, r3
 8006e64:	4b20      	ldr	r3, [pc, #128]	@ (8006ee8 <mbedtls_aes_setkey_enc+0x3e4>)
 8006e66:	5c5b      	ldrb	r3, [r3, r1]
 8006e68:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 8006e6a:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[11] ) ] << 24 );
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	332c      	adds	r3, #44	@ 0x2c
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	0e1b      	lsrs	r3, r3, #24
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee8 <mbedtls_aes_setkey_enc+0x3e4>)
 8006e7c:	5c9b      	ldrb	r3, [r3, r2]
 8006e7e:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 8006e84:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8006e86:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	3314      	adds	r3, #20
 8006e8c:	6819      	ldr	r1, [r3, #0]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	3330      	adds	r3, #48	@ 0x30
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	3334      	adds	r3, #52	@ 0x34
 8006e98:	404a      	eors	r2, r1
 8006e9a:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	3318      	adds	r3, #24
 8006ea0:	6819      	ldr	r1, [r3, #0]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	3334      	adds	r3, #52	@ 0x34
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	3338      	adds	r3, #56	@ 0x38
 8006eac:	404a      	eors	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	331c      	adds	r3, #28
 8006eb4:	6819      	ldr	r1, [r3, #0]
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	3338      	adds	r3, #56	@ 0x38
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	333c      	adds	r3, #60	@ 0x3c
 8006ec0:	404a      	eors	r2, r1
 8006ec2:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	3320      	adds	r3, #32
 8006ece:	613b      	str	r3, [r7, #16]
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2b06      	cmp	r3, #6
 8006ed4:	f67f af5c 	bls.w	8006d90 <mbedtls_aes_setkey_enc+0x28c>
            }
            break;
 8006ed8:	bf00      	nop
    }

    return( 0 );
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	200025c4 	.word	0x200025c4
 8006ee8:	200003c4 	.word	0x200003c4

08006eec <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b0d0      	sub	sp, #320	@ 0x140
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006ef6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006efa:	6018      	str	r0, [r3, #0]
 8006efc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f00:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006f04:	6019      	str	r1, [r3, #0]
 8006f06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f0a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006f0e:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8006f10:	f107 0314 	add.w	r3, r7, #20
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff fdd5 	bl	8006ac4 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8006f1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f1e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006f2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f2e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8006f38:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8006f3a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f3e:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8006f42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f46:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006f4a:	f107 0014 	add.w	r0, r7, #20
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	6819      	ldr	r1, [r3, #0]
 8006f52:	f7ff fdd7 	bl	8006b04 <mbedtls_aes_setkey_enc>
 8006f56:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 8006f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 80e2 	bne.w	8007128 <mbedtls_aes_setkey_dec+0x23c>
        goto exit;

    ctx->nr = cty.nr;
 8006f64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f72:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8006f7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	4413      	add	r3, r2
 8006f92:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 8006f96:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006f9a:	1d13      	adds	r3, r2, #4
 8006f9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006fa0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006fa4:	1d19      	adds	r1, r3, #4
 8006fa6:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8006faa:	6812      	ldr	r2, [r2, #0]
 8006fac:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8006fae:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006fb2:	1d13      	adds	r3, r2, #4
 8006fb4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006fb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006fbc:	1d19      	adds	r1, r3, #4
 8006fbe:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8006fc6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006fca:	1d13      	adds	r3, r2, #4
 8006fcc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006fd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006fd4:	1d19      	adds	r1, r3, #4
 8006fd6:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8006fda:	6812      	ldr	r2, [r2, #0]
 8006fdc:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8006fde:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006fe2:	1d13      	adds	r3, r2, #4
 8006fe4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006fe8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006fec:	1d19      	adds	r1, r3, #4
 8006fee:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8006ff6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006ffa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3b01      	subs	r3, #1
 8007004:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8007008:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800700c:	3b20      	subs	r3, #32
 800700e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007012:	e054      	b.n	80070be <mbedtls_aes_setkey_dec+0x1d2>
    {
        for( j = 0; j < 4; j++, SK++ )
 8007014:	2300      	movs	r3, #0
 8007016:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800701a:	e042      	b.n	80070a2 <mbedtls_aes_setkey_dec+0x1b6>
        {
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 800701c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	461a      	mov	r2, r3
 8007026:	4b47      	ldr	r3, [pc, #284]	@ (8007144 <mbedtls_aes_setkey_dec+0x258>)
 8007028:	5c9b      	ldrb	r3, [r3, r2]
 800702a:	461a      	mov	r2, r3
 800702c:	4b46      	ldr	r3, [pc, #280]	@ (8007148 <mbedtls_aes_setkey_dec+0x25c>)
 800702e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 8007032:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	0a1b      	lsrs	r3, r3, #8
 800703a:	b2db      	uxtb	r3, r3
 800703c:	4619      	mov	r1, r3
 800703e:	4b41      	ldr	r3, [pc, #260]	@ (8007144 <mbedtls_aes_setkey_dec+0x258>)
 8007040:	5c5b      	ldrb	r3, [r3, r1]
 8007042:	4619      	mov	r1, r3
 8007044:	4b41      	ldr	r3, [pc, #260]	@ (800714c <mbedtls_aes_setkey_dec+0x260>)
 8007046:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 800704a:	405a      	eors	r2, r3
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 800704c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	0c1b      	lsrs	r3, r3, #16
 8007054:	b2db      	uxtb	r3, r3
 8007056:	4619      	mov	r1, r3
 8007058:	4b3a      	ldr	r3, [pc, #232]	@ (8007144 <mbedtls_aes_setkey_dec+0x258>)
 800705a:	5c5b      	ldrb	r3, [r3, r1]
 800705c:	4619      	mov	r1, r3
 800705e:	4b3c      	ldr	r3, [pc, #240]	@ (8007150 <mbedtls_aes_setkey_dec+0x264>)
 8007060:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 8007064:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ MBEDTLS_BYTE_3( *SK ) ] );
 8007068:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	0e1b      	lsrs	r3, r3, #24
 8007070:	b2db      	uxtb	r3, r3
 8007072:	461a      	mov	r2, r3
 8007074:	4b33      	ldr	r3, [pc, #204]	@ (8007144 <mbedtls_aes_setkey_dec+0x258>)
 8007076:	5c9b      	ldrb	r3, [r3, r2]
 8007078:	461a      	mov	r2, r3
 800707a:	4b36      	ldr	r3, [pc, #216]	@ (8007154 <mbedtls_aes_setkey_dec+0x268>)
 800707c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8007080:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007084:	1d18      	adds	r0, r3, #4
 8007086:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 800708a:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 800708c:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 800708e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007092:	3301      	adds	r3, #1
 8007094:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007098:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800709c:	3304      	adds	r3, #4
 800709e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80070a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	ddb8      	ble.n	800701c <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80070aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80070ae:	3b01      	subs	r3, #1
 80070b0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80070b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80070b8:	3b20      	subs	r3, #32
 80070ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80070be:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	dca6      	bgt.n	8007014 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 80070c6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80070ca:	1d13      	adds	r3, r2, #4
 80070cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80070d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80070d4:	1d19      	adds	r1, r3, #4
 80070d6:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80070de:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80070e2:	1d13      	adds	r3, r2, #4
 80070e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80070e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80070ec:	1d19      	adds	r1, r3, #4
 80070ee:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80070f6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80070fa:	1d13      	adds	r3, r2, #4
 80070fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007100:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007104:	1d19      	adds	r1, r3, #4
 8007106:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800710e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007112:	1d13      	adds	r3, r2, #4
 8007114:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007118:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800711c:	1d19      	adds	r1, r3, #4
 800711e:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8007122:	6812      	ldr	r2, [r2, #0]
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	e000      	b.n	800712a <mbedtls_aes_setkey_dec+0x23e>
        goto exit;
 8007128:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 800712a:	f107 0314 	add.w	r3, r7, #20
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff fcd6 	bl	8006ae0 <mbedtls_aes_free>

    return( ret );
 8007134:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 8007138:	4618      	mov	r0, r3
 800713a:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	200003c4 	.word	0x200003c4
 8007148:	200015c4 	.word	0x200015c4
 800714c:	200019c4 	.word	0x200019c4
 8007150:	20001dc4 	.word	0x20001dc4
 8007154:	200021c4 	.word	0x200021c4

08007158 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08e      	sub	sp, #56	@ 0x38
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	633b      	str	r3, [r7, #48]	@ 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	3301      	adds	r3, #1
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	431a      	orrs	r2, r3
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	3302      	adds	r3, #2
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	431a      	orrs	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	3303      	adds	r3, #3
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	061b      	lsls	r3, r3, #24
 800718c:	4313      	orrs	r3, r2
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007192:	1d1a      	adds	r2, r3, #4
 8007194:	633a      	str	r2, [r7, #48]	@ 0x30
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	4053      	eors	r3, r2
 800719c:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	3304      	adds	r3, #4
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	3305      	adds	r3, #5
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	431a      	orrs	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	3306      	adds	r3, #6
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	041b      	lsls	r3, r3, #16
 80071b8:	431a      	orrs	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	3307      	adds	r3, #7
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	061b      	lsls	r3, r3, #24
 80071c2:	4313      	orrs	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	1d1a      	adds	r2, r3, #4
 80071ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	4053      	eors	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	3308      	adds	r3, #8
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	3309      	adds	r3, #9
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	021b      	lsls	r3, r3, #8
 80071e4:	431a      	orrs	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	330a      	adds	r3, #10
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	041b      	lsls	r3, r3, #16
 80071ee:	431a      	orrs	r2, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	330b      	adds	r3, #11
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	061b      	lsls	r3, r3, #24
 80071f8:	4313      	orrs	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	1d1a      	adds	r2, r3, #4
 8007200:	633a      	str	r2, [r7, #48]	@ 0x30
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	4053      	eors	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	330c      	adds	r3, #12
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	461a      	mov	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	330d      	adds	r3, #13
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	431a      	orrs	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	330e      	adds	r3, #14
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	041b      	lsls	r3, r3, #16
 8007224:	431a      	orrs	r2, r3
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	330f      	adds	r3, #15
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	061b      	lsls	r3, r3, #24
 800722e:	4313      	orrs	r3, r2
 8007230:	61fb      	str	r3, [r7, #28]
 8007232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007234:	1d1a      	adds	r2, r3, #4
 8007236:	633a      	str	r2, [r7, #48]	@ 0x30
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	4053      	eors	r3, r2
 800723e:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	105b      	asrs	r3, r3, #1
 8007246:	3b01      	subs	r3, #1
 8007248:	637b      	str	r3, [r7, #52]	@ 0x34
 800724a:	e122      	b.n	8007492 <mbedtls_internal_aes_encrypt+0x33a>
    {
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	1d1a      	adds	r2, r3, #4
 8007250:	633a      	str	r2, [r7, #48]	@ 0x30
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	4619      	mov	r1, r3
 800725a:	4bb0      	ldr	r3, [pc, #704]	@ (800751c <mbedtls_internal_aes_encrypt+0x3c4>)
 800725c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007260:	405a      	eors	r2, r3
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	0a1b      	lsrs	r3, r3, #8
 8007266:	b2db      	uxtb	r3, r3
 8007268:	4619      	mov	r1, r3
 800726a:	4bad      	ldr	r3, [pc, #692]	@ (8007520 <mbedtls_internal_aes_encrypt+0x3c8>)
 800726c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007270:	405a      	eors	r2, r3
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	0c1b      	lsrs	r3, r3, #16
 8007276:	b2db      	uxtb	r3, r3
 8007278:	4619      	mov	r1, r3
 800727a:	4baa      	ldr	r3, [pc, #680]	@ (8007524 <mbedtls_internal_aes_encrypt+0x3cc>)
 800727c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007280:	405a      	eors	r2, r3
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	0e1b      	lsrs	r3, r3, #24
 8007286:	b2db      	uxtb	r3, r3
 8007288:	4619      	mov	r1, r3
 800728a:	4ba7      	ldr	r3, [pc, #668]	@ (8007528 <mbedtls_internal_aes_encrypt+0x3d0>)
 800728c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007290:	4053      	eors	r3, r2
 8007292:	623b      	str	r3, [r7, #32]
 8007294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007296:	1d1a      	adds	r2, r3, #4
 8007298:	633a      	str	r2, [r7, #48]	@ 0x30
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	4619      	mov	r1, r3
 80072a2:	4b9e      	ldr	r3, [pc, #632]	@ (800751c <mbedtls_internal_aes_encrypt+0x3c4>)
 80072a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072a8:	405a      	eors	r2, r3
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	0a1b      	lsrs	r3, r3, #8
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	4619      	mov	r1, r3
 80072b2:	4b9b      	ldr	r3, [pc, #620]	@ (8007520 <mbedtls_internal_aes_encrypt+0x3c8>)
 80072b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072b8:	405a      	eors	r2, r3
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	0c1b      	lsrs	r3, r3, #16
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	4619      	mov	r1, r3
 80072c2:	4b98      	ldr	r3, [pc, #608]	@ (8007524 <mbedtls_internal_aes_encrypt+0x3cc>)
 80072c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072c8:	405a      	eors	r2, r3
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	0e1b      	lsrs	r3, r3, #24
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	4619      	mov	r1, r3
 80072d2:	4b95      	ldr	r3, [pc, #596]	@ (8007528 <mbedtls_internal_aes_encrypt+0x3d0>)
 80072d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072d8:	4053      	eors	r3, r2
 80072da:	627b      	str	r3, [r7, #36]	@ 0x24
 80072dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072de:	1d1a      	adds	r2, r3, #4
 80072e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	4619      	mov	r1, r3
 80072ea:	4b8c      	ldr	r3, [pc, #560]	@ (800751c <mbedtls_internal_aes_encrypt+0x3c4>)
 80072ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072f0:	405a      	eors	r2, r3
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	0a1b      	lsrs	r3, r3, #8
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	4619      	mov	r1, r3
 80072fa:	4b89      	ldr	r3, [pc, #548]	@ (8007520 <mbedtls_internal_aes_encrypt+0x3c8>)
 80072fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007300:	405a      	eors	r2, r3
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	0c1b      	lsrs	r3, r3, #16
 8007306:	b2db      	uxtb	r3, r3
 8007308:	4619      	mov	r1, r3
 800730a:	4b86      	ldr	r3, [pc, #536]	@ (8007524 <mbedtls_internal_aes_encrypt+0x3cc>)
 800730c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007310:	405a      	eors	r2, r3
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	0e1b      	lsrs	r3, r3, #24
 8007316:	b2db      	uxtb	r3, r3
 8007318:	4619      	mov	r1, r3
 800731a:	4b83      	ldr	r3, [pc, #524]	@ (8007528 <mbedtls_internal_aes_encrypt+0x3d0>)
 800731c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007320:	4053      	eors	r3, r2
 8007322:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007326:	1d1a      	adds	r2, r3, #4
 8007328:	633a      	str	r2, [r7, #48]	@ 0x30
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	4619      	mov	r1, r3
 8007332:	4b7a      	ldr	r3, [pc, #488]	@ (800751c <mbedtls_internal_aes_encrypt+0x3c4>)
 8007334:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007338:	405a      	eors	r2, r3
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	0a1b      	lsrs	r3, r3, #8
 800733e:	b2db      	uxtb	r3, r3
 8007340:	4619      	mov	r1, r3
 8007342:	4b77      	ldr	r3, [pc, #476]	@ (8007520 <mbedtls_internal_aes_encrypt+0x3c8>)
 8007344:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007348:	405a      	eors	r2, r3
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	0c1b      	lsrs	r3, r3, #16
 800734e:	b2db      	uxtb	r3, r3
 8007350:	4619      	mov	r1, r3
 8007352:	4b74      	ldr	r3, [pc, #464]	@ (8007524 <mbedtls_internal_aes_encrypt+0x3cc>)
 8007354:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007358:	405a      	eors	r2, r3
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	0e1b      	lsrs	r3, r3, #24
 800735e:	b2db      	uxtb	r3, r3
 8007360:	4619      	mov	r1, r3
 8007362:	4b71      	ldr	r3, [pc, #452]	@ (8007528 <mbedtls_internal_aes_encrypt+0x3d0>)
 8007364:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007368:	4053      	eors	r3, r2
 800736a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 800736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736e:	1d1a      	adds	r2, r3, #4
 8007370:	633a      	str	r2, [r7, #48]	@ 0x30
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	4619      	mov	r1, r3
 800737a:	4b68      	ldr	r3, [pc, #416]	@ (800751c <mbedtls_internal_aes_encrypt+0x3c4>)
 800737c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007380:	405a      	eors	r2, r3
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	0a1b      	lsrs	r3, r3, #8
 8007386:	b2db      	uxtb	r3, r3
 8007388:	4619      	mov	r1, r3
 800738a:	4b65      	ldr	r3, [pc, #404]	@ (8007520 <mbedtls_internal_aes_encrypt+0x3c8>)
 800738c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007390:	405a      	eors	r2, r3
 8007392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007394:	0c1b      	lsrs	r3, r3, #16
 8007396:	b2db      	uxtb	r3, r3
 8007398:	4619      	mov	r1, r3
 800739a:	4b62      	ldr	r3, [pc, #392]	@ (8007524 <mbedtls_internal_aes_encrypt+0x3cc>)
 800739c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073a0:	405a      	eors	r2, r3
 80073a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a4:	0e1b      	lsrs	r3, r3, #24
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	4619      	mov	r1, r3
 80073aa:	4b5f      	ldr	r3, [pc, #380]	@ (8007528 <mbedtls_internal_aes_encrypt+0x3d0>)
 80073ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073b0:	4053      	eors	r3, r2
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	1d1a      	adds	r2, r3, #4
 80073b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	4619      	mov	r1, r3
 80073c2:	4b56      	ldr	r3, [pc, #344]	@ (800751c <mbedtls_internal_aes_encrypt+0x3c4>)
 80073c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073c8:	405a      	eors	r2, r3
 80073ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073cc:	0a1b      	lsrs	r3, r3, #8
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	4619      	mov	r1, r3
 80073d2:	4b53      	ldr	r3, [pc, #332]	@ (8007520 <mbedtls_internal_aes_encrypt+0x3c8>)
 80073d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073d8:	405a      	eors	r2, r3
 80073da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073dc:	0c1b      	lsrs	r3, r3, #16
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	4619      	mov	r1, r3
 80073e2:	4b50      	ldr	r3, [pc, #320]	@ (8007524 <mbedtls_internal_aes_encrypt+0x3cc>)
 80073e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073e8:	405a      	eors	r2, r3
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	0e1b      	lsrs	r3, r3, #24
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	4619      	mov	r1, r3
 80073f2:	4b4d      	ldr	r3, [pc, #308]	@ (8007528 <mbedtls_internal_aes_encrypt+0x3d0>)
 80073f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073f8:	4053      	eors	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	1d1a      	adds	r2, r3, #4
 8007400:	633a      	str	r2, [r7, #48]	@ 0x30
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007406:	b2db      	uxtb	r3, r3
 8007408:	4619      	mov	r1, r3
 800740a:	4b44      	ldr	r3, [pc, #272]	@ (800751c <mbedtls_internal_aes_encrypt+0x3c4>)
 800740c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007410:	405a      	eors	r2, r3
 8007412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007414:	0a1b      	lsrs	r3, r3, #8
 8007416:	b2db      	uxtb	r3, r3
 8007418:	4619      	mov	r1, r3
 800741a:	4b41      	ldr	r3, [pc, #260]	@ (8007520 <mbedtls_internal_aes_encrypt+0x3c8>)
 800741c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007420:	405a      	eors	r2, r3
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	b2db      	uxtb	r3, r3
 8007428:	4619      	mov	r1, r3
 800742a:	4b3e      	ldr	r3, [pc, #248]	@ (8007524 <mbedtls_internal_aes_encrypt+0x3cc>)
 800742c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007430:	405a      	eors	r2, r3
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	0e1b      	lsrs	r3, r3, #24
 8007436:	b2db      	uxtb	r3, r3
 8007438:	4619      	mov	r1, r3
 800743a:	4b3b      	ldr	r3, [pc, #236]	@ (8007528 <mbedtls_internal_aes_encrypt+0x3d0>)
 800743c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007440:	4053      	eors	r3, r2
 8007442:	61bb      	str	r3, [r7, #24]
 8007444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007446:	1d1a      	adds	r2, r3, #4
 8007448:	633a      	str	r2, [r7, #48]	@ 0x30
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744e:	b2db      	uxtb	r3, r3
 8007450:	4619      	mov	r1, r3
 8007452:	4b32      	ldr	r3, [pc, #200]	@ (800751c <mbedtls_internal_aes_encrypt+0x3c4>)
 8007454:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007458:	405a      	eors	r2, r3
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	0a1b      	lsrs	r3, r3, #8
 800745e:	b2db      	uxtb	r3, r3
 8007460:	4619      	mov	r1, r3
 8007462:	4b2f      	ldr	r3, [pc, #188]	@ (8007520 <mbedtls_internal_aes_encrypt+0x3c8>)
 8007464:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007468:	405a      	eors	r2, r3
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	0c1b      	lsrs	r3, r3, #16
 800746e:	b2db      	uxtb	r3, r3
 8007470:	4619      	mov	r1, r3
 8007472:	4b2c      	ldr	r3, [pc, #176]	@ (8007524 <mbedtls_internal_aes_encrypt+0x3cc>)
 8007474:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007478:	405a      	eors	r2, r3
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	0e1b      	lsrs	r3, r3, #24
 800747e:	b2db      	uxtb	r3, r3
 8007480:	4619      	mov	r1, r3
 8007482:	4b29      	ldr	r3, [pc, #164]	@ (8007528 <mbedtls_internal_aes_encrypt+0x3d0>)
 8007484:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007488:	4053      	eors	r3, r2
 800748a:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800748c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800748e:	3b01      	subs	r3, #1
 8007490:	637b      	str	r3, [r7, #52]	@ 0x34
 8007492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007494:	2b00      	cmp	r3, #0
 8007496:	f73f aed9 	bgt.w	800724c <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	1d1a      	adds	r2, r3, #4
 800749e:	633a      	str	r2, [r7, #48]	@ 0x30
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	4619      	mov	r1, r3
 80074a8:	4b1c      	ldr	r3, [pc, #112]	@ (800751c <mbedtls_internal_aes_encrypt+0x3c4>)
 80074aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074ae:	405a      	eors	r2, r3
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	0a1b      	lsrs	r3, r3, #8
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	4619      	mov	r1, r3
 80074b8:	4b19      	ldr	r3, [pc, #100]	@ (8007520 <mbedtls_internal_aes_encrypt+0x3c8>)
 80074ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074be:	405a      	eors	r2, r3
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	0c1b      	lsrs	r3, r3, #16
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	4619      	mov	r1, r3
 80074c8:	4b16      	ldr	r3, [pc, #88]	@ (8007524 <mbedtls_internal_aes_encrypt+0x3cc>)
 80074ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074ce:	405a      	eors	r2, r3
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	0e1b      	lsrs	r3, r3, #24
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	4619      	mov	r1, r3
 80074d8:	4b13      	ldr	r3, [pc, #76]	@ (8007528 <mbedtls_internal_aes_encrypt+0x3d0>)
 80074da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074de:	4053      	eors	r3, r2
 80074e0:	623b      	str	r3, [r7, #32]
 80074e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e4:	1d1a      	adds	r2, r3, #4
 80074e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	4619      	mov	r1, r3
 80074f0:	4b0a      	ldr	r3, [pc, #40]	@ (800751c <mbedtls_internal_aes_encrypt+0x3c4>)
 80074f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074f6:	405a      	eors	r2, r3
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	0a1b      	lsrs	r3, r3, #8
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	4619      	mov	r1, r3
 8007500:	4b07      	ldr	r3, [pc, #28]	@ (8007520 <mbedtls_internal_aes_encrypt+0x3c8>)
 8007502:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007506:	405a      	eors	r2, r3
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	0c1b      	lsrs	r3, r3, #16
 800750c:	b2db      	uxtb	r3, r3
 800750e:	4619      	mov	r1, r3
 8007510:	4b04      	ldr	r3, [pc, #16]	@ (8007524 <mbedtls_internal_aes_encrypt+0x3cc>)
 8007512:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007516:	405a      	eors	r2, r3
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	e007      	b.n	800752c <mbedtls_internal_aes_encrypt+0x3d4>
 800751c:	200004c4 	.word	0x200004c4
 8007520:	200008c4 	.word	0x200008c4
 8007524:	20000cc4 	.word	0x20000cc4
 8007528:	200010c4 	.word	0x200010c4
 800752c:	0e1b      	lsrs	r3, r3, #24
 800752e:	b2db      	uxtb	r3, r3
 8007530:	4619      	mov	r1, r3
 8007532:	4b9f      	ldr	r3, [pc, #636]	@ (80077b0 <mbedtls_internal_aes_encrypt+0x658>)
 8007534:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007538:	4053      	eors	r3, r2
 800753a:	627b      	str	r3, [r7, #36]	@ 0x24
 800753c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753e:	1d1a      	adds	r2, r3, #4
 8007540:	633a      	str	r2, [r7, #48]	@ 0x30
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	4619      	mov	r1, r3
 800754a:	4b9a      	ldr	r3, [pc, #616]	@ (80077b4 <mbedtls_internal_aes_encrypt+0x65c>)
 800754c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007550:	405a      	eors	r2, r3
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	0a1b      	lsrs	r3, r3, #8
 8007556:	b2db      	uxtb	r3, r3
 8007558:	4619      	mov	r1, r3
 800755a:	4b97      	ldr	r3, [pc, #604]	@ (80077b8 <mbedtls_internal_aes_encrypt+0x660>)
 800755c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007560:	405a      	eors	r2, r3
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	0c1b      	lsrs	r3, r3, #16
 8007566:	b2db      	uxtb	r3, r3
 8007568:	4619      	mov	r1, r3
 800756a:	4b94      	ldr	r3, [pc, #592]	@ (80077bc <mbedtls_internal_aes_encrypt+0x664>)
 800756c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007570:	405a      	eors	r2, r3
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	0e1b      	lsrs	r3, r3, #24
 8007576:	b2db      	uxtb	r3, r3
 8007578:	4619      	mov	r1, r3
 800757a:	4b8d      	ldr	r3, [pc, #564]	@ (80077b0 <mbedtls_internal_aes_encrypt+0x658>)
 800757c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007580:	4053      	eors	r3, r2
 8007582:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007586:	1d1a      	adds	r2, r3, #4
 8007588:	633a      	str	r2, [r7, #48]	@ 0x30
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	b2db      	uxtb	r3, r3
 8007590:	4619      	mov	r1, r3
 8007592:	4b88      	ldr	r3, [pc, #544]	@ (80077b4 <mbedtls_internal_aes_encrypt+0x65c>)
 8007594:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007598:	405a      	eors	r2, r3
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	0a1b      	lsrs	r3, r3, #8
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	4619      	mov	r1, r3
 80075a2:	4b85      	ldr	r3, [pc, #532]	@ (80077b8 <mbedtls_internal_aes_encrypt+0x660>)
 80075a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075a8:	405a      	eors	r2, r3
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	0c1b      	lsrs	r3, r3, #16
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	4619      	mov	r1, r3
 80075b2:	4b82      	ldr	r3, [pc, #520]	@ (80077bc <mbedtls_internal_aes_encrypt+0x664>)
 80075b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075b8:	405a      	eors	r2, r3
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	0e1b      	lsrs	r3, r3, #24
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	4619      	mov	r1, r3
 80075c2:	4b7b      	ldr	r3, [pc, #492]	@ (80077b0 <mbedtls_internal_aes_encrypt+0x658>)
 80075c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075c8:	4053      	eors	r3, r2
 80075ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    t.X[0] = *RK++ ^ \
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	1d1a      	adds	r2, r3, #4
 80075d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80075d2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 80075d4:	6a3a      	ldr	r2, [r7, #32]
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	4611      	mov	r1, r2
 80075da:	4a79      	ldr	r2, [pc, #484]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 80075dc:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 80075de:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 80075e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e2:	0a1b      	lsrs	r3, r3, #8
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	4619      	mov	r1, r3
 80075e8:	4b75      	ldr	r3, [pc, #468]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 80075ea:	5c5b      	ldrb	r3, [r3, r1]
 80075ec:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 80075ee:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 80075f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f2:	0c1b      	lsrs	r3, r3, #16
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	4619      	mov	r1, r3
 80075f8:	4b71      	ldr	r3, [pc, #452]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 80075fa:	5c5b      	ldrb	r3, [r3, r1]
 80075fc:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 80075fe:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 8007600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007602:	0e1b      	lsrs	r3, r3, #24
 8007604:	b2db      	uxtb	r3, r3
 8007606:	4619      	mov	r1, r3
 8007608:	4b6d      	ldr	r3, [pc, #436]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 800760a:	5c5b      	ldrb	r3, [r3, r1]
 800760c:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 800760e:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8007610:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	1d1a      	adds	r2, r3, #4
 8007616:	633a      	str	r2, [r7, #48]	@ 0x30
 8007618:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 800761a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800761c:	b2d2      	uxtb	r2, r2
 800761e:	4611      	mov	r1, r2
 8007620:	4a67      	ldr	r2, [pc, #412]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 8007622:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8007624:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8007626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007628:	0a1b      	lsrs	r3, r3, #8
 800762a:	b2db      	uxtb	r3, r3
 800762c:	4619      	mov	r1, r3
 800762e:	4b64      	ldr	r3, [pc, #400]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 8007630:	5c5b      	ldrb	r3, [r3, r1]
 8007632:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8007634:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8007636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007638:	0c1b      	lsrs	r3, r3, #16
 800763a:	b2db      	uxtb	r3, r3
 800763c:	4619      	mov	r1, r3
 800763e:	4b60      	ldr	r3, [pc, #384]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 8007640:	5c5b      	ldrb	r3, [r3, r1]
 8007642:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8007644:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	0e1b      	lsrs	r3, r3, #24
 800764a:	b2db      	uxtb	r3, r3
 800764c:	4619      	mov	r1, r3
 800764e:	4b5c      	ldr	r3, [pc, #368]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 8007650:	5c5b      	ldrb	r3, [r3, r1]
 8007652:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8007654:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8007656:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 8007658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765a:	1d1a      	adds	r2, r3, #4
 800765c:	633a      	str	r2, [r7, #48]	@ 0x30
 800765e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8007660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	4611      	mov	r1, r2
 8007666:	4a56      	ldr	r2, [pc, #344]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 8007668:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 800766a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 800766c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	b2db      	uxtb	r3, r3
 8007672:	4619      	mov	r1, r3
 8007674:	4b52      	ldr	r3, [pc, #328]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 8007676:	5c5b      	ldrb	r3, [r3, r1]
 8007678:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 800767a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	0c1b      	lsrs	r3, r3, #16
 8007680:	b2db      	uxtb	r3, r3
 8007682:	4619      	mov	r1, r3
 8007684:	4b4e      	ldr	r3, [pc, #312]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 8007686:	5c5b      	ldrb	r3, [r3, r1]
 8007688:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 800768a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 800768c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768e:	0e1b      	lsrs	r3, r3, #24
 8007690:	b2db      	uxtb	r3, r3
 8007692:	4619      	mov	r1, r3
 8007694:	4b4a      	ldr	r3, [pc, #296]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 8007696:	5c5b      	ldrb	r3, [r3, r1]
 8007698:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 800769a:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 800769c:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	1d1a      	adds	r2, r3, #4
 80076a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80076a4:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 80076a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076a8:	b2d2      	uxtb	r2, r2
 80076aa:	4611      	mov	r1, r2
 80076ac:	4a44      	ldr	r2, [pc, #272]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 80076ae:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 80076b0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	0a1b      	lsrs	r3, r3, #8
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	4619      	mov	r1, r3
 80076ba:	4b41      	ldr	r3, [pc, #260]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 80076bc:	5c5b      	ldrb	r3, [r3, r1]
 80076be:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 80076c0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 80076c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c4:	0c1b      	lsrs	r3, r3, #16
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4619      	mov	r1, r3
 80076ca:	4b3d      	ldr	r3, [pc, #244]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 80076cc:	5c5b      	ldrb	r3, [r3, r1]
 80076ce:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 80076d0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 80076d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d4:	0e1b      	lsrs	r3, r3, #24
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	4619      	mov	r1, r3
 80076da:	4b39      	ldr	r3, [pc, #228]	@ (80077c0 <mbedtls_internal_aes_encrypt+0x668>)
 80076dc:	5c5b      	ldrb	r3, [r3, r1]
 80076de:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 80076e0:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 80076e2:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	701a      	strb	r2, [r3, #0]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	0a1a      	lsrs	r2, r3, #8
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3301      	adds	r3, #1
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	701a      	strb	r2, [r3, #0]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	0c1a      	lsrs	r2, r3, #16
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3302      	adds	r3, #2
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	0e1a      	lsrs	r2, r3, #24
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3303      	adds	r3, #3
 800770c:	b2d2      	uxtb	r2, r2
 800770e:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3304      	adds	r3, #4
 8007716:	b2d2      	uxtb	r2, r2
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	0a1a      	lsrs	r2, r3, #8
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3305      	adds	r3, #5
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	0c1a      	lsrs	r2, r3, #16
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	3306      	adds	r3, #6
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	0e1a      	lsrs	r2, r3, #24
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3307      	adds	r3, #7
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3308      	adds	r3, #8
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	0a1a      	lsrs	r2, r3, #8
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3309      	adds	r3, #9
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	701a      	strb	r2, [r3, #0]
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	0c1a      	lsrs	r2, r3, #16
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	330a      	adds	r3, #10
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	0e1a      	lsrs	r2, r3, #24
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	330b      	adds	r3, #11
 8007768:	b2d2      	uxtb	r2, r2
 800776a:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 800776c:	69fa      	ldr	r2, [r7, #28]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	330c      	adds	r3, #12
 8007772:	b2d2      	uxtb	r2, r2
 8007774:	701a      	strb	r2, [r3, #0]
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	0a1a      	lsrs	r2, r3, #8
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	330d      	adds	r3, #13
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	0c1a      	lsrs	r2, r3, #16
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	330e      	adds	r3, #14
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	701a      	strb	r2, [r3, #0]
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	0e1a      	lsrs	r2, r3, #24
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	330f      	adds	r3, #15
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 800779a:	f107 0310 	add.w	r3, r7, #16
 800779e:	2120      	movs	r1, #32
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 ff8d 	bl	80086c0 <mbedtls_platform_zeroize>

    return( 0 );
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3738      	adds	r7, #56	@ 0x38
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	200010c4 	.word	0x200010c4
 80077b4:	200004c4 	.word	0x200004c4
 80077b8:	200008c4 	.word	0x200008c4
 80077bc:	20000cc4 	.word	0x20000cc4
 80077c0:	200003c4 	.word	0x200003c4

080077c4 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08e      	sub	sp, #56	@ 0x38
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	633b      	str	r3, [r7, #48]	@ 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	3301      	adds	r3, #1
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	021b      	lsls	r3, r3, #8
 80077e4:	431a      	orrs	r2, r3
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	3302      	adds	r3, #2
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	041b      	lsls	r3, r3, #16
 80077ee:	431a      	orrs	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	3303      	adds	r3, #3
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	061b      	lsls	r3, r3, #24
 80077f8:	4313      	orrs	r3, r2
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fe:	1d1a      	adds	r2, r3, #4
 8007800:	633a      	str	r2, [r7, #48]	@ 0x30
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	4053      	eors	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	3304      	adds	r3, #4
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	3305      	adds	r3, #5
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	021b      	lsls	r3, r3, #8
 800781a:	431a      	orrs	r2, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	3306      	adds	r3, #6
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	431a      	orrs	r2, r3
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	3307      	adds	r3, #7
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	061b      	lsls	r3, r3, #24
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	1d1a      	adds	r2, r3, #4
 8007836:	633a      	str	r2, [r7, #48]	@ 0x30
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	4053      	eors	r3, r2
 800783e:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	3308      	adds	r3, #8
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	3309      	adds	r3, #9
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	021b      	lsls	r3, r3, #8
 8007850:	431a      	orrs	r2, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	330a      	adds	r3, #10
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	041b      	lsls	r3, r3, #16
 800785a:	431a      	orrs	r2, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	330b      	adds	r3, #11
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	061b      	lsls	r3, r3, #24
 8007864:	4313      	orrs	r3, r2
 8007866:	61bb      	str	r3, [r7, #24]
 8007868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786a:	1d1a      	adds	r2, r3, #4
 800786c:	633a      	str	r2, [r7, #48]	@ 0x30
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	4053      	eors	r3, r2
 8007874:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	330c      	adds	r3, #12
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	330d      	adds	r3, #13
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	431a      	orrs	r2, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	330e      	adds	r3, #14
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	041b      	lsls	r3, r3, #16
 8007890:	431a      	orrs	r2, r3
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	330f      	adds	r3, #15
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	061b      	lsls	r3, r3, #24
 800789a:	4313      	orrs	r3, r2
 800789c:	61fb      	str	r3, [r7, #28]
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	1d1a      	adds	r2, r3, #4
 80078a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	4053      	eors	r3, r2
 80078aa:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	105b      	asrs	r3, r3, #1
 80078b2:	3b01      	subs	r3, #1
 80078b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078b6:	e122      	b.n	8007afe <mbedtls_internal_aes_decrypt+0x33a>
    {
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 80078b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ba:	1d1a      	adds	r2, r3, #4
 80078bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	4619      	mov	r1, r3
 80078c6:	4bb0      	ldr	r3, [pc, #704]	@ (8007b88 <mbedtls_internal_aes_decrypt+0x3c4>)
 80078c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078cc:	405a      	eors	r2, r3
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	0a1b      	lsrs	r3, r3, #8
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	4619      	mov	r1, r3
 80078d6:	4bad      	ldr	r3, [pc, #692]	@ (8007b8c <mbedtls_internal_aes_decrypt+0x3c8>)
 80078d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078dc:	405a      	eors	r2, r3
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	0c1b      	lsrs	r3, r3, #16
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	4619      	mov	r1, r3
 80078e6:	4baa      	ldr	r3, [pc, #680]	@ (8007b90 <mbedtls_internal_aes_decrypt+0x3cc>)
 80078e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078ec:	405a      	eors	r2, r3
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	0e1b      	lsrs	r3, r3, #24
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	4619      	mov	r1, r3
 80078f6:	4ba7      	ldr	r3, [pc, #668]	@ (8007b94 <mbedtls_internal_aes_decrypt+0x3d0>)
 80078f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078fc:	4053      	eors	r3, r2
 80078fe:	623b      	str	r3, [r7, #32]
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	1d1a      	adds	r2, r3, #4
 8007904:	633a      	str	r2, [r7, #48]	@ 0x30
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	b2db      	uxtb	r3, r3
 800790c:	4619      	mov	r1, r3
 800790e:	4b9e      	ldr	r3, [pc, #632]	@ (8007b88 <mbedtls_internal_aes_decrypt+0x3c4>)
 8007910:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007914:	405a      	eors	r2, r3
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	0a1b      	lsrs	r3, r3, #8
 800791a:	b2db      	uxtb	r3, r3
 800791c:	4619      	mov	r1, r3
 800791e:	4b9b      	ldr	r3, [pc, #620]	@ (8007b8c <mbedtls_internal_aes_decrypt+0x3c8>)
 8007920:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007924:	405a      	eors	r2, r3
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	0c1b      	lsrs	r3, r3, #16
 800792a:	b2db      	uxtb	r3, r3
 800792c:	4619      	mov	r1, r3
 800792e:	4b98      	ldr	r3, [pc, #608]	@ (8007b90 <mbedtls_internal_aes_decrypt+0x3cc>)
 8007930:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007934:	405a      	eors	r2, r3
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	0e1b      	lsrs	r3, r3, #24
 800793a:	b2db      	uxtb	r3, r3
 800793c:	4619      	mov	r1, r3
 800793e:	4b95      	ldr	r3, [pc, #596]	@ (8007b94 <mbedtls_internal_aes_decrypt+0x3d0>)
 8007940:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007944:	4053      	eors	r3, r2
 8007946:	627b      	str	r3, [r7, #36]	@ 0x24
 8007948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794a:	1d1a      	adds	r2, r3, #4
 800794c:	633a      	str	r2, [r7, #48]	@ 0x30
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	4619      	mov	r1, r3
 8007956:	4b8c      	ldr	r3, [pc, #560]	@ (8007b88 <mbedtls_internal_aes_decrypt+0x3c4>)
 8007958:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800795c:	405a      	eors	r2, r3
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	0a1b      	lsrs	r3, r3, #8
 8007962:	b2db      	uxtb	r3, r3
 8007964:	4619      	mov	r1, r3
 8007966:	4b89      	ldr	r3, [pc, #548]	@ (8007b8c <mbedtls_internal_aes_decrypt+0x3c8>)
 8007968:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800796c:	405a      	eors	r2, r3
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	0c1b      	lsrs	r3, r3, #16
 8007972:	b2db      	uxtb	r3, r3
 8007974:	4619      	mov	r1, r3
 8007976:	4b86      	ldr	r3, [pc, #536]	@ (8007b90 <mbedtls_internal_aes_decrypt+0x3cc>)
 8007978:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800797c:	405a      	eors	r2, r3
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	0e1b      	lsrs	r3, r3, #24
 8007982:	b2db      	uxtb	r3, r3
 8007984:	4619      	mov	r1, r3
 8007986:	4b83      	ldr	r3, [pc, #524]	@ (8007b94 <mbedtls_internal_aes_decrypt+0x3d0>)
 8007988:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800798c:	4053      	eors	r3, r2
 800798e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007992:	1d1a      	adds	r2, r3, #4
 8007994:	633a      	str	r2, [r7, #48]	@ 0x30
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	4619      	mov	r1, r3
 800799e:	4b7a      	ldr	r3, [pc, #488]	@ (8007b88 <mbedtls_internal_aes_decrypt+0x3c4>)
 80079a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079a4:	405a      	eors	r2, r3
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	0a1b      	lsrs	r3, r3, #8
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	4619      	mov	r1, r3
 80079ae:	4b77      	ldr	r3, [pc, #476]	@ (8007b8c <mbedtls_internal_aes_decrypt+0x3c8>)
 80079b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079b4:	405a      	eors	r2, r3
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	0c1b      	lsrs	r3, r3, #16
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	4619      	mov	r1, r3
 80079be:	4b74      	ldr	r3, [pc, #464]	@ (8007b90 <mbedtls_internal_aes_decrypt+0x3cc>)
 80079c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079c4:	405a      	eors	r2, r3
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	0e1b      	lsrs	r3, r3, #24
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	4619      	mov	r1, r3
 80079ce:	4b71      	ldr	r3, [pc, #452]	@ (8007b94 <mbedtls_internal_aes_decrypt+0x3d0>)
 80079d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079d4:	4053      	eors	r3, r2
 80079d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 80079d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	4619      	mov	r1, r3
 80079e6:	4b68      	ldr	r3, [pc, #416]	@ (8007b88 <mbedtls_internal_aes_decrypt+0x3c4>)
 80079e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079ec:	405a      	eors	r2, r3
 80079ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f0:	0a1b      	lsrs	r3, r3, #8
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	4619      	mov	r1, r3
 80079f6:	4b65      	ldr	r3, [pc, #404]	@ (8007b8c <mbedtls_internal_aes_decrypt+0x3c8>)
 80079f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079fc:	405a      	eors	r2, r3
 80079fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a00:	0c1b      	lsrs	r3, r3, #16
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	4619      	mov	r1, r3
 8007a06:	4b62      	ldr	r3, [pc, #392]	@ (8007b90 <mbedtls_internal_aes_decrypt+0x3cc>)
 8007a08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a0c:	405a      	eors	r2, r3
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a10:	0e1b      	lsrs	r3, r3, #24
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	4619      	mov	r1, r3
 8007a16:	4b5f      	ldr	r3, [pc, #380]	@ (8007b94 <mbedtls_internal_aes_decrypt+0x3d0>)
 8007a18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a1c:	4053      	eors	r3, r2
 8007a1e:	613b      	str	r3, [r7, #16]
 8007a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a22:	1d1a      	adds	r2, r3, #4
 8007a24:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4b56      	ldr	r3, [pc, #344]	@ (8007b88 <mbedtls_internal_aes_decrypt+0x3c4>)
 8007a30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a34:	405a      	eors	r2, r3
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	0a1b      	lsrs	r3, r3, #8
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4b53      	ldr	r3, [pc, #332]	@ (8007b8c <mbedtls_internal_aes_decrypt+0x3c8>)
 8007a40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a44:	405a      	eors	r2, r3
 8007a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a48:	0c1b      	lsrs	r3, r3, #16
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4b50      	ldr	r3, [pc, #320]	@ (8007b90 <mbedtls_internal_aes_decrypt+0x3cc>)
 8007a50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a54:	405a      	eors	r2, r3
 8007a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a58:	0e1b      	lsrs	r3, r3, #24
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8007b94 <mbedtls_internal_aes_decrypt+0x3d0>)
 8007a60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a64:	4053      	eors	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6a:	1d1a      	adds	r2, r3, #4
 8007a6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	4619      	mov	r1, r3
 8007a76:	4b44      	ldr	r3, [pc, #272]	@ (8007b88 <mbedtls_internal_aes_decrypt+0x3c4>)
 8007a78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a7c:	405a      	eors	r2, r3
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a80:	0a1b      	lsrs	r3, r3, #8
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	4619      	mov	r1, r3
 8007a86:	4b41      	ldr	r3, [pc, #260]	@ (8007b8c <mbedtls_internal_aes_decrypt+0x3c8>)
 8007a88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a8c:	405a      	eors	r2, r3
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	0c1b      	lsrs	r3, r3, #16
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	4619      	mov	r1, r3
 8007a96:	4b3e      	ldr	r3, [pc, #248]	@ (8007b90 <mbedtls_internal_aes_decrypt+0x3cc>)
 8007a98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a9c:	405a      	eors	r2, r3
 8007a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa0:	0e1b      	lsrs	r3, r3, #24
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8007b94 <mbedtls_internal_aes_decrypt+0x3d0>)
 8007aa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007aac:	4053      	eors	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab2:	1d1a      	adds	r2, r3, #4
 8007ab4:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	4619      	mov	r1, r3
 8007abe:	4b32      	ldr	r3, [pc, #200]	@ (8007b88 <mbedtls_internal_aes_decrypt+0x3c4>)
 8007ac0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ac4:	405a      	eors	r2, r3
 8007ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac8:	0a1b      	lsrs	r3, r3, #8
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	4619      	mov	r1, r3
 8007ace:	4b2f      	ldr	r3, [pc, #188]	@ (8007b8c <mbedtls_internal_aes_decrypt+0x3c8>)
 8007ad0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ad4:	405a      	eors	r2, r3
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	0c1b      	lsrs	r3, r3, #16
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	4619      	mov	r1, r3
 8007ade:	4b2c      	ldr	r3, [pc, #176]	@ (8007b90 <mbedtls_internal_aes_decrypt+0x3cc>)
 8007ae0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ae4:	405a      	eors	r2, r3
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	0e1b      	lsrs	r3, r3, #24
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	4619      	mov	r1, r3
 8007aee:	4b29      	ldr	r3, [pc, #164]	@ (8007b94 <mbedtls_internal_aes_decrypt+0x3d0>)
 8007af0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007af4:	4053      	eors	r3, r2
 8007af6:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8007af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007afa:	3b01      	subs	r3, #1
 8007afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f73f aed9 	bgt.w	80078b8 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8007b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b08:	1d1a      	adds	r2, r3, #4
 8007b0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	4619      	mov	r1, r3
 8007b14:	4b1c      	ldr	r3, [pc, #112]	@ (8007b88 <mbedtls_internal_aes_decrypt+0x3c4>)
 8007b16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b1a:	405a      	eors	r2, r3
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	0a1b      	lsrs	r3, r3, #8
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	4619      	mov	r1, r3
 8007b24:	4b19      	ldr	r3, [pc, #100]	@ (8007b8c <mbedtls_internal_aes_decrypt+0x3c8>)
 8007b26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b2a:	405a      	eors	r2, r3
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	0c1b      	lsrs	r3, r3, #16
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	4619      	mov	r1, r3
 8007b34:	4b16      	ldr	r3, [pc, #88]	@ (8007b90 <mbedtls_internal_aes_decrypt+0x3cc>)
 8007b36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b3a:	405a      	eors	r2, r3
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	0e1b      	lsrs	r3, r3, #24
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	4619      	mov	r1, r3
 8007b44:	4b13      	ldr	r3, [pc, #76]	@ (8007b94 <mbedtls_internal_aes_decrypt+0x3d0>)
 8007b46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b4a:	4053      	eors	r3, r2
 8007b4c:	623b      	str	r3, [r7, #32]
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b50:	1d1a      	adds	r2, r3, #4
 8007b52:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b88 <mbedtls_internal_aes_decrypt+0x3c4>)
 8007b5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b62:	405a      	eors	r2, r3
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	0a1b      	lsrs	r3, r3, #8
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4b07      	ldr	r3, [pc, #28]	@ (8007b8c <mbedtls_internal_aes_decrypt+0x3c8>)
 8007b6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b72:	405a      	eors	r2, r3
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	0c1b      	lsrs	r3, r3, #16
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4b04      	ldr	r3, [pc, #16]	@ (8007b90 <mbedtls_internal_aes_decrypt+0x3cc>)
 8007b7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b82:	405a      	eors	r2, r3
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	e007      	b.n	8007b98 <mbedtls_internal_aes_decrypt+0x3d4>
 8007b88:	200015c4 	.word	0x200015c4
 8007b8c:	200019c4 	.word	0x200019c4
 8007b90:	20001dc4 	.word	0x20001dc4
 8007b94:	200021c4 	.word	0x200021c4
 8007b98:	0e1b      	lsrs	r3, r3, #24
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4b9f      	ldr	r3, [pc, #636]	@ (8007e1c <mbedtls_internal_aes_decrypt+0x658>)
 8007ba0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ba4:	4053      	eors	r3, r2
 8007ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007baa:	1d1a      	adds	r2, r3, #4
 8007bac:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4b9a      	ldr	r3, [pc, #616]	@ (8007e20 <mbedtls_internal_aes_decrypt+0x65c>)
 8007bb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007bbc:	405a      	eors	r2, r3
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	0a1b      	lsrs	r3, r3, #8
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4b97      	ldr	r3, [pc, #604]	@ (8007e24 <mbedtls_internal_aes_decrypt+0x660>)
 8007bc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007bcc:	405a      	eors	r2, r3
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	0c1b      	lsrs	r3, r3, #16
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4b94      	ldr	r3, [pc, #592]	@ (8007e28 <mbedtls_internal_aes_decrypt+0x664>)
 8007bd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007bdc:	405a      	eors	r2, r3
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	0e1b      	lsrs	r3, r3, #24
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	4619      	mov	r1, r3
 8007be6:	4b8d      	ldr	r3, [pc, #564]	@ (8007e1c <mbedtls_internal_aes_decrypt+0x658>)
 8007be8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007bec:	4053      	eors	r3, r2
 8007bee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf2:	1d1a      	adds	r2, r3, #4
 8007bf4:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4b88      	ldr	r3, [pc, #544]	@ (8007e20 <mbedtls_internal_aes_decrypt+0x65c>)
 8007c00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c04:	405a      	eors	r2, r3
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	0a1b      	lsrs	r3, r3, #8
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4b85      	ldr	r3, [pc, #532]	@ (8007e24 <mbedtls_internal_aes_decrypt+0x660>)
 8007c10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c14:	405a      	eors	r2, r3
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	0c1b      	lsrs	r3, r3, #16
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4b82      	ldr	r3, [pc, #520]	@ (8007e28 <mbedtls_internal_aes_decrypt+0x664>)
 8007c20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c24:	405a      	eors	r2, r3
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	0e1b      	lsrs	r3, r3, #24
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4b7b      	ldr	r3, [pc, #492]	@ (8007e1c <mbedtls_internal_aes_decrypt+0x658>)
 8007c30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c34:	4053      	eors	r3, r2
 8007c36:	62fb      	str	r3, [r7, #44]	@ 0x2c

    t.X[0] = *RK++ ^ \
 8007c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3a:	1d1a      	adds	r2, r3, #4
 8007c3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c3e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8007c40:	6a3a      	ldr	r2, [r7, #32]
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	4611      	mov	r1, r2
 8007c46:	4a79      	ldr	r2, [pc, #484]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007c48:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 8007c4a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8007c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4e:	0a1b      	lsrs	r3, r3, #8
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	4619      	mov	r1, r3
 8007c54:	4b75      	ldr	r3, [pc, #468]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007c56:	5c5b      	ldrb	r3, [r3, r1]
 8007c58:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8007c5a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8007c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5e:	0c1b      	lsrs	r3, r3, #16
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	4619      	mov	r1, r3
 8007c64:	4b71      	ldr	r3, [pc, #452]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007c66:	5c5b      	ldrb	r3, [r3, r1]
 8007c68:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8007c6a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	0e1b      	lsrs	r3, r3, #24
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	4619      	mov	r1, r3
 8007c74:	4b6d      	ldr	r3, [pc, #436]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007c76:	5c5b      	ldrb	r3, [r3, r1]
 8007c78:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8007c7a:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8007c7c:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	1d1a      	adds	r2, r3, #4
 8007c82:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c84:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8007c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c88:	b2d2      	uxtb	r2, r2
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4a67      	ldr	r2, [pc, #412]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007c8e:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8007c90:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	0a1b      	lsrs	r3, r3, #8
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4b64      	ldr	r3, [pc, #400]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007c9c:	5c5b      	ldrb	r3, [r3, r1]
 8007c9e:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8007ca0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8007ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca4:	0c1b      	lsrs	r3, r3, #16
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4b60      	ldr	r3, [pc, #384]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007cac:	5c5b      	ldrb	r3, [r3, r1]
 8007cae:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 8007cb0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 8007cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb4:	0e1b      	lsrs	r3, r3, #24
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4b5c      	ldr	r3, [pc, #368]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007cbc:	5c5b      	ldrb	r3, [r3, r1]
 8007cbe:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8007cc0:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8007cc2:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc6:	1d1a      	adds	r2, r3, #4
 8007cc8:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cca:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8007ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	4a56      	ldr	r2, [pc, #344]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007cd4:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8007cd6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cda:	0a1b      	lsrs	r3, r3, #8
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4b52      	ldr	r3, [pc, #328]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007ce2:	5c5b      	ldrb	r3, [r3, r1]
 8007ce4:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8007ce6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	0c1b      	lsrs	r3, r3, #16
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4b4e      	ldr	r3, [pc, #312]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007cf2:	5c5b      	ldrb	r3, [r3, r1]
 8007cf4:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8007cf6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 8007cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfa:	0e1b      	lsrs	r3, r3, #24
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	4619      	mov	r1, r3
 8007d00:	4b4a      	ldr	r3, [pc, #296]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007d02:	5c5b      	ldrb	r3, [r3, r1]
 8007d04:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8007d06:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8007d08:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	1d1a      	adds	r2, r3, #4
 8007d0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d10:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8007d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d14:	b2d2      	uxtb	r2, r2
 8007d16:	4611      	mov	r1, r2
 8007d18:	4a44      	ldr	r2, [pc, #272]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007d1a:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 8007d1c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8007d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d20:	0a1b      	lsrs	r3, r3, #8
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	4619      	mov	r1, r3
 8007d26:	4b41      	ldr	r3, [pc, #260]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007d28:	5c5b      	ldrb	r3, [r3, r1]
 8007d2a:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8007d2c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d30:	0c1b      	lsrs	r3, r3, #16
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	4619      	mov	r1, r3
 8007d36:	4b3d      	ldr	r3, [pc, #244]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007d38:	5c5b      	ldrb	r3, [r3, r1]
 8007d3a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8007d3c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	0e1b      	lsrs	r3, r3, #24
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	4619      	mov	r1, r3
 8007d46:	4b39      	ldr	r3, [pc, #228]	@ (8007e2c <mbedtls_internal_aes_decrypt+0x668>)
 8007d48:	5c5b      	ldrb	r3, [r3, r1]
 8007d4a:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 8007d4c:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 8007d4e:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	701a      	strb	r2, [r3, #0]
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	0a1a      	lsrs	r2, r3, #8
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	b2d2      	uxtb	r2, r2
 8007d62:	701a      	strb	r2, [r3, #0]
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	0c1a      	lsrs	r2, r3, #16
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	701a      	strb	r2, [r3, #0]
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	0e1a      	lsrs	r2, r3, #24
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3303      	adds	r3, #3
 8007d78:	b2d2      	uxtb	r2, r2
 8007d7a:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3304      	adds	r3, #4
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	0a1a      	lsrs	r2, r3, #8
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3305      	adds	r3, #5
 8007d8e:	b2d2      	uxtb	r2, r2
 8007d90:	701a      	strb	r2, [r3, #0]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	0c1a      	lsrs	r2, r3, #16
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	3306      	adds	r3, #6
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	0e1a      	lsrs	r2, r3, #24
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3307      	adds	r3, #7
 8007da6:	b2d2      	uxtb	r2, r2
 8007da8:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3308      	adds	r3, #8
 8007db0:	b2d2      	uxtb	r2, r2
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	0a1a      	lsrs	r2, r3, #8
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3309      	adds	r3, #9
 8007dbc:	b2d2      	uxtb	r2, r2
 8007dbe:	701a      	strb	r2, [r3, #0]
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	0c1a      	lsrs	r2, r3, #16
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	330a      	adds	r3, #10
 8007dc8:	b2d2      	uxtb	r2, r2
 8007dca:	701a      	strb	r2, [r3, #0]
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	0e1a      	lsrs	r2, r3, #24
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	330b      	adds	r3, #11
 8007dd4:	b2d2      	uxtb	r2, r2
 8007dd6:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 8007dd8:	69fa      	ldr	r2, [r7, #28]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	0a1a      	lsrs	r2, r3, #8
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	330d      	adds	r3, #13
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	0c1a      	lsrs	r2, r3, #16
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	330e      	adds	r3, #14
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	0e1a      	lsrs	r2, r3, #24
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	330f      	adds	r3, #15
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8007e06:	f107 0310 	add.w	r3, r7, #16
 8007e0a:	2120      	movs	r1, #32
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fc57 	bl	80086c0 <mbedtls_platform_zeroize>

    return( 0 );
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3738      	adds	r7, #56	@ 0x38
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	200021c4 	.word	0x200021c4
 8007e20:	200015c4 	.word	0x200015c4
 8007e24:	200019c4 	.word	0x200019c4
 8007e28:	20001dc4 	.word	0x20001dc4
 8007e2c:	200014c4 	.word	0x200014c4

08007e30 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d106      	bne.n	8007e52 <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7ff f985 	bl	8007158 <mbedtls_internal_aes_encrypt>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	e005      	b.n	8007e5e <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f7ff fcb4 	bl	80077c4 <mbedtls_internal_aes_decrypt>
 8007e5c:	4603      	mov	r3, r0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <mbedtls_des_init>:
    {                                                   \
        uint32_t t = (a); (a) = (b); (b) = t; t = 0;    \
    } while( 0 )

void mbedtls_des_init( mbedtls_des_context *ctx )
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_des_context ) );
 8007e6e:	2280      	movs	r2, #128	@ 0x80
 8007e70:	2100      	movs	r1, #0
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fc38 	bl	80086e8 <memset>
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <mbedtls_des_setkey>:
    return( 0 );
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey( uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t X, Y, T;

    X = MBEDTLS_GET_UINT32_BE( key, 0 );
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	061a      	lsls	r2, r3, #24
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	3301      	adds	r3, #1
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	041b      	lsls	r3, r3, #16
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	3302      	adds	r3, #2
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	021b      	lsls	r3, r3, #8
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	3203      	adds	r2, #3
 8007ea8:	7812      	ldrb	r2, [r2, #0]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]
    Y = MBEDTLS_GET_UINT32_BE( key, 4 );
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	061a      	lsls	r2, r3, #24
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	3305      	adds	r3, #5
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	041b      	lsls	r3, r3, #16
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	3306      	adds	r3, #6
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	3207      	adds	r2, #7
 8007ece:	7812      	ldrb	r2, [r2, #0]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]

    /*
     * Permuted Choice 1
     */
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	091a      	lsrs	r2, r3, #4
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4053      	eors	r3, r2
 8007edc:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8007ee0:	60bb      	str	r3, [r7, #8]
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4053      	eors	r3, r2
 8007ee8:	613b      	str	r3, [r7, #16]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	011b      	lsls	r3, r3, #4
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	4053      	eors	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
    T =  ((Y      ) ^ X) & 0x10101010;  X ^= T; Y ^= (T      );
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	4053      	eors	r3, r2
 8007efa:	f003 3310 	and.w	r3, r3, #269488144	@ 0x10101010
 8007efe:	60bb      	str	r3, [r7, #8]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	4053      	eors	r3, r2
 8007f06:	613b      	str	r3, [r7, #16]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	4053      	eors	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]

    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f003 030f 	and.w	r3, r3, #15
 8007f16:	4a55      	ldr	r2, [pc, #340]	@ (800806c <mbedtls_des_setkey+0x1ec>)
 8007f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f1c:	00da      	lsls	r2, r3, #3
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	0a1b      	lsrs	r3, r3, #8
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	4951      	ldr	r1, [pc, #324]	@ (800806c <mbedtls_des_setkey+0x1ec>)
 8007f28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	431a      	orrs	r2, r3
        | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	0c1b      	lsrs	r3, r3, #16
 8007f34:	f003 030f 	and.w	r3, r3, #15
 8007f38:	494c      	ldr	r1, [pc, #304]	@ (800806c <mbedtls_des_setkey+0x1ec>)
 8007f3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	431a      	orrs	r2, r3
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	0e1b      	lsrs	r3, r3, #24
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	4948      	ldr	r1, [pc, #288]	@ (800806c <mbedtls_des_setkey+0x1ec>)
 8007f4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f50:	431a      	orrs	r2, r3
        | (LHs[ (X >>  5) & 0xF] << 7) | (LHs[ (X >> 13) & 0xF ] << 6)
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	f003 030f 	and.w	r3, r3, #15
 8007f5a:	4944      	ldr	r1, [pc, #272]	@ (800806c <mbedtls_des_setkey+0x1ec>)
 8007f5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f60:	01db      	lsls	r3, r3, #7
 8007f62:	431a      	orrs	r2, r3
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	0b5b      	lsrs	r3, r3, #13
 8007f68:	f003 030f 	and.w	r3, r3, #15
 8007f6c:	493f      	ldr	r1, [pc, #252]	@ (800806c <mbedtls_des_setkey+0x1ec>)
 8007f6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f72:	019b      	lsls	r3, r3, #6
 8007f74:	431a      	orrs	r2, r3
        | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	0d5b      	lsrs	r3, r3, #21
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	493b      	ldr	r1, [pc, #236]	@ (800806c <mbedtls_des_setkey+0x1ec>)
 8007f80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f84:	015b      	lsls	r3, r3, #5
 8007f86:	431a      	orrs	r2, r3
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	0f5b      	lsrs	r3, r3, #29
 8007f8c:	4937      	ldr	r1, [pc, #220]	@ (800806c <mbedtls_des_setkey+0x1ec>)
 8007f8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f92:	011b      	lsls	r3, r3, #4
    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]

    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	085b      	lsrs	r3, r3, #1
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	4a33      	ldr	r2, [pc, #204]	@ (8008070 <mbedtls_des_setkey+0x1f0>)
 8007fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa6:	00da      	lsls	r2, r3, #3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	0a5b      	lsrs	r3, r3, #9
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	492f      	ldr	r1, [pc, #188]	@ (8008070 <mbedtls_des_setkey+0x1f0>)
 8007fb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	0c5b      	lsrs	r3, r3, #17
 8007fbe:	f003 030f 	and.w	r3, r3, #15
 8007fc2:	492b      	ldr	r1, [pc, #172]	@ (8008070 <mbedtls_des_setkey+0x1f0>)
 8007fc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	0e5b      	lsrs	r3, r3, #25
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	4926      	ldr	r1, [pc, #152]	@ (8008070 <mbedtls_des_setkey+0x1f0>)
 8007fd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007fda:	431a      	orrs	r2, r3
        | (RHs[ (Y >>  4) & 0xF] << 7) | (RHs[ (Y >> 12) & 0xF ] << 6)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	091b      	lsrs	r3, r3, #4
 8007fe0:	f003 030f 	and.w	r3, r3, #15
 8007fe4:	4922      	ldr	r1, [pc, #136]	@ (8008070 <mbedtls_des_setkey+0x1f0>)
 8007fe6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007fea:	01db      	lsls	r3, r3, #7
 8007fec:	431a      	orrs	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	0b1b      	lsrs	r3, r3, #12
 8007ff2:	f003 030f 	and.w	r3, r3, #15
 8007ff6:	491e      	ldr	r1, [pc, #120]	@ (8008070 <mbedtls_des_setkey+0x1f0>)
 8007ff8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007ffc:	019b      	lsls	r3, r3, #6
 8007ffe:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	0d1b      	lsrs	r3, r3, #20
 8008004:	f003 030f 	and.w	r3, r3, #15
 8008008:	4919      	ldr	r1, [pc, #100]	@ (8008070 <mbedtls_des_setkey+0x1f0>)
 800800a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800800e:	015b      	lsls	r3, r3, #5
 8008010:	431a      	orrs	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	0f1b      	lsrs	r3, r3, #28
 8008016:	4916      	ldr	r1, [pc, #88]	@ (8008070 <mbedtls_des_setkey+0x1f0>)
 8008018:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800801c:	011b      	lsls	r3, r3, #4
    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]

    X &= 0x0FFFFFFF;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008028:	613b      	str	r3, [r7, #16]
    Y &= 0x0FFFFFFF;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008030:	60fb      	str	r3, [r7, #12]

    /*
     * calculate subkeys
     */
    for( i = 0; i < 16; i++ )
 8008032:	2300      	movs	r3, #0
 8008034:	617b      	str	r3, [r7, #20]
 8008036:	e113      	b.n	8008260 <mbedtls_des_setkey+0x3e0>
    {
        if( i < 2 || i == 8 || i == 15 )
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2b01      	cmp	r3, #1
 800803c:	dd05      	ble.n	800804a <mbedtls_des_setkey+0x1ca>
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2b08      	cmp	r3, #8
 8008042:	d002      	beq.n	800804a <mbedtls_des_setkey+0x1ca>
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	2b0f      	cmp	r3, #15
 8008048:	d114      	bne.n	8008074 <mbedtls_des_setkey+0x1f4>
        {
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	005a      	lsls	r2, r3, #1
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	0edb      	lsrs	r3, r3, #27
 8008052:	4313      	orrs	r3, r2
 8008054:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008058:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	005a      	lsls	r2, r3, #1
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	0edb      	lsrs	r3, r3, #27
 8008062:	4313      	orrs	r3, r2
 8008064:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	e013      	b.n	8008094 <mbedtls_des_setkey+0x214>
 800806c:	08008fa0 	.word	0x08008fa0
 8008070:	08008fe0 	.word	0x08008fe0
        }
        else
        {
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	009a      	lsls	r2, r3, #2
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	0e9b      	lsrs	r3, r3, #26
 800807c:	4313      	orrs	r3, r2
 800807e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008082:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	009a      	lsls	r2, r3, #2
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	0e9b      	lsrs	r3, r3, #26
 800808c:	4313      	orrs	r3, r2
 800808e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008092:	60fb      	str	r3, [r7, #12]
        }

        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	f003 5210 	and.w	r2, r3, #603979776	@ 0x24000000
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	071b      	lsls	r3, r3, #28
 80080a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080a4:	431a      	orrs	r2, r3
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	039b      	lsls	r3, r3, #14
 80080aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080ae:	431a      	orrs	r2, r3
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	049b      	lsls	r3, r3, #18
 80080b4:	f003 7302 	and.w	r3, r3, #34078720	@ 0x2080000
 80080b8:	431a      	orrs	r2, r3
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	019b      	lsls	r3, r3, #6
 80080be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080c2:	431a      	orrs	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	025b      	lsls	r3, r3, #9
 80080c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080cc:	431a      	orrs	r2, r3
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	085b      	lsrs	r3, r3, #1
 80080d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080d6:	431a      	orrs	r2, r3
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	029b      	lsls	r3, r3, #10
 80080dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080e0:	431a      	orrs	r2, r3
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ea:	431a      	orrs	r2, r3
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	0a9b      	lsrs	r3, r3, #10
 80080f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080f4:	431a      	orrs	r2, r3
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	0b5b      	lsrs	r3, r3, #13
 80080fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080fe:	431a      	orrs	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	091b      	lsrs	r3, r3, #4
 8008104:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008108:	431a      	orrs	r2, r3
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	019b      	lsls	r3, r3, #6
 800810e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008112:	431a      	orrs	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	085b      	lsrs	r3, r3, #1
 8008118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800811c:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	0b9b      	lsrs	r3, r3, #14
 8008122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008126:	431a      	orrs	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800812e:	431a      	orrs	r2, r3
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	f003 0320 	and.w	r3, r3, #32
 8008138:	431a      	orrs	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	0a9b      	lsrs	r3, r3, #10
 800813e:	f003 0310 	and.w	r3, r3, #16
 8008142:	431a      	orrs	r2, r3
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	08db      	lsrs	r3, r3, #3
 8008148:	f003 0308 	and.w	r3, r3, #8
 800814c:	431a      	orrs	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	0c9b      	lsrs	r3, r3, #18
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	431a      	orrs	r2, r3
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	0e9b      	lsrs	r3, r3, #26
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	ea42 0103 	orr.w	r1, r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	0e1b      	lsrs	r3, r3, #24
 8008168:	f003 0201 	and.w	r2, r3, #1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	1d18      	adds	r0, r3, #4
 8008170:	6078      	str	r0, [r7, #4]
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 8008172:	430a      	orrs	r2, r1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 8008174:	601a      	str	r2, [r3, #0]

        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	03db      	lsls	r3, r3, #15
 800817a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	045b      	lsls	r3, r3, #17
 8008182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008186:	431a      	orrs	r2, r3
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	029b      	lsls	r3, r3, #10
 800818c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008190:	431a      	orrs	r2, r3
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	059b      	lsls	r3, r3, #22
 8008196:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800819a:	431a      	orrs	r2, r3
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	089b      	lsrs	r3, r3, #2
 80081a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081a4:	431a      	orrs	r2, r3
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	005b      	lsls	r3, r3, #1
 80081aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80081ae:	431a      	orrs	r2, r3
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	041b      	lsls	r3, r3, #16
 80081b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081b8:	431a      	orrs	r2, r3
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	02db      	lsls	r3, r3, #11
 80081be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081c2:	431a      	orrs	r2, r3
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80081cc:	431a      	orrs	r2, r3
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	099b      	lsrs	r3, r3, #6
 80081d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80081d6:	431a      	orrs	r2, r3
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	03db      	lsls	r3, r3, #15
 80081dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081e0:	431a      	orrs	r2, r3
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	091b      	lsrs	r3, r3, #4
 80081e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081ea:	431a      	orrs	r2, r3
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	089b      	lsrs	r3, r3, #2
 80081f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081f4:	431a      	orrs	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	021b      	lsls	r3, r3, #8
 80081fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081fe:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	0b99      	lsrs	r1, r3, #14
 8008204:	f640 0308 	movw	r3, #2056	@ 0x808
 8008208:	400b      	ands	r3, r1
 800820a:	431a      	orrs	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	0a5b      	lsrs	r3, r3, #9
 8008210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008214:	431a      	orrs	r2, r3
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800821c:	431a      	orrs	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	01db      	lsls	r3, r3, #7
 8008222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008226:	431a      	orrs	r2, r3
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	09db      	lsrs	r3, r3, #7
 800822c:	f003 0320 	and.w	r3, r3, #32
 8008230:	431a      	orrs	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	08db      	lsrs	r3, r3, #3
 8008236:	f003 0311 	and.w	r3, r3, #17
 800823a:	431a      	orrs	r2, r3
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	ea42 0103 	orr.w	r1, r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	0d5b      	lsrs	r3, r3, #21
 800824c:	f003 0202 	and.w	r2, r3, #2
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	1d18      	adds	r0, r3, #4
 8008254:	6078      	str	r0, [r7, #4]
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 8008256:	430a      	orrs	r2, r1
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 8008258:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i++ )
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	3301      	adds	r3, #1
 800825e:	617b      	str	r3, [r7, #20]
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2b0f      	cmp	r3, #15
 8008264:	f77f aee8 	ble.w	8008038 <mbedtls_des_setkey+0x1b8>
    }
}
 8008268:	bf00      	nop
 800826a:	bf00      	nop
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop

08008278 <mbedtls_des_setkey_enc>:

/*
 * DES key schedule (56-bit, encryption)
 */
int mbedtls_des_setkey_enc( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
    mbedtls_des_setkey( ctx->sk, key );
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff fdfa 	bl	8007e80 <mbedtls_des_setkey>

    return( 0 );
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <mbedtls_des_setkey_dec>:

/*
 * DES key schedule (56-bit, decryption)
 */
int mbedtls_des_setkey_dec( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b086      	sub	sp, #24
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
    int i;

    mbedtls_des_setkey( ctx->sk, key );
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff fdeb 	bl	8007e80 <mbedtls_des_setkey>

    for( i = 0; i < 16; i += 2 )
 80082aa:	2300      	movs	r3, #0
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	e034      	b.n	800831a <mbedtls_des_setkey_dec+0x84>
    {
        SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b8:	613b      	str	r3, [r7, #16]
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f1c3 021e 	rsb	r2, r3, #30
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f1c3 021e 	rsb	r2, r3, #30
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6939      	ldr	r1, [r7, #16]
 80082d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80082dc:	2300      	movs	r3, #0
 80082de:	613b      	str	r3, [r7, #16]
        SWAP( ctx->sk[i + 1], ctx->sk[31 - i] );
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ea:	60fb      	str	r3, [r7, #12]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f1c3 011f 	rsb	r1, r3, #31
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f1c3 021f 	rsb	r2, r3, #31
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68f9      	ldr	r1, [r7, #12]
 800830c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008310:	2300      	movs	r3, #0
 8008312:	60fb      	str	r3, [r7, #12]
    for( i = 0; i < 16; i += 2 )
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	3302      	adds	r3, #2
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b0f      	cmp	r3, #15
 800831e:	ddc7      	ble.n	80082b0 <mbedtls_des_setkey_dec+0x1a>
    }

    return( 0 );
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
	...

0800832c <mbedtls_des_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)
int mbedtls_des_crypt_ecb( mbedtls_des_context *ctx,
                    const unsigned char input[8],
                    unsigned char output[8] )
{
 800832c:	b480      	push	{r7}
 800832e:	b08b      	sub	sp, #44	@ 0x2c
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	61bb      	str	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE( input, 0 );
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	061a      	lsls	r2, r3, #24
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	3301      	adds	r3, #1
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	041b      	lsls	r3, r3, #16
 800834a:	431a      	orrs	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	3302      	adds	r3, #2
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	021b      	lsls	r3, r3, #8
 8008354:	4313      	orrs	r3, r2
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	3203      	adds	r2, #3
 800835a:	7812      	ldrb	r2, [r2, #0]
 800835c:	4313      	orrs	r3, r2
 800835e:	623b      	str	r3, [r7, #32]
    Y = MBEDTLS_GET_UINT32_BE( input, 4 );
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	3304      	adds	r3, #4
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	061a      	lsls	r2, r3, #24
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	3305      	adds	r3, #5
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	041b      	lsls	r3, r3, #16
 8008370:	431a      	orrs	r2, r3
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	3306      	adds	r3, #6
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	021b      	lsls	r3, r3, #8
 800837a:	4313      	orrs	r3, r2
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	3207      	adds	r2, #7
 8008380:	7812      	ldrb	r2, [r2, #0]
 8008382:	4313      	orrs	r3, r2
 8008384:	61fb      	str	r3, [r7, #28]

    DES_IP( X, Y );
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	091a      	lsrs	r2, r3, #4
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	4053      	eors	r3, r2
 800838e:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	69fa      	ldr	r2, [r7, #28]
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	4053      	eors	r3, r2
 800839a:	61fb      	str	r3, [r7, #28]
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	6a3a      	ldr	r2, [r7, #32]
 80083a2:	4053      	eors	r3, r2
 80083a4:	623b      	str	r3, [r7, #32]
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	0c1a      	lsrs	r2, r3, #16
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	4053      	eors	r3, r2
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	617b      	str	r3, [r7, #20]
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	4053      	eors	r3, r2
 80083b8:	61fb      	str	r3, [r7, #28]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	041b      	lsls	r3, r3, #16
 80083be:	6a3a      	ldr	r2, [r7, #32]
 80083c0:	4053      	eors	r3, r2
 80083c2:	623b      	str	r3, [r7, #32]
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	089a      	lsrs	r2, r3, #2
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	4053      	eors	r3, r2
 80083cc:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80083d0:	617b      	str	r3, [r7, #20]
 80083d2:	6a3a      	ldr	r2, [r7, #32]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	4053      	eors	r3, r2
 80083d8:	623b      	str	r3, [r7, #32]
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	4053      	eors	r3, r2
 80083e2:	61fb      	str	r3, [r7, #28]
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	0a1a      	lsrs	r2, r3, #8
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	4053      	eors	r3, r2
 80083ec:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80083f0:	617b      	str	r3, [r7, #20]
 80083f2:	6a3a      	ldr	r2, [r7, #32]
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	4053      	eors	r3, r2
 80083f8:	623b      	str	r3, [r7, #32]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	021b      	lsls	r3, r3, #8
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	4053      	eors	r3, r2
 8008402:	61fb      	str	r3, [r7, #28]
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800840a:	61fb      	str	r3, [r7, #28]
 800840c:	6a3a      	ldr	r2, [r7, #32]
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	4053      	eors	r3, r2
 8008412:	f003 33aa 	and.w	r3, r3, #2863311530	@ 0xaaaaaaaa
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	4053      	eors	r3, r2
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	6a3a      	ldr	r2, [r7, #32]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	4053      	eors	r3, r2
 8008426:	623b      	str	r3, [r7, #32]
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800842e:	623b      	str	r3, [r7, #32]

    for( i = 0; i < 8; i++ )
 8008430:	2300      	movs	r3, #0
 8008432:	627b      	str	r3, [r7, #36]	@ 0x24
 8008434:	e0a6      	b.n	8008584 <mbedtls_des_crypt_ecb+0x258>
    {
        DES_ROUND( Y, X );
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	1d1a      	adds	r2, r3, #4
 800843a:	61ba      	str	r2, [r7, #24]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69fa      	ldr	r2, [r7, #28]
 8008440:	4053      	eors	r3, r2
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800844a:	4a95      	ldr	r2, [pc, #596]	@ (80086a0 <mbedtls_des_crypt_ecb+0x374>)
 800844c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	0a1b      	lsrs	r3, r3, #8
 8008454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008458:	4992      	ldr	r1, [pc, #584]	@ (80086a4 <mbedtls_des_crypt_ecb+0x378>)
 800845a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800845e:	405a      	eors	r2, r3
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	0c1b      	lsrs	r3, r3, #16
 8008464:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008468:	498f      	ldr	r1, [pc, #572]	@ (80086a8 <mbedtls_des_crypt_ecb+0x37c>)
 800846a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800846e:	405a      	eors	r2, r3
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	0e1b      	lsrs	r3, r3, #24
 8008474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008478:	498c      	ldr	r1, [pc, #560]	@ (80086ac <mbedtls_des_crypt_ecb+0x380>)
 800847a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800847e:	4053      	eors	r3, r2
 8008480:	6a3a      	ldr	r2, [r7, #32]
 8008482:	4053      	eors	r3, r2
 8008484:	623b      	str	r3, [r7, #32]
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	1d1a      	adds	r2, r3, #4
 800848a:	61ba      	str	r2, [r7, #24]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	ea4f 1333 	mov.w	r3, r3, ror #4
 8008494:	4053      	eors	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800849e:	4a84      	ldr	r2, [pc, #528]	@ (80086b0 <mbedtls_des_crypt_ecb+0x384>)
 80084a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	0a1b      	lsrs	r3, r3, #8
 80084a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084ac:	4981      	ldr	r1, [pc, #516]	@ (80086b4 <mbedtls_des_crypt_ecb+0x388>)
 80084ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80084b2:	405a      	eors	r2, r3
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	0c1b      	lsrs	r3, r3, #16
 80084b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084bc:	497e      	ldr	r1, [pc, #504]	@ (80086b8 <mbedtls_des_crypt_ecb+0x38c>)
 80084be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80084c2:	405a      	eors	r2, r3
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	0e1b      	lsrs	r3, r3, #24
 80084c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084cc:	497b      	ldr	r1, [pc, #492]	@ (80086bc <mbedtls_des_crypt_ecb+0x390>)
 80084ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80084d2:	4053      	eors	r3, r2
 80084d4:	6a3a      	ldr	r2, [r7, #32]
 80084d6:	4053      	eors	r3, r2
 80084d8:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	1d1a      	adds	r2, r3, #4
 80084de:	61ba      	str	r2, [r7, #24]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6a3a      	ldr	r2, [r7, #32]
 80084e4:	4053      	eors	r3, r2
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084ee:	4a6c      	ldr	r2, [pc, #432]	@ (80086a0 <mbedtls_des_crypt_ecb+0x374>)
 80084f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	0a1b      	lsrs	r3, r3, #8
 80084f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084fc:	4969      	ldr	r1, [pc, #420]	@ (80086a4 <mbedtls_des_crypt_ecb+0x378>)
 80084fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008502:	405a      	eors	r2, r3
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	0c1b      	lsrs	r3, r3, #16
 8008508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800850c:	4966      	ldr	r1, [pc, #408]	@ (80086a8 <mbedtls_des_crypt_ecb+0x37c>)
 800850e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008512:	405a      	eors	r2, r3
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	0e1b      	lsrs	r3, r3, #24
 8008518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800851c:	4963      	ldr	r1, [pc, #396]	@ (80086ac <mbedtls_des_crypt_ecb+0x380>)
 800851e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008522:	4053      	eors	r3, r2
 8008524:	69fa      	ldr	r2, [r7, #28]
 8008526:	4053      	eors	r3, r2
 8008528:	61fb      	str	r3, [r7, #28]
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	1d1a      	adds	r2, r3, #4
 800852e:	61ba      	str	r2, [r7, #24]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	ea4f 1333 	mov.w	r3, r3, ror #4
 8008538:	4053      	eors	r3, r2
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008542:	4a5b      	ldr	r2, [pc, #364]	@ (80086b0 <mbedtls_des_crypt_ecb+0x384>)
 8008544:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	0a1b      	lsrs	r3, r3, #8
 800854c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008550:	4958      	ldr	r1, [pc, #352]	@ (80086b4 <mbedtls_des_crypt_ecb+0x388>)
 8008552:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008556:	405a      	eors	r2, r3
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	0c1b      	lsrs	r3, r3, #16
 800855c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008560:	4955      	ldr	r1, [pc, #340]	@ (80086b8 <mbedtls_des_crypt_ecb+0x38c>)
 8008562:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008566:	405a      	eors	r2, r3
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	0e1b      	lsrs	r3, r3, #24
 800856c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008570:	4952      	ldr	r1, [pc, #328]	@ (80086bc <mbedtls_des_crypt_ecb+0x390>)
 8008572:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008576:	4053      	eors	r3, r2
 8008578:	69fa      	ldr	r2, [r7, #28]
 800857a:	4053      	eors	r3, r2
 800857c:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 800857e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008580:	3301      	adds	r3, #1
 8008582:	627b      	str	r3, [r7, #36]	@ 0x24
 8008584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008586:	2b07      	cmp	r3, #7
 8008588:	f77f af55 	ble.w	8008436 <mbedtls_des_crypt_ecb+0x10a>
    }

    DES_FP( Y, X );
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	ea4f 0373 	mov.w	r3, r3, ror #1
 8008592:	61fb      	str	r3, [r7, #28]
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	4053      	eors	r3, r2
 800859a:	f003 33aa 	and.w	r3, r3, #2863311530	@ 0xaaaaaaaa
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	4053      	eors	r3, r2
 80085a6:	61fb      	str	r3, [r7, #28]
 80085a8:	6a3a      	ldr	r2, [r7, #32]
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	4053      	eors	r3, r2
 80085ae:	623b      	str	r3, [r7, #32]
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	ea4f 0373 	mov.w	r3, r3, ror #1
 80085b6:	623b      	str	r3, [r7, #32]
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	0a1a      	lsrs	r2, r3, #8
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	4053      	eors	r3, r2
 80085c0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	69fa      	ldr	r2, [r7, #28]
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	4053      	eors	r3, r2
 80085cc:	61fb      	str	r3, [r7, #28]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	021b      	lsls	r3, r3, #8
 80085d2:	6a3a      	ldr	r2, [r7, #32]
 80085d4:	4053      	eors	r3, r2
 80085d6:	623b      	str	r3, [r7, #32]
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	089a      	lsrs	r2, r3, #2
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	4053      	eors	r3, r2
 80085e0:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80085e4:	617b      	str	r3, [r7, #20]
 80085e6:	69fa      	ldr	r2, [r7, #28]
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	4053      	eors	r3, r2
 80085ec:	61fb      	str	r3, [r7, #28]
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	6a3a      	ldr	r2, [r7, #32]
 80085f4:	4053      	eors	r3, r2
 80085f6:	623b      	str	r3, [r7, #32]
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	0c1a      	lsrs	r2, r3, #16
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	4053      	eors	r3, r2
 8008600:	b29b      	uxth	r3, r3
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	6a3a      	ldr	r2, [r7, #32]
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	4053      	eors	r3, r2
 800860a:	623b      	str	r3, [r7, #32]
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	041b      	lsls	r3, r3, #16
 8008610:	69fa      	ldr	r2, [r7, #28]
 8008612:	4053      	eors	r3, r2
 8008614:	61fb      	str	r3, [r7, #28]
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	091a      	lsrs	r2, r3, #4
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	4053      	eors	r3, r2
 800861e:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	6a3a      	ldr	r2, [r7, #32]
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	4053      	eors	r3, r2
 800862a:	623b      	str	r3, [r7, #32]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	011b      	lsls	r3, r3, #4
 8008630:	69fa      	ldr	r2, [r7, #28]
 8008632:	4053      	eors	r3, r2
 8008634:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_BE( Y, output, 0 );
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	0e1b      	lsrs	r3, r3, #24
 800863a:	b2da      	uxtb	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	701a      	strb	r2, [r3, #0]
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	0c1a      	lsrs	r2, r3, #16
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3301      	adds	r3, #1
 8008648:	b2d2      	uxtb	r2, r2
 800864a:	701a      	strb	r2, [r3, #0]
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	0a1a      	lsrs	r2, r3, #8
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3302      	adds	r3, #2
 8008654:	b2d2      	uxtb	r2, r2
 8008656:	701a      	strb	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3303      	adds	r3, #3
 800865c:	69fa      	ldr	r2, [r7, #28]
 800865e:	b2d2      	uxtb	r2, r2
 8008660:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_BE( X, output, 4 );
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	0e1a      	lsrs	r2, r3, #24
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3304      	adds	r3, #4
 800866a:	b2d2      	uxtb	r2, r2
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	0c1a      	lsrs	r2, r3, #16
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3305      	adds	r3, #5
 8008676:	b2d2      	uxtb	r2, r2
 8008678:	701a      	strb	r2, [r3, #0]
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	0a1a      	lsrs	r2, r3, #8
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3306      	adds	r3, #6
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3307      	adds	r3, #7
 800868a:	6a3a      	ldr	r2, [r7, #32]
 800868c:	b2d2      	uxtb	r2, r2
 800868e:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	372c      	adds	r7, #44	@ 0x2c
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	08008ea0 	.word	0x08008ea0
 80086a4:	08008ca0 	.word	0x08008ca0
 80086a8:	08008aa0 	.word	0x08008aa0
 80086ac:	080088a0 	.word	0x080088a0
 80086b0:	08008da0 	.word	0x08008da0
 80086b4:	08008ba0 	.word	0x08008ba0
 80086b8:	080089a0 	.word	0x080089a0
 80086bc:	080087a0 	.word	0x080087a0

080086c0 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <mbedtls_platform_zeroize+0x1c>
        memset_func( buf, 0, len );
 80086d0:	4b04      	ldr	r3, [pc, #16]	@ (80086e4 <mbedtls_platform_zeroize+0x24>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	2100      	movs	r1, #0
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	4798      	blx	r3
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20000010 	.word	0x20000010

080086e8 <memset>:
 80086e8:	4402      	add	r2, r0
 80086ea:	4603      	mov	r3, r0
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d100      	bne.n	80086f2 <memset+0xa>
 80086f0:	4770      	bx	lr
 80086f2:	f803 1b01 	strb.w	r1, [r3], #1
 80086f6:	e7f9      	b.n	80086ec <memset+0x4>

080086f8 <__libc_init_array>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	4d0d      	ldr	r5, [pc, #52]	@ (8008730 <__libc_init_array+0x38>)
 80086fc:	4c0d      	ldr	r4, [pc, #52]	@ (8008734 <__libc_init_array+0x3c>)
 80086fe:	1b64      	subs	r4, r4, r5
 8008700:	10a4      	asrs	r4, r4, #2
 8008702:	2600      	movs	r6, #0
 8008704:	42a6      	cmp	r6, r4
 8008706:	d109      	bne.n	800871c <__libc_init_array+0x24>
 8008708:	4d0b      	ldr	r5, [pc, #44]	@ (8008738 <__libc_init_array+0x40>)
 800870a:	4c0c      	ldr	r4, [pc, #48]	@ (800873c <__libc_init_array+0x44>)
 800870c:	f000 f818 	bl	8008740 <_init>
 8008710:	1b64      	subs	r4, r4, r5
 8008712:	10a4      	asrs	r4, r4, #2
 8008714:	2600      	movs	r6, #0
 8008716:	42a6      	cmp	r6, r4
 8008718:	d105      	bne.n	8008726 <__libc_init_array+0x2e>
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008720:	4798      	blx	r3
 8008722:	3601      	adds	r6, #1
 8008724:	e7ee      	b.n	8008704 <__libc_init_array+0xc>
 8008726:	f855 3b04 	ldr.w	r3, [r5], #4
 800872a:	4798      	blx	r3
 800872c:	3601      	adds	r6, #1
 800872e:	e7f2      	b.n	8008716 <__libc_init_array+0x1e>
 8008730:	08009028 	.word	0x08009028
 8008734:	08009028 	.word	0x08009028
 8008738:	08009028 	.word	0x08009028
 800873c:	0800902c 	.word	0x0800902c

08008740 <_init>:
 8008740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008742:	bf00      	nop
 8008744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008746:	bc08      	pop	{r3}
 8008748:	469e      	mov	lr, r3
 800874a:	4770      	bx	lr

0800874c <_fini>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	bf00      	nop
 8008750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008752:	bc08      	pop	{r3}
 8008754:	469e      	mov	lr, r3
 8008756:	4770      	bx	lr
